{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 9;}
{\s50\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext51 List Continue 0;}
{\s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext52 List Continue 1;}
{\s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext53 List Continue 2;}
{\s53\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext54 List Continue 3;}
{\s54\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext55 List Continue 4;}
{\s55\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext56 List Continue 5;}
{\s56\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext57 List Continue 6;}
{\s57\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext58 List Continue 7;}
{\s58\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext59 List Continue 8;}
{\s59\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext59 List Continue 9;}
{\s60\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext61 DescContinue 0;}
{\s61\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext62 DescContinue 1;}
{\s62\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext63 DescContinue 2;}
{\s63\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext64 DescContinue 3;}
{\s64\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext65 DescContinue 4;}
{\s65\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext66 DescContinue 5;}
{\s66\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext67 DescContinue 6;}
{\s67\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext68 DescContinue 7;}
{\s68\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext69 DescContinue 8;}
{\s69\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext69 DescContinue 9;}
{\s70\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext81 LatexTOC 0;}
{\s71\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext82 LatexTOC 1;}
{\s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext83 LatexTOC 2;}
{\s73\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext84 LatexTOC 3;}
{\s74\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext85 LatexTOC 4;}
{\s75\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext86 LatexTOC 5;}
{\s76\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext87 LatexTOC 6;}
{\s77\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext88 LatexTOC 7;}
{\s78\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext89 LatexTOC 8;}
{\s79\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext89 LatexTOC 9;}
{\s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext81 \sautoupd List Bullet 0;}
{\s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid \sbasedon0 \snext82 \sautoupd List Bullet 1;}
{\s82\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls3\adjustright \fs20\cgrid \sbasedon0 \snext83 \sautoupd List Bullet 2;}
{\s83\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls4\adjustright \fs20\cgrid \sbasedon0 \snext84 \sautoupd List Bullet 3;}
{\s84\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls5\adjustright \fs20\cgrid \sbasedon0 \snext85 \sautoupd List Bullet 4;}
{\s85\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls6\adjustright \fs20\cgrid \sbasedon0 \snext86 \sautoupd List Bullet 5;}
{\s86\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls7\adjustright \fs20\cgrid \sbasedon0 \snext87 \sautoupd List Bullet 6;}
{\s87\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls8\adjustright \fs20\cgrid \sbasedon0 \snext88 \sautoupd List Bullet 7;}
{\s88\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls9\adjustright \fs20\cgrid \sbasedon0 \snext89 \sautoupd List Bullet 8;}
{\s89\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls10\adjustright \fs20\cgrid \sbasedon0 \snext89 \sautoupd List Bullet 9;}
{\s90\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext91 \sautoupd List Enum 0;}
{\s91\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext92 \sautoupd List Enum 1;}
{\s92\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext93 \sautoupd List Enum 2;}
{\s93\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext94 \sautoupd List Enum 3;}
{\s94\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext95 \sautoupd List Enum 4;}
{\s95\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext96 \sautoupd List Enum 5;}
{\s96\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext96 \sautoupd List Enum 5;}
{\s97\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext98 \sautoupd List Enum 7;}
{\s98\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext99 \sautoupd List Enum 8;}
{\s99\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext99 \sautoupd List Enum 9;}
}
{\info 
{\title {\comment InnoSwitch3-Pro Arduino Library }InnoSwitch3-Pro Arduino Library}
{\comment Generated byDoxgyen. }
{\creatim \yr2018\mo8\dy3\hr12\min44\sec54}
}\pard\plain 
\sectd\pgnlcrm
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\vertalc\qc\par\par\par\par\par\par\par
\pard\plain \s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid 
{\field\fldedit {\*\fldinst TITLE \\*MERGEFORMAT}{\fldrslt InnoSwitch3-Pro Arduino Library}}\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\par
\par\par\par\par\par\par\par\par\par\par\par\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
{\field\fldedit {\*\fldinst AUTHOR \\*MERGEFORMAT}{\fldrslt AUTHOR}}\par
Version \par{\field\fldedit {\*\fldinst CREATEDATE \\*MERGEFORMAT}{\fldrslt Fri Aug 3 2018 }}\par
\page\page\vertalt
\pard\plain 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Table of Contents\par
\pard\plain \par
{\field\fldedit {\*\fldinst TOC \\f \\*MERGEFORMAT}{\fldrslt Table of contents}}\par
\pard\plain 
\sect \sbkpage \pgndec \pgnrestart
\sect \sectd \sbknone
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Library Reference\par \pard\plain 
{\tc \v Library Reference}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{\bkmkstart AAAAAAAAOL}
{\bkmkend AAAAAAAAOL}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Step by Step Guide
\par}
{\tc\tcl2 \v Step by Step Guide}
\par
{\bkmkstart AAAAAAAAOM}
{\bkmkend AAAAAAAAOM}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Step 1:  Header Files Inclusion
\par}
{\tc\tcl3 \v Step 1:  Header Files Inclusion}
Add the InnoSwitch3-Pro Header Files. {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid #include <{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHW" }{}}{\fldrslt {\cs37\ul\cf2 Drv_Rtc.h}}}
>\par
#include <{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHT" }{}}{\fldrslt {\cs37\ul\cf2 Drv_i2c.h}}}
>\par
#include <{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIB" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro.h}}}
>\par
#include <{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAA" }{}}{\fldrslt {\cs37\ul\cf2 Config.h}}}
>\par
}
 \par
\par}
{\bkmkstart AAAAAAAAON}
{\bkmkend AAAAAAAAON}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Step 2: Class Instance Creation
\par}
{\tc\tcl3 \v Step 2: Class Instance Creation}
Construct a Class instance to call the functions inside {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIC" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Application}}}. \par
 Construction of Class instance of {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHX" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Rtc}}} is Optional. {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIC" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Application}}}
    Inno3ProApp;        \par
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHX" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Rtc}}}
            Inno3ProClk;\par
}
 \par
\par}
{\bkmkstart AAAAAAAAOO}
{\bkmkend AAAAAAAAOO}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Step 3: Initialization
\par}
{\tc\tcl3 \v Step 3: Initialization}
Checks if InnoSwitch3-Pro is ready to communicate and then Write the Initial Commands\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
I2C Clock Frequency - Set to 400Khz \par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Fast VI Command - No Speed Limit \par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
UVL Timer - 64ms \par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Watchdog Timer - Disabled \par}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid void setup() \par
\{\par
    Inno3ProApp.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIF" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Initialization}}}
(); \par
\}\par
}
 \par
\par}
{\bkmkstart AAAAAAAAOP}
{\bkmkend AAAAAAAAOP}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Step 4: Control Functions Setup
\par}
{\tc\tcl3 \v Step 4: Control Functions Setup}
Use the Control Functions On the Main Loop to Command InnoSwitch3-Pro. \par
 \par
{\b  Updates the Output Voltage and Constant Current Setting } \par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Follows a certain sequence of I2C commands in order to avoid inadvertent triggering of UV or OV faults \par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Controls the VOUT pin strong bleeder when Decreasing the voltage from High to Low Setting \par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Automatically updates the Over Voltage (OVA) and Under Voltage (UVA) settings {
\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
OVA is 124% of CV Setpoint \par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
UVA is Fixed to 3V setting  \par}
\par}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Inno3ProApp.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJE" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Write_VI}}}
( Volts, Amps )                  \par
}
 \par
{\b  Updates the Output Voltage without Bleeder Control } \par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Inno3ProApp.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIM" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Write_Volts}}}
( Volts )                  \par
}
 \par
{\b  Sets the Constant Current Setting } \par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Inno3ProApp.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIQ" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Write_Amps}}}
( Amps )                  \par
}
 \par
{\b  Sets the Over Voltage Setting } \par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Inno3ProApp.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIN" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Write_Over_Volts}}}
( Value )                  \par
}
 \par
{\b  Sets the Under Voltage Setting } \par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Inno3ProApp.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIO" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Write_Under_Volts}}}
( Value )                  \par
}
 \par
{\b  Sets the Cable Drop Compesation Value } \par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Inno3ProApp.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIP" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Write_Cable_Drop_Comp}}}
( Value )                    \par
}
 \par
{\b  Sets the Constant Output Power Threshold }  {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Inno3ProApp.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIR" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Write_Volt_Peak}}}
( Value )                    \par
}
 \par
{\b  Used for Turning On or Off the Bus Voltage Switch }  {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Inno3ProApp.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIG" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Vbus_Switch_Control}}}
( Value )                   \par
}
 \par
{\b  Used for Turning On or Off the VOUT pin strong bleeder }  {
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The BLEEDER must not be enabled for extended period of time to prevent excessive power dissipation in the controller  \par}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Inno3ProApp.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIH" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Bleeder_Enable}}}
( Value )                   \par
}
 \par
 \par}
{\bkmkstart AAAAAAAAOQ}
{\bkmkend AAAAAAAAOQ}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Step 5: Telemetry Functions Setup (Optional)
\par}
{\tc\tcl3 \v Step 5: Telemetry Functions Setup (Optional)}
Use the Telemetry Functions On the Main Loop to Read the Registers of InnoSwitch3-Pro \par
 \par
{\b  Used for Reading the desired Register Address }  {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Inno3ProApp.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJG" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Telemetry}}}
(Register_Address)                  \par
}
 \par
{\b  Used for Reading the Specific Bit of Telemetry Register }  {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Inno3ProApp.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJH" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_Bit}}}
(Register_Address , Bit)                  \par
}
 \par
{\b  Tells when InnoSwitch3-Pro is ready to communicate and accept commands }  {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Inno3ProApp.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKH" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_Status_SystemReady}}}
()                   \par
}
 \par
{\b  Returns the measured output voltage }  {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Inno3ProApp.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKF" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_Volts}}}
()                    \par
}
 \par
{\b  Returns the measured output current }  {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Inno3ProApp.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKE" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_Amps}}}
()                    \par
}
 \par
{\b  Returns the VOUT2PCT status information }  {
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
VOUT2PCT status is used to disable the VOUT pin strong bleeder  \par}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Inno3ProApp.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKL" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_Status_Vout2pct}}}
()                    \par
}
 \par
 \par}
{\bkmkstart AAAAAAAAOR}
{\bkmkend AAAAAAAAOR}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Basic Code Example:
\par}
{\tc\tcl3 \v Basic Code Example:}
{\b  This code example is to demonstrate the basic usage of InnoSwitch3-Pro Code Library. } \par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Initial commands are sent using the InnoSwitch3-Pro Initialization Routine.  \par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The Main Routine sets the output voltage to 5V and constant current current to 5.6A.  \par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Cable Drop Compensation is programmed to 300mV.  \par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Constant power is knee voltage is set to 7V and then Vbus Switch is turned ON.  \par}
\par
  \par}
\par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Compatibility{\tc \v Compatibility}\par \pard\plain 
{\bkmkstart AAAAAAAAOK}
{\bkmkend AAAAAAAAOK}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Tested on Arduino Uno \par
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Class Index\par \pard\plain 
{\tc \v Class Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Class List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here are the classes, structs, unions and interfaces with brief descriptions:}
{
\par
\pard\plain \s71\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIC" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Application}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHU" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_I2C}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHX" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Rtc}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
File Index\par \pard\plain 
{\tc \v File Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
File List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here is a list of all files with brief descriptions:}
{
\par
\pard\plain \s71\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b C:/Users/csales/Documents/Arduino/libraries/InnoPro_Arduino/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAA" }{}}{\fldrslt {\cs37\ul\cf2 Config.h}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This is the header file containing all the Library Macros and configuration for InnoSwitch3-Pro })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b C:/Users/csales/Documents/Arduino/libraries/InnoPro_Arduino/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHS" }{}}{\fldrslt {\cs37\ul\cf2 Drv_i2c.cpp}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This is the source file containing the driver APIs for I2C })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b C:/Users/csales/Documents/Arduino/libraries/InnoPro_Arduino/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHT" }{}}{\fldrslt {\cs37\ul\cf2 Drv_i2c.h}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This is the header file containing the driver APIs for I2C })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b C:/Users/csales/Documents/Arduino/libraries/InnoPro_Arduino/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHV" }{}}{\fldrslt {\cs37\ul\cf2 Drv_Rtc.cpp}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This is the source file containing the driver APIs for Clock Signals })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b C:/Users/csales/Documents/Arduino/libraries/InnoPro_Arduino/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHW" }{}}{\fldrslt {\cs37\ul\cf2 Drv_Rtc.h}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This is the header file containing the driver APIs for Clock Signals })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b C:/Users/csales/Documents/Arduino/libraries/InnoPro_Arduino/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHY" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro.cpp}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This is the source file containing the InnoSwitch3-Pro APIs })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b C:/Users/csales/Documents/Arduino/libraries/InnoPro_Arduino/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIB" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro.h}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This is the header file containing the InnoSwitch3-Pro I2C Settings and Control. Includes API for computations related to configuring InnoSwitch3-Pro Registers and Functions to Control the InnoSwitch3-Pro IC })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Class Documentation{\tc \v Class Documentation}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Inno3Pro_Application Class Reference\par \pard\plain 
{\tc\tcl2 \v Inno3Pro_Application}
{\xe \v Inno3Pro_Application}
{\bkmkstart AAAAAAAAIC}
{\bkmkend AAAAAAAAIC}
\par
{
{\f2 #include <Inno3Pro.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 
{
\pard\plain \s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid API Write Functions\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Application Programming Interface to control InnoSwitch3-Pro \par
}}\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 

{
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIF" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Initialization}}}
 (void)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Handles all Common I2C Configurations to be written to InnoSwitch3-Pro as initialization. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIG" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Vbus_Switch_Control}}}
 (bool bEnableVben)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Vbus Switch Control (VBEN Control) }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIH" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Bleeder_Enable}}}
 (bool bEnable)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Handles Bleeder Setting. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAII" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Load_Discharge}}}
 (bool bEnable)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Activates Vbus Load Discharge. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIJ" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_TurnOff_PSU}}}
 (bool bEnable)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Turns off the power supply. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIK" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_FastVI_Disable}}}
 (bool bDisable)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
CV and CC Commands speed limit. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIL" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_CVOnlyMode_Enable}}}
 (bool bEnable)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constant voltage only mode. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIM" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Write_Volts}}}
 (float fSetPtCV)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Output Voltage Control without Bleeder Control. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIN" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Write_Over_Volts}}}
 (float fSetPtOVA)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Over Voltage Protection. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIO" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Write_Under_Volts}}}
 (float fSetPtUVA)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Under Voltage Protection. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIP" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Write_Cable_Drop_Comp}}}
 (float fSetPtCDC)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Cable Drop Compensation (CDC) Control. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIQ" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Write_Amps}}}
 (float fSetPtCC)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constant Current (CC) Control. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIR" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Write_Volt_Peak}}}
 (float fSetPtVpk)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constant Output Power Voltage Threshold (VKP) Control. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIS" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Write_OVL_Fault_Response}}}
 (uint16_t u16Response)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Over Voltage Fault Response Setting. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIT" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Write_UVL_Fault_Response}}}
 (uint16_t u16Response)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Under Voltage Fault Response Setting. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIU" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Write_ISSC_Fault_Response}}}
 (uint16_t u16Response, uint16_t u16Frequency)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
IS Pin Short Fault Response Setting. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIV" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Write_UVL_Fault_Timer}}}
 (uint16_t u16Timer)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Under Voltage Fault Timer Setting. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIW" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Write_Watchdog_Timer}}}
 (uint16_t u16Timer)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Watchdog Timer Setting. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIX" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Write_CVOL_Fault_Response}}}
 (uint16_t u16Response)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
CV Only Fault Response Setting. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIY" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Write_CVOL_Fault_Timer}}}
 (uint16_t u16Timer)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
CV Only Fault Timer Setting. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIZ" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Write_Interupt_Mask}}}
 (uint16_t u16IntMask)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Interrupt Mask Setting. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJA" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Write_OTP_Hysteresis}}}
 (uint16_t u16Otp)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Over Temperature Setting. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJB" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Write_CV_Load}}}
 (uint16_t u16Load)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constant Voltage Load setting. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJC" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Write_Loop_Speed1}}}
 (uint16_t u16LoopSpeed)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Loop Speed 1 Setting. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJD" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Write_Loop_Speed2}}}
 (uint16_t u16LoopSpeed)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Loop Speed 2 Setting. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJE" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Write_VI}}}
 (float fSetPtCV, float fSetPtCC)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Output Voltage Control with Bleeder Control and Constant Current (CC) Control. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJF" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Process_Voltage}}}
 (bool bVoltIncrease, float fSetPtCV)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Handles Command Sequences for Voltage Increment/Decrement. }{
}\par
}}
}
}{
\pard\plain \s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid Common API Telemetry Functions\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 

{
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
uint16_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJG" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Telemetry}}}
 (uint8_t ReadBack_Address)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Handles InnoSwitch3-Pro Common I2C Read Back Telemetry. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJH" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_Bit}}}
 (uint8_t ReadBack_Address, uint8_t Bit)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Handles InnoSwitch3-Pro I2C Read Bit. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
uint8_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJI" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_Byte}}}
 (uint8_t ReadBack_Address, bool bHighByte)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Handles InnoSwitch3-Pro I2C Read Byte. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
uint8_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJJ" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_2Bits}}}
 (uint8_t ReadBack_Address, uint8_t u8ShiftCnt)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Handles InnoSwitch3-Pro I2C Read 2 Bitss. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJK" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_SetPoint}}}
 (uint16_t ReadBack_Address, float fMultiplier)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Handles InnoSwitch3-Pro I2C Set Point and Threshold. }{
}\par
}}
}
}{
\pard\plain \s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid Main API Telemetry Functions\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 

{
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJL" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_CV_SetPoint}}}
 (void)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads the Telemetry register Read1 - Output Voltage Set-Point. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJM" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_UV_Threshold}}}
 (void)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads the Telemetry register Read2 - Under Voltage Threshold. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJN" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_OV_Threshold}}}
 (void)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads the Telemetry register Read3 - Over Voltage Threshold. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJO" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_VbusSwitch}}}
 (void)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 14 on Telemetry register Read4 - VBUS Switch Enable. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJP" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_Bleeder}}}
 (void)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 13 on Telemetry register Read4 - Minimum Load (Bleeder) }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJQ" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_PsuOff}}}
 (void)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 12 on Telemetry register Read4 - Turn PSU Off (Latch Off Device) }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJR" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_FastVI}}}
 (void)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 11 on Telemetry register Read4 - Fast VI Commands. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJS" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_CvoMode}}}
 (void)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 10 on Telemetry register Read4 - Constant-Voltage Mode Only. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJT" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_OtpFaultHyst}}}
 (void)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 9 on Telemetry register Read4 - Over-Temperature Protection. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJU" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_Cable_Drop_Comp}}}
 (void)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads the Telemetry register Read4 - Cable Drop Compensation. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJV" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_CC_SetPoint}}}
 (void)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads the Telemetry register READ5 - Constant Current Set-Point. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJW" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_CP_Threshold}}}
 (void)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads the Telemetry register READ5 - Constant Power Threshold. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
uint8_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJX" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_OV_Fault_Response}}}
 (void)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads the Telemetry register READ6 - Overvoltage Fault Response. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
uint8_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJY" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_UV_Fault_Response}}}
 (void)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads the Telemetry register READ6 - Under voltage Fault Response. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
uint8_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJZ" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_IsPinShort_Fault_Response}}}
 (void)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads the Telemetry register READ6 - IS-pin Short Fault Response. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
uint8_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKA" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_UV_Fault_Timer}}}
 (void)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads the Telemetry register READ6 - Undervoltage Timer. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
uint8_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKB" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_Watchdog_Timer}}}
 (void)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads the Telemetry register READ6 - Watchdog Timer. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
uint8_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKC" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_CvMode_Fault_Response}}}
 (void)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads the Telemetry register READ6 - Constant Voltage Mode Fault Response. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
uint8_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKD" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_CvMode_Timer}}}
 (void)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads the Telemetry register READ6 - Constant Voltage Mode Timer. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKE" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_Amps}}}
 (void)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads the Telemetry register Read7 - Measured Output Current. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKF" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_Volts}}}
 (void)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads the Telemetry register Read9 - Measured Output Voltage. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKG" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_Status_InterruptEnable}}}
 (void)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 15 on Telemetry register Read10 - Interrupt Enable. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKH" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_Status_SystemReady}}}
 (void)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 14 on Telemetry register Read10 - System Ready Signal. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKI" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_Status_OutputDischarge}}}
 (void)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 13 on Telemetry register Read10 - Output Discharge. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKJ" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_Status_HighSwitchFreq}}}
 (void)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 12 on Telemetry register Read10 - Switching Frequency High. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKK" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_Status_OtpFault}}}
 (void)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 9 on Telemetry register Read10 - Over-Temperature Protection. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKL" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_Status_Vout2pct}}}
 (void)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 5 on Telemetry register Read10 - 2% Bleeder Enabled. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKM" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_Status_Vout10pct}}}
 (void)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 4 on Telemetry register Read10 - VOUTADC > 1.1*Vout. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKN" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_Status_IsPinShort}}}
 (void)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 3 on Telemetry register Read10 - IS-pin Short Circuit Detected. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKO" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_Status_UV_Fault}}}
 (void)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 1 on Telemetry register Read10 - Output Voltage UV Fault Comparator. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKP" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_Status_OV_Fault}}}
 (void)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 0 on Telemetry register Read10 - Output Voltage OV Fault Comparator. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKQ" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_Status_CvoMode_AR}}}
 (void)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 15 on Telemetry register Read11 - CVO Mode Auto Restart(AR) }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKR" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_Status_IsPinShort_AR}}}
 (void)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 12 on Telemetry register Read11 - IS-pin Short Circuit Auto Restart(AR) }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKS" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_Status_OV_AR}}}
 (void)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 10 on Telemetry register Read11 - Output Voltage OV Auto Restart(AR) }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKT" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_Status_UV_AR}}}
 (void)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 9 on Telemetry register Read11 - Output Voltage UV Auto Restart(AR) }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKU" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_Status_LatchOff}}}
 (void)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 7 on Telemetry register Read11 - Latch-Off (LO) Occurred. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKV" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_Status_CvoMode_LO}}}
 (void)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 6 on Telemetry register Read11 - CVO Mode Latch Off (LO) }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKW" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_Status_PsuOffCmd}}}
 (void)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 5 on Telemetry register Read11 - PSU Turn-Off Command Received. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKX" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_Status_IsPinShort_LO}}}
 (void)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 4 on Telemetry register Read11 - IS-pin Short Circuit Latch Off (LO) }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKY" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_Status_OV_LO}}}
 (void)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 2 on Telemetry register Read11 - Output Voltage OV Latch Off (LO) }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKZ" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_Status_UV_LO}}}
 (void)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 1 on Telemetry register Read11 - Output Voltage UV Latch Off (LO) }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALA" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_Status_BPS_LO}}}
 (void)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 0 on Telemetry register Read11 - BPS-pin Latch Off (LO) }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALB" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_Interrupt_Mask_CntrlSecondary}}}
 (void)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 14 on Telemetry register Read12 - Interrupt Mask Control Secondary. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALC" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_Interrupt_Mask_BpsCurrentLo}}}
 (void)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 13 on Telemetry register Read12 - Interrupt Mask BPS Current Latch-off. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALD" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_Interrupt_Mask_CvoPkLoadTimer}}}
 (void)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 12 on Telemetry register Read12 - Interrupt Mask BPS Current Latch-off. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALE" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_Interrupt_Mask_IsPinShort}}}
 (void)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 11 on Telemetry register Read12 - Interrupt Mask IS-pin Short. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALF" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_Interrupt_Mask_UV}}}
 (void)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 9 on Telemetry register Read12 - Interrupt Mask Vout Undervoltage(UV) }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALG" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_Interrupt_Mask_OV}}}
 (void)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 8 on Telemetry register Read12 - Interrupt Mask Vout Overvoltage(OV) }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALH" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_Interrupt_Stat_CntrlSecondary}}}
 (void)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 6 on Telemetry register Read12 - Interrupt Status Control Secondary. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALI" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_Interrupt_Stat_BpsCurrentLo}}}
 (void)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 6 on Telemetry register Read12 - Interrupt Status for Control Secondary. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALJ" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_Interrupt_Stat_CvoPkLoadTimer}}}
 (void)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 5 on Telemetry register Read12 - Interrupt Status for CVO Mode Peak load timer. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALK" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_Interrupt_Stat_IsPinShort}}}
 (void)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 3 on Telemetry register Read12 - Interrupt Status for Status IS-pin Short. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALL" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_Interrupt_Stat_UV}}}
 (void)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 1 on Telemetry register Read12 - Interrupt Status for Status Vout(UV) }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALM" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_Interrupt_Stat_OV}}}
 (void)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 0 on Telemetry register Read12 - Interrupt Status for Status Vout(OV) }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALN" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_AmpsAverage}}}
 (void)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads the Telemetry register Read13 - Average Output Current. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALO" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_VoltsAverage}}}
 (void)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads the Telemetry register Read14 - Average Output Voltage. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALP" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Read_Voltage_DAC}}}
 (void)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads the Telemetry register Read15 - Voltage DAC. }{
}\par
}}
}
}{
\pard\plain \s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid InnoSwitch3-Pro Setter Functions\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
API for Setting Individual Register Variables that needs to be configured \par
}}\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 

{
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALQ" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Set_Register_CV}}}
 (float fVout)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALR" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Set_Register_OVA}}}
 (float fOva)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALS" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Set_Register_UVA}}}
 (float fUva)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALT" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Set_Register_CC}}}
 (float fCc)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALU" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Set_Register_CDC}}}
 (float fCdc)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALV" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Set_Register_VKP}}}
 (float fVkp)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALW" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Set_Register_VBEN}}}
 (float fVben)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALX" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Set_Register_UVL}}}
 (float fUvl)\par
}
}{
\pard\plain \s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid InnoSwitch3-Pro Getter Functions\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
API Getting the value of Individual Register Variables \par
}}\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 

{
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALY" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Get_Register_CV}}}
 (void)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALZ" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Get_Register_OVA}}}
 (void)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMA" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Get_Register_UVA}}}
 (void)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMB" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Get_Register_CC}}}
 (void)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMC" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Get_Register_CDC}}}
 (void)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMD" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Get_Register_VKP}}}
 (void)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAME" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Get_Register_VBEN}}}
 (void)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMF" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Get_Register_UVL}}}
 (void)\par
}
}\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 
{
\pard\plain \s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid InnoSwitch3-Pro Flags\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Example Flags Used for Application specific routines\par
Used for Specific InnoSwitch3-Pro Routines \par
}}\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 

{
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMG" }{}}{\fldrslt {\cs37\ul\cf2 b_Lock_Timer_Is_Running}}}
 = false\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMH" }{}}{\fldrslt {\cs37\ul\cf2 b_Lock_Enable}}}
 = false\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMI" }{}}{\fldrslt {\cs37\ul\cf2 b_Setting_Update}}}
 = false\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMJ" }{}}{\fldrslt {\cs37\ul\cf2 b_Request_Enable}}}
 = false\par
}
}{
\pard\plain \s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid InnoSwitch3-Pro I2C Register Buffers\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Individual Array Buffers Used for I2C Communication Each Corresponds to an InnoSwitch3-Pro I2C register\par
These Array Buffers needs to be filled with LSB and MSB values. These are used directly for Writing values to InnoSwitch3-Pro via I2C. These values are Initialize with InnoSwitch3-Pro Default Values.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Buffer[0]  - LSB\par
Buffer[1]  - MSB}
 \par
}}\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 

{
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
uint8_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMK" }{}}{\fldrslt {\cs37\ul\cf2 u8_Buffer_VBEN}}}
 [2] =\{0\}\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
uint8_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAML" }{}}{\fldrslt {\cs37\ul\cf2 u8_Buffer_BLEEDER}}}
 [2] =\{0\}\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
uint8_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMM" }{}}{\fldrslt {\cs37\ul\cf2 u8_Buffer_VDIS}}}
 [2] =\{0\}\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
uint8_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMN" }{}}{\fldrslt {\cs37\ul\cf2 u8_Buffer_TURN_OFF_PSU}}}
 [2] =\{0\}\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
uint8_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMO" }{}}{\fldrslt {\cs37\ul\cf2 u8_Buffer_FAST_VI_CMD}}}
 [2] =\{0\}\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
uint8_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMP" }{}}{\fldrslt {\cs37\ul\cf2 u8_Buffer_CVO}}}
 [2] =\{0\}\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
uint8_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMQ" }{}}{\fldrslt {\cs37\ul\cf2 u8_Buffer_CV}}}
 [2] =\{0\}\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
uint8_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMR" }{}}{\fldrslt {\cs37\ul\cf2 u8_Buffer_OVA}}}
 [2] =\{0\}\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
uint8_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMS" }{}}{\fldrslt {\cs37\ul\cf2 u8_Buffer_UVA}}}
 [2] =\{0\}\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
uint8_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMT" }{}}{\fldrslt {\cs37\ul\cf2 u8_Buffer_CDC}}}
 [2] =\{0\}\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
uint8_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMU" }{}}{\fldrslt {\cs37\ul\cf2 u8_Buffer_CC}}}
 [2] =\{0\}\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
uint8_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMV" }{}}{\fldrslt {\cs37\ul\cf2 u8_Buffer_VKP}}}
 [2] =\{0\}\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
uint8_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMW" }{}}{\fldrslt {\cs37\ul\cf2 u8_Buffer_OVL}}}
 [2] =\{0\}\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
uint8_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMX" }{}}{\fldrslt {\cs37\ul\cf2 u8_Buffer_UVL}}}
 [2] =\{0\}\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
uint8_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMY" }{}}{\fldrslt {\cs37\ul\cf2 u8_Buffer_ISSC}}}
 [2] =\{0\}\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
uint8_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMZ" }{}}{\fldrslt {\cs37\ul\cf2 u8_Buffer_UVL_TIMER}}}
 [2] =\{0\}\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
uint8_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANA" }{}}{\fldrslt {\cs37\ul\cf2 u8_Buffer_WATCHDOG_TIMER}}}
 [2] =\{0\}\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
uint8_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANB" }{}}{\fldrslt {\cs37\ul\cf2 u8_Buffer_CVOL}}}
 [2] =\{0\}\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
uint8_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANC" }{}}{\fldrslt {\cs37\ul\cf2 u8_Buffer_CVOL_TIMER}}}
 [2] =\{0\}\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
uint8_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAND" }{}}{\fldrslt {\cs37\ul\cf2 u8_Buffer_INTERRUPT}}}
 [2] =\{0\}\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
uint8_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANE" }{}}{\fldrslt {\cs37\ul\cf2 u8_Buffer_OTP}}}
 [2] =\{0\}\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
uint8_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANF" }{}}{\fldrslt {\cs37\ul\cf2 u8_Buffer_CVLOAD}}}
 [2] =\{0\}\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
uint8_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANG" }{}}{\fldrslt {\cs37\ul\cf2 u8_Buffer_LoopSpeed1}}}
 [2] =\{0\}\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
uint8_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANH" }{}}{\fldrslt {\cs37\ul\cf2 u8_Buffer_LoopSpeed2}}}
 [2] =\{0\}\par
}
}{
\pard\plain \s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid InnoSwitch3-Pro Registers\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Individual Register Values that needs to be configured\par
After these values have been set, it is converted to appropriate MSB and LSB needed for Filling Up the Inno3-Pro I2C buffers \par
}}\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 

{
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANI" }{}}{\fldrslt {\cs37\ul\cf2 fInno3Pro_CV}}}
 = (float)(5)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANJ" }{}}{\fldrslt {\cs37\ul\cf2 fInno3Pro_OVA}}}
 = (float)(6.2)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANK" }{}}{\fldrslt {\cs37\ul\cf2 fInno3Pro_UVA}}}
 = (float)(3)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANL" }{}}{\fldrslt {\cs37\ul\cf2 fInno3Pro_CDC}}}
 = (float)(300)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANM" }{}}{\fldrslt {\cs37\ul\cf2 fInno3Pro_CC}}}
 = (float)(5.1)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANN" }{}}{\fldrslt {\cs37\ul\cf2 fInno3Pro_VKP}}}
 = (float)(7)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANO" }{}}{\fldrslt {\cs37\ul\cf2 fInno3Pro_VBEN}}}
 = (float)(0)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANP" }{}}{\fldrslt {\cs37\ul\cf2 fInno3Pro_UVL}}}
 = (float)(0)\par
}
}\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Private Member Functions\par
\pard\plain 
{
\pard\plain \s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid InnoSwitch3-Pro Computations\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Individual Functions Used to Compute values for the InnoSwitch3-Pro Registers \par
}}\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 

{
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANQ" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Compute_CV}}}
 (float fSetPt)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
InnoSwitch3-Pro Computation for Output Voltage (CV) }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANR" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Compute_OV}}}
 (float fSetPt)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
InnoSwitch3-Pro Computation for Over-Voltage Threshold (OVA) }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANS" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Compute_UV}}}
 (float fSetPt)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
InnoSwitch3-Pro Computation for Under-Voltage Threshold (UVA) }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANT" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Compute_CDC}}}
 (float fSetPt)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
InnoSwitch3-Pro Computation for Cable Drop Compensation (CDC) }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANU" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Compute_CC}}}
 (float fSetPt)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
InnoSwitch3-Pro Computation for Constant Current Regulation (CC) }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANV" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Compute_VKP}}}
 (float fSetPt)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
InnoSwitch3-Pro Computation for Output Power Knee Voltage (VKP) }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANW" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Compute_VBEN}}}
 (float fSetPt)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
InnoSwitch3-Pro Computation for Series Bus Switch Control (VBEN) }{
}\par
}}
}
}{
\pard\plain \s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid InnoSwitch3-Pro Buffer Conversion\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Prepares the LSB and MSB values to be used on I2C buffers \par
}}\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 

{
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANX" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Encode_Buffer}}}
 (uint16_t u16Temp, uint8_t *u8WriteBuffer)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
InnoSwitch3-Pro Conversion for I2C buffers. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANY" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Encode_Buffer_Parity}}}
 (uint16_t u16Temp, uint8_t *u8WriteBuffer)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
InnoSwitch3-Pro Conversion for I2C buffers. }{
}\par
}}
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANZ" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_OddParity}}}
 (uint8_t u8OddParity)\par
{
\pard\plain \s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
InnoSwitch3-Pro Odd Parity Bit Detection. }{
}\par
}}
}
}{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line 58 of file Inno3Pro.h.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v Inno3Pro_Bleeder_Enable\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Bleeder_Enable}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Inno3Pro_Application::Inno3Pro_Bleeder_Enable (bool  {\i bEnable})}}
\par
{\bkmkstart AAAAAAAAIH}
{\bkmkend AAAAAAAAIH}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Handles Bleeder Setting. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function Writes to bleeder register. The BLEEDER register must not be enabled for extended period of time to prevent excessive power dissipation in the controller\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i bEnable} \cell }{- Value to Enable Bleeder\cell }
{\row }
}
{\b  Input Values: } {
\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
False: Disable Bleeder\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
True : Enable Bleeder\par}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid None \par
}}{
Definition at line 461 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Compute_CC\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Compute_CC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Inno3Pro_Application::Inno3Pro_Compute_CC (float  {\i fSetPt}){\f2 [private]}}}
\par
{\bkmkstart AAAAAAAANU}
{\bkmkend AAAAAAAANU}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
InnoSwitch3-Pro Computation for Constant Current Regulation (CC) }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Calculates the value based on 0.25mV/Step/Rsense Resolution.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid This Function Applies Range Limits to the Set Point Value\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Precondition:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid None\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Postcondition:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid Returned Value Range: 25 to 128 (20% to 100% of CC)\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i fSetPt} \cell }{- Set Point Value\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid Computed CC Value \par
}}{
Definition at line 186 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Compute_CDC\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Compute_CDC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Inno3Pro_Application::Inno3Pro_Compute_CDC (float  {\i fSetPt}){\f2 [private]}}}
\par
{\bkmkstart AAAAAAAANT}
{\bkmkend AAAAAAAANT}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
InnoSwitch3-Pro Computation for Cable Drop Compensation (CDC) }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Calculates the value based on 50mV/LSB Resolution.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid This Function Applies Range Limits to the Set Point Value\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Precondition:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid None\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Postcondition:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid Returned Value Range: 0 to 12 (0V to 600mV)\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i fSetPt} \cell }{- Set Point Value\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid Computed CDC Value \par
}}{
Definition at line 178 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Compute_CV\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Compute_CV}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Inno3Pro_Application::Inno3Pro_Compute_CV (float  {\i fSetPt}){\f2 [private]}}}
\par
{\bkmkstart AAAAAAAANQ}
{\bkmkend AAAAAAAANQ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
InnoSwitch3-Pro Computation for Output Voltage (CV) }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Calculates the value based on 10mV/LSB Resolution.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid This Function Applies Range Limits to the Set Point Value\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Precondition:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid None\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Postcondition:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid Returned Value Range: 300 to 2400 (3V to 24V)\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i fSetPt} \cell }{- Set Point Value\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid Computed CV Value \par
}}{
Definition at line 154 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Compute_OV\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Compute_OV}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Inno3Pro_Application::Inno3Pro_Compute_OV (float  {\i fSetPt}){\f2 [private]}}}
\par
{\bkmkstart AAAAAAAANR}
{\bkmkend AAAAAAAANR}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
InnoSwitch3-Pro Computation for Over-Voltage Threshold (OVA) }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Calculates the value based on 100mV/LSB Resolution.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid This Function Applies Range Limits to the Set Point Value\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Precondition:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid None\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Postcondition:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid Returned Value Range: 62 to 250 (6.2V to 25V)\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i fSetPt} \cell }{- Set Point Value\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid Computed OVA Value \par
}}{
Definition at line 162 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Compute_UV\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Compute_UV}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Inno3Pro_Application::Inno3Pro_Compute_UV (float  {\i fSetPt}){\f2 [private]}}}
\par
{\bkmkstart AAAAAAAANS}
{\bkmkend AAAAAAAANS}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
InnoSwitch3-Pro Computation for Under-Voltage Threshold (UVA) }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Calculates the value based on 100mV/LSB Resolution.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid This Function Applies Range Limits to the Set Point Value\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Precondition:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid None\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Postcondition:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid Returned Value Range: 30 to 240 (3V to 24V)\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i fSetPt} \cell }{- Set Point Value\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid Computed UVA Value \par
}}{
Definition at line 170 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Compute_VBEN\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Compute_VBEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Inno3Pro_Application::Inno3Pro_Compute_VBEN (float  {\i fSetPt}){\f2 [private]}}}
\par
{\bkmkstart AAAAAAAANW}
{\bkmkend AAAAAAAANW}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
InnoSwitch3-Pro Computation for Series Bus Switch Control (VBEN) }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid This function Doesn't have any computation, Only Applies Range limits\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Precondition:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid None\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Postcondition:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid Returned Value Range: 0 or 3 ( 0: Disabled or Bus SW Open , 3: Enabled or Bus SW Closed )\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i fSetPt} \cell }{- Set Point Value\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid VBEN Value \par
}}{
Definition at line 203 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Compute_VKP\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Compute_VKP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Inno3Pro_Application::Inno3Pro_Compute_VKP (float  {\i fSetPt}){\f2 [private]}}}
\par
{\bkmkstart AAAAAAAANV}
{\bkmkend AAAAAAAANV}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
InnoSwitch3-Pro Computation for Output Power Knee Voltage (VKP) }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Calculates the value based on 100mV/LSB Resolution.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid This Function Applies Range Limits to the Set Point Value\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Precondition:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid None\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Postcondition:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid Returned Value Range: 53 to 240 (5.3V to 24V)\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i fSetPt} \cell }{- Set Point Value\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid Computed VKP Value \par
}}{
Definition at line 195 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_CVOnlyMode_Enable\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_CVOnlyMode_Enable}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Inno3Pro_Application::Inno3Pro_CVOnlyMode_Enable (bool  {\i bEnable})}}
\par
{\bkmkstart AAAAAAAAIL}
{\bkmkend AAAAAAAAIL}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constant voltage only mode. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function sets the device to constant voltage only and have no constant current regulation mode.\par
Once the load current exceeds the programmed current, fault setting is activated after CVOL timer expires\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i bEnable} \cell }{- Value to enable CVO mode\cell }
{\row }
}
{\b  Input Values: } {
\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
False: CV and CC Enabled\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
True : CV Only Mode/No CC\par}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid None \par
}}{
Definition at line 537 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Encode_Buffer\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Encode_Buffer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Inno3Pro_Application::Inno3Pro_Encode_Buffer (uint16_t  {\i u16Temp}, uint8_t *  {\i u8WriteBuffer}){\f2 [private]}}}
\par
{\bkmkstart AAAAAAAANX}
{\bkmkend AAAAAAAANX}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
InnoSwitch3-Pro Conversion for I2C buffers. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid This function Converts the Data Input to Hexadecimal LSB and MSB that will be stored on the I2C write buffers.\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Precondition:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid None\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i u16Temp} \cell }{- Value to be converted\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i u8WriteBuffer} \cell }{- A pointer to the memory location where the converted data will be stored\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid None \par
}}{
Definition at line 219 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Encode_Buffer_Parity\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Encode_Buffer_Parity}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Inno3Pro_Application::Inno3Pro_Encode_Buffer_Parity (uint16_t  {\i u16Temp}, uint8_t *  {\i u8WriteBuffer}){\f2 [private]}}}
\par
{\bkmkstart AAAAAAAANY}
{\bkmkend AAAAAAAANY}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
InnoSwitch3-Pro Conversion for I2C buffers. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid This function Converts the Data Input to Hexadecimal LSB and MSB. After parity is added the hex equivalent will be stored on the I2C write buffers.\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Precondition:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid None\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i u16Temp} \cell }{- Value to be converted\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i u8WriteBuffer} \cell }{- A pointer to the memory location where the converted data will be stored\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid None \par
}}{
Definition at line 226 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_FastVI_Disable\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_FastVI_Disable}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Inno3Pro_Application::Inno3Pro_FastVI_Disable (bool  {\i bDisable})}}
\par
{\bkmkstart AAAAAAAAIK}
{\bkmkend AAAAAAAAIK}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
CV and CC Commands speed limit. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function limits the maximum speed (10ms) in which CV and CC commands can be sent to the device.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid Speed limit can be removed as needed\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i bEnable} \cell }{- Value to Set the Speed Limit\cell }
{\row }
}
{\b  Input Values: } {
\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
False: 10ms Update Limit Enabled\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
True : No Speed Limit\par}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid None \par
}}{
Definition at line 518 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Get_Register_CC\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Get_Register_CC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Inno3Pro_Application::Inno3Pro_Get_Register_CC (void ){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAMB}
{\bkmkend AAAAAAAAMB}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 121 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Get_Register_CDC\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Get_Register_CDC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Inno3Pro_Application::Inno3Pro_Get_Register_CDC (void ){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAMC}
{\bkmkend AAAAAAAAMC}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 126 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Get_Register_CV\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Get_Register_CV}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Inno3Pro_Application::Inno3Pro_Get_Register_CV (void ){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAALY}
{\bkmkend AAAAAAAALY}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 106 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Get_Register_OVA\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Get_Register_OVA}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Inno3Pro_Application::Inno3Pro_Get_Register_OVA (void ){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAALZ}
{\bkmkend AAAAAAAALZ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 111 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Get_Register_UVA\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Get_Register_UVA}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Inno3Pro_Application::Inno3Pro_Get_Register_UVA (void ){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAMA}
{\bkmkend AAAAAAAAMA}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 116 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Get_Register_UVL\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Get_Register_UVL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Inno3Pro_Application::Inno3Pro_Get_Register_UVL (void ){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAMF}
{\bkmkend AAAAAAAAMF}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 141 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Get_Register_VBEN\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Get_Register_VBEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Inno3Pro_Application::Inno3Pro_Get_Register_VBEN (void ){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAME}
{\bkmkend AAAAAAAAME}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 136 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Get_Register_VKP\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Get_Register_VKP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Inno3Pro_Application::Inno3Pro_Get_Register_VKP (void ){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAMD}
{\bkmkend AAAAAAAAMD}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 131 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Initialization\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Initialization}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Inno3Pro_Application::Inno3Pro_Initialization (void )}}
\par
{\bkmkstart AAAAAAAAIF}
{\bkmkend AAAAAAAAIF}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Handles all Common I2C Configurations to be written to InnoSwitch3-Pro as initialization. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This Reads the InnoSwitch3-Pro System Ready Signal to check if InnoSwitch3-Pro is ready to communicate. Once InnoSwitch3-Pro is ready ,This function configures the Initial registers needed for operation.\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Needs to be called on the beginning to Initialize InnoSwitch3-Pro  \par
Settings            \par
}
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid None \par
}}{
Definition at line 293 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Load_Discharge\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Load_Discharge}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Inno3Pro_Application::Inno3Pro_Load_Discharge (bool  {\i bEnable})}}
\par
{\bkmkstart AAAAAAAAII}
{\bkmkend AAAAAAAAII}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Activates Vbus Load Discharge. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function Writes to Load Discharge register.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid Enabling the VDIS register will automatically disable the VBEN register\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i bEnable} \cell }{- Value to Enable Load Discharge\cell }
{\row }
}
{\b  Input Values: } {
\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
False: Disable Load Discharge\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
True : Enable Load Discharge\par}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid None \par
}}{
Definition at line 480 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_OddParity\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_OddParity}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Inno3Pro_Application::Inno3Pro_OddParity (uint8_t  {\i u8OddParity}){\f2 [private]}}}
\par
{\bkmkstart AAAAAAAANZ}
{\bkmkend AAAAAAAANZ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
InnoSwitch3-Pro Odd Parity Bit Detection. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid This function Detects the No of 1s in a Byte\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Precondition:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid None\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i u8OddParity} \cell }{- Byte to be Evaluated with Parity\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid True - If the no 1s is Odd number \par
}}{
Definition at line 274 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Process_Voltage\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Process_Voltage}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Inno3Pro_Application::Inno3Pro_Process_Voltage (bool  {\i bVoltIncrease}, float  {\i fSetPtCV})}}
\par
{\bkmkstart AAAAAAAAJF}
{\bkmkend AAAAAAAAJF}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Handles Command Sequences for Voltage Increment/Decrement. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function follows a certain sequence of commands in order to avoid inadvertent triggering of UV or OV faults\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i bVoltIncrease} \cell }{- True or False Value to Increase or Decrease Voltage fSetPtCV - Output Voltage Set Point Value\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid True - I2C commands are successfully written \par
}}{
Definition at line 752 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_2Bits\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_2Bits}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t Inno3Pro_Application::Inno3Pro_Read_2Bits (uint8_t  {\i ReadBack_Address}, uint8_t  {\i u8ShiftCnt})}}
\par
{\bkmkstart AAAAAAAAJJ}
{\bkmkend AAAAAAAAJJ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Handles InnoSwitch3-Pro I2C Read 2 Bitss. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function Reads to 2 Bits of each Telemetry register\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Precondition:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid I2C_Read16() Driver should be already Configured and is able to Read I2C commands\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ReadBack_Address} \cell }{- Read Back Register Address u8ShiftCnt -Number of Right Shift applied to the reading\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid Byte Reading \par
}}{
Definition at line 907 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_Amps\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_Amps}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Inno3Pro_Application::Inno3Pro_Read_Amps (void )}}
\par
{\bkmkstart AAAAAAAAKE}
{\bkmkend AAAAAAAAKE}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads the Telemetry register Read7 - Measured Output Current. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function provides the measured output current. \par
 The output current measurement ADC full range is 128. \par
 This function removes the Odd parity on bit 15 and bit 7 and process it to actual measurements.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid Current Reading in Amps \par
}}{
Definition at line 1111 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_AmpsAverage\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_AmpsAverage}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Inno3Pro_Application::Inno3Pro_Read_AmpsAverage (void )}}
\par
{\bkmkstart AAAAAAAALN}
{\bkmkend AAAAAAAALN}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads the Telemetry register Read13 - Average Output Current. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function provides the average measured output current. \par
 The average output current measurement is simply 16-samples rolling average of the READ7 (measured output current) and the ADC full range is 128 and with No Odd-Parity.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid Current Reading in Amps \par
}}{
Definition at line 1380 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_Bit\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_Bit}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Inno3Pro_Application::Inno3Pro_Read_Bit (uint8_t  {\i ReadBack_Address}, uint8_t  {\i Bit})}}
\par
{\bkmkstart AAAAAAAAJH}
{\bkmkend AAAAAAAAJH}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Handles InnoSwitch3-Pro I2C Read Bit. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function Reads the Specific Bit of each Telemetry register\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Precondition:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid I2C_Read16() Driver should be already Configured and is able to Read I2C commands\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ReadBack_Address} \cell }{- Read Back Register Address Bit - Bit Count of the Register to Read\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid Bit Reading \par
}}{
Definition at line 877 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_Bleeder\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_Bleeder}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Inno3Pro_Application::Inno3Pro_Read_Bleeder (void )}}
\par
{\bkmkstart AAAAAAAAJP}
{\bkmkend AAAAAAAAJP}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 13 on Telemetry register Read4 - Minimum Load (Bleeder) }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function provides the current status of the Bleeder\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid True - Bleeder is ON \par
 False - Bleeder is OFF \par
}}{
Definition at line 981 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_Byte\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_Byte}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t Inno3Pro_Application::Inno3Pro_Read_Byte (uint8_t  {\i ReadBack_Address}, bool  {\i bHighByte})}}
\par
{\bkmkstart AAAAAAAAJI}
{\bkmkend AAAAAAAAJI}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Handles InnoSwitch3-Pro I2C Read Byte. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function Reads the LSB or MSB of each Telemetry register\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Precondition:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid I2C_Read16() Driver should be already Configured and is able to Read I2C commands\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ReadBack_Address} \cell }{- Read Back Register Address bHighByte - Selects the LSB or MSB of the Register to Read\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid Byte Reading \par
}}{
Definition at line 892 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_Cable_Drop_Comp\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_Cable_Drop_Comp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Inno3Pro_Application::Inno3Pro_Read_Cable_Drop_Comp (void )}}
\par
{\bkmkstart AAAAAAAAJU}
{\bkmkend AAAAAAAAJU}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads the Telemetry register Read4 - Cable Drop Compensation. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function provides the current Cable Drop Compensation that was programmed on the CDC Register\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid Cable Drop Compensation in millivolts (mV) \par
}}{
Definition at line 1011 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_CC_SetPoint\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_CC_SetPoint}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Inno3Pro_Application::Inno3Pro_Read_CC_SetPoint (void )}}
\par
{\bkmkstart AAAAAAAAJV}
{\bkmkend AAAAAAAAJV}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads the Telemetry register READ5 - Constant Current Set-Point. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function provides the Constant Current setting that was programmed on the CC Register\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid Constant Current Set-Point in Amperes \par
}}{
Definition at line 1033 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_CP_Threshold\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_CP_Threshold}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Inno3Pro_Application::Inno3Pro_Read_CP_Threshold (void )}}
\par
{\bkmkstart AAAAAAAAJW}
{\bkmkend AAAAAAAAJW}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads the Telemetry register READ5 - Constant Power Threshold. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function provides the Constant Power setting that was programmed on the VKP Register\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid Constant Power Threshold in Volts \par
}}{
Definition at line 1043 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_CV_SetPoint\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_CV_SetPoint}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Inno3Pro_Application::Inno3Pro_Read_CV_SetPoint (void )}}
\par
{\bkmkstart AAAAAAAAJL}
{\bkmkend AAAAAAAAJL}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads the Telemetry register Read1 - Output Voltage Set-Point. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function provides the output voltage setting that was programmed on the CV Register\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid The Output Voltage Set Point in Volts \par
}}{
Definition at line 935 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_CvMode_Fault_Response\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_CvMode_Fault_Response}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t Inno3Pro_Application::Inno3Pro_Read_CvMode_Fault_Response (void )}}
\par
{\bkmkstart AAAAAAAAKC}
{\bkmkend AAAAAAAAKC}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads the Telemetry register READ6 - Constant Voltage Mode Fault Response. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function provides the Constant Voltage Mode Response setting that was programmed on the CVOL Register\par
This determines the action that InnoSwitch3-Pro will take in response to a Constant Voltage Mode Fault\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid Constant Voltage Mode Fault Response in Byte \par
}}{
Definition at line 1091 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_CvMode_Timer\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_CvMode_Timer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t Inno3Pro_Application::Inno3Pro_Read_CvMode_Timer (void )}}
\par
{\bkmkstart AAAAAAAAKD}
{\bkmkend AAAAAAAAKD}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads the Telemetry register READ6 - Constant Voltage Mode Timer. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function provides the Constant Voltage Mode Timeout setting that was programmed on the CVOL Timer Register\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid Watchdog Timer Timeout in Byte \par
}}{
Definition at line 1097 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_CvoMode\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_CvoMode}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Inno3Pro_Application::Inno3Pro_Read_CvoMode (void )}}
\par
{\bkmkstart AAAAAAAAJS}
{\bkmkend AAAAAAAAJS}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 10 on Telemetry register Read4 - Constant-Voltage Mode Only. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function tells if InnoSwitch3-Pro is operating on Constant Voltage Only Mode or both constant voltage and constant current regulation mode is running\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid True - CV Only Mode/No CC Regulation \par
 False - CV and CC Mode Enabled \par
}}{
Definition at line 999 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_FastVI\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_FastVI}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Inno3Pro_Application::Inno3Pro_Read_FastVI (void )}}
\par
{\bkmkstart AAAAAAAAJR}
{\bkmkend AAAAAAAAJR}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 11 on Telemetry register Read4 - Fast VI Commands. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function provides the current setting of the Fast VI Command Register\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid True - No Speed Limit (10ms update limit is disabled) \par
 False - 10ms Update Limit must be observed \par
}}{
Definition at line 993 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_Interrupt_Mask_BpsCurrentLo\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_Interrupt_Mask_BpsCurrentLo}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Inno3Pro_Application::Inno3Pro_Read_Interrupt_Mask_BpsCurrentLo (void )}}
\par
{\bkmkstart AAAAAAAALC}
{\bkmkend AAAAAAAALC}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 13 on Telemetry register Read12 - Interrupt Mask BPS Current Latch-off. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function provides the bit setting of the BPS Current Latch-off that was programmed on the Interrupt Register\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid Once a fault occurs, the Interrupt Mask is reset and must be re-enabled to activate the SCL reporting scheme.\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid True - Interrupt for BPS Current Latch-off is Enabled \par
 False - Interrupt for BPS Current Latch-off Disabled \par
}}{
Definition at line 1307 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_Interrupt_Mask_CntrlSecondary\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_Interrupt_Mask_CntrlSecondary}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Inno3Pro_Application::Inno3Pro_Read_Interrupt_Mask_CntrlSecondary (void )}}
\par
{\bkmkstart AAAAAAAALB}
{\bkmkend AAAAAAAALB}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 14 on Telemetry register Read12 - Interrupt Mask Control Secondary. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function provides the bit setting of the Control Secondary that was programmed on the Interrupt Register\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid Once a fault occurs, the Interrupt Mask is reset and must be re-enabled to activate the SCL reporting scheme.\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid True - Interrupt for Control Secondary is Enabled \par
 False - Interrupt for Control Secondary is Disabled \par
}}{
Definition at line 1301 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_Interrupt_Mask_CvoPkLoadTimer\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_Interrupt_Mask_CvoPkLoadTimer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Inno3Pro_Application::Inno3Pro_Read_Interrupt_Mask_CvoPkLoadTimer (void )}}
\par
{\bkmkstart AAAAAAAALD}
{\bkmkend AAAAAAAALD}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 12 on Telemetry register Read12 - Interrupt Mask BPS Current Latch-off. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function provides the bit setting of the CVO Mode Peak load timer that was programmed on the Interrupt Register\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid Once a fault occurs, the Interrupt Mask is reset and must be re-enabled to activate the SCL reporting scheme.\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid True - Interrupt for CVO Mode Peak load Timer is Enabled \par
 False - Interrupt for CVO Mode Peak load Timer is Disabled \par
}}{
Definition at line 1313 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_Interrupt_Mask_IsPinShort\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_Interrupt_Mask_IsPinShort}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Inno3Pro_Application::Inno3Pro_Read_Interrupt_Mask_IsPinShort (void )}}
\par
{\bkmkstart AAAAAAAALE}
{\bkmkend AAAAAAAALE}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 11 on Telemetry register Read12 - Interrupt Mask IS-pin Short. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function provides the bit setting of the Interrupt Mask IS-pin Short that was programmed on the Interrupt Register\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid Once a fault occurs, the Interrupt Mask is reset and must be re-enabled to activate the SCL reporting scheme.\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid True - Interrupt for IS-pin Short is Enabled \par
 False - Interrupt for IS-pin Short is Disabled \par
}}{
Definition at line 1319 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_Interrupt_Mask_OV\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_Interrupt_Mask_OV}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Inno3Pro_Application::Inno3Pro_Read_Interrupt_Mask_OV (void )}}
\par
{\bkmkstart AAAAAAAALG}
{\bkmkend AAAAAAAALG}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 8 on Telemetry register Read12 - Interrupt Mask Vout Overvoltage(OV) }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function provides the bit setting of the Interrupt Mask Vout(OV) that was programmed on the Interrupt Register\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid Once a fault occurs, the Interrupt Mask is reset and must be re-enabled to activate the SCL reporting scheme.\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid True - Interrupt for Vout (OV) is Enabled \par
 False - Interrupt for Vout (OV) is Disabled \par
}}{
Definition at line 1331 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_Interrupt_Mask_UV\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_Interrupt_Mask_UV}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Inno3Pro_Application::Inno3Pro_Read_Interrupt_Mask_UV (void )}}
\par
{\bkmkstart AAAAAAAALF}
{\bkmkend AAAAAAAALF}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 9 on Telemetry register Read12 - Interrupt Mask Vout Undervoltage(UV) }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function provides the bit setting of the Interrupt Mask Vout(UV) that was programmed on the Interrupt Register\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid Once a fault occurs, the Interrupt Mask is reset and must be re-enabled to activate the SCL reporting scheme.\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid True - Interrupt for Vout (UV) is Enabled \par
 False - Interrupt for Vout (UV) is Disabled \par
}}{
Definition at line 1325 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_Interrupt_Stat_BpsCurrentLo\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_Interrupt_Stat_BpsCurrentLo}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Inno3Pro_Application::Inno3Pro_Read_Interrupt_Stat_BpsCurrentLo (void )}}
\par
{\bkmkstart AAAAAAAALI}
{\bkmkend AAAAAAAALI}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 6 on Telemetry register Read12 - Interrupt Status for Control Secondary. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function tells that Control Secondary fault has occurred and an Interrupt on the SCL was generated\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid Once a fault occurs, the Interrupt Mask is reset and must be re-enabled to activate the SCL reporting scheme.\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid True - Control Secondary fault has occurred \par
 False - No Fault \par
}}{
Definition at line 1343 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_Interrupt_Stat_CntrlSecondary\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_Interrupt_Stat_CntrlSecondary}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Inno3Pro_Application::Inno3Pro_Read_Interrupt_Stat_CntrlSecondary (void )}}
\par
{\bkmkstart AAAAAAAALH}
{\bkmkend AAAAAAAALH}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 6 on Telemetry register Read12 - Interrupt Status Control Secondary. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function tells that Control Secondary fault has occurred and an Interrupt on the SCL was generated\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid Once a fault occurs, the Interrupt Mask is reset and must be re-enabled to activate the SCL reporting scheme.\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid True - Control Secondary fault has occurred \par
 False - No Fault \par
}}{
Definition at line 1337 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_Interrupt_Stat_CvoPkLoadTimer\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_Interrupt_Stat_CvoPkLoadTimer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Inno3Pro_Application::Inno3Pro_Read_Interrupt_Stat_CvoPkLoadTimer (void )}}
\par
{\bkmkstart AAAAAAAALJ}
{\bkmkend AAAAAAAALJ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 5 on Telemetry register Read12 - Interrupt Status for CVO Mode Peak load timer. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function tells that CVO fault has occurred and an Interrupt on the SCL was generated\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid Once a fault occurs, the Interrupt Mask is reset and must be re-enabled to activate the SCL reporting scheme.\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid True - Constant Voltage Mode Fault has occurred \par
 False - No Fault \par
}}{
Definition at line 1349 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_Interrupt_Stat_IsPinShort\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_Interrupt_Stat_IsPinShort}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Inno3Pro_Application::Inno3Pro_Read_Interrupt_Stat_IsPinShort (void )}}
\par
{\bkmkstart AAAAAAAALK}
{\bkmkend AAAAAAAALK}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 3 on Telemetry register Read12 - Interrupt Status for Status IS-pin Short. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function tells that IS-pin Short has occurred and an Interrupt on the SCL was generated\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid Once a fault occurs, the Interrupt Mask is reset and must be re-enabled to activate the SCL reporting scheme.\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid True - IS-pin Short has occurred \par
 False - No Fault \par
}}{
Definition at line 1355 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_Interrupt_Stat_OV\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_Interrupt_Stat_OV}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Inno3Pro_Application::Inno3Pro_Read_Interrupt_Stat_OV (void )}}
\par
{\bkmkstart AAAAAAAALM}
{\bkmkend AAAAAAAALM}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 0 on Telemetry register Read12 - Interrupt Status for Status Vout(OV) }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function tells that Vout Overvoltage Fault has occurred and an Interrupt on the SCL was generated\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid Once a fault occurs, the Interrupt Mask is reset and the particular faults of interest must be re-enabled to activate the SCL reporting scheme.\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid True - Vout Overvoltage(OV) Fault has occurred \par
 False - No Fault \par
}}{
Definition at line 1367 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_Interrupt_Stat_UV\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_Interrupt_Stat_UV}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Inno3Pro_Application::Inno3Pro_Read_Interrupt_Stat_UV (void )}}
\par
{\bkmkstart AAAAAAAALL}
{\bkmkend AAAAAAAALL}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 1 on Telemetry register Read12 - Interrupt Status for Status Vout(UV) }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function tells that Vout Undervoltage Fault has occurred and an Interrupt on the SCL was generated\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid Once a fault occurs, the Interrupt Mask is reset and must be re-enabled to activate the SCL reporting scheme.\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid True - Vout Undervoltage(UV) Fault has occurred \par
 False - No Fault \par
}}{
Definition at line 1361 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_IsPinShort_Fault_Response\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_IsPinShort_Fault_Response}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t Inno3Pro_Application::Inno3Pro_Read_IsPinShort_Fault_Response (void )}}
\par
{\bkmkstart AAAAAAAAJZ}
{\bkmkend AAAAAAAAJZ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads the Telemetry register READ6 - IS-pin Short Fault Response. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function provides the IS-pin Short Fault Response setting that was programmed on the 1st 2 bits of the ISSC Register\par
This determines the action that InnoSwitch3-Pro will take in response to the IS-pin Short Fault\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid IS-pin Short Fault Response in Byte \par
}}{
Definition at line 1073 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_OtpFaultHyst\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_OtpFaultHyst}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Inno3Pro_Application::Inno3Pro_Read_OtpFaultHyst (void )}}
\par
{\bkmkstart AAAAAAAAJT}
{\bkmkend AAAAAAAAJT}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 9 on Telemetry register Read4 - Over-Temperature Protection. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function provides the current setting of the Secondary Over Temperature Fault Hysteresis or OTP Register\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid True - 60 Degrees \par
 False - 40 Degrees \par
}}{
Definition at line 1005 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_OV_Fault_Response\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_OV_Fault_Response}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t Inno3Pro_Application::Inno3Pro_Read_OV_Fault_Response (void )}}
\par
{\bkmkstart AAAAAAAAJX}
{\bkmkend AAAAAAAAJX}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads the Telemetry register READ6 - Overvoltage Fault Response. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function provides the Overvoltage Fault Response setting that was programmed on the OVL Register\par
This determines the action that InnoSwitch3-Pro will take in response to an output Overvoltage fault\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid Overvoltage Fault Response in Byte \par
}}{
Definition at line 1061 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_OV_Threshold\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_OV_Threshold}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Inno3Pro_Application::Inno3Pro_Read_OV_Threshold (void )}}
\par
{\bkmkstart AAAAAAAAJN}
{\bkmkend AAAAAAAAJN}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads the Telemetry register Read3 - Over Voltage Threshold. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function provides the Over Voltage setting that was programmed on the OVA Register\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid Over Voltage Threshold in Volts \par
}}{
Definition at line 961 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_PsuOff\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_PsuOff}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Inno3Pro_Application::Inno3Pro_Read_PsuOff (void )}}
\par
{\bkmkstart AAAAAAAAJQ}
{\bkmkend AAAAAAAAJQ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 12 on Telemetry register Read4 - Turn PSU Off (Latch Off Device) }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function provides the current setting of the PSU\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid True - Latch Off Device is Enabled \par
 False - Latch Off Device is Disabled \par
}}{
Definition at line 987 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_SetPoint\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_SetPoint}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Inno3Pro_Application::Inno3Pro_Read_SetPoint (uint16_t  {\i ReadBack_Address}, float  {\i fMultiplier})}}
\par
{\bkmkstart AAAAAAAAJK}
{\bkmkend AAAAAAAAJK}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Handles InnoSwitch3-Pro I2C Set Point and Threshold. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function is used for CV,OV,UV Thresholds and Set-Point\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Precondition:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid I2C_Read16() Driver should be already Configured and is able to Read I2C commands\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ReadBack_Address} \cell }{- Read Back Register Address fMultiplier - Factor to be used for the Set Point computation\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid Byte Reading \par
}}{
Definition at line 915 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_Status_BPS_LO\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_Status_BPS_LO}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Inno3Pro_Application::Inno3Pro_Read_Status_BPS_LO (void )}}
\par
{\bkmkstart AAAAAAAALA}
{\bkmkend AAAAAAAALA}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 0 on Telemetry register Read11 - BPS-pin Latch Off (LO) }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function tells that Latch-Off mode happened because of Overvoltage was detected on the BPS Pin\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid True - Output Voltage Overvoltage LO Occurred \par
 False - No Fault \par
}}{
Definition at line 1288 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_Status_CvoMode_AR\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_Status_CvoMode_AR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Inno3Pro_Application::Inno3Pro_Read_Status_CvoMode_AR (void )}}
\par
{\bkmkstart AAAAAAAAKQ}
{\bkmkend AAAAAAAAKQ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 15 on Telemetry register Read11 - CVO Mode Auto Restart(AR) }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function tells that an Auto Restart happened while InnoSwitch3-Pro is operating in Constant Voltage Mode Only\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid True - CVO Mode Auto Restart Occurred \par
 False - No Fault \par
}}{
Definition at line 1228 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_Status_CvoMode_LO\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_Status_CvoMode_LO}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Inno3Pro_Application::Inno3Pro_Read_Status_CvoMode_LO (void )}}
\par
{\bkmkstart AAAAAAAAKV}
{\bkmkend AAAAAAAAKV}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 6 on Telemetry register Read11 - CVO Mode Latch Off (LO) }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function tells that Latch-Off mode happened while InnoSwitch3-Pro is operating in Constant Voltage Mode Only\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid True - CVO Mode Latch Off Occurred \par
 False - No Fault \par
}}{
Definition at line 1258 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_Status_HighSwitchFreq\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_Status_HighSwitchFreq}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Inno3Pro_Application::Inno3Pro_Read_Status_HighSwitchFreq (void )}}
\par
{\bkmkstart AAAAAAAAKJ}
{\bkmkend AAAAAAAAKJ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 12 on Telemetry register Read10 - Switching Frequency High. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function tells if InnoSwitch3-Pro is operating at High Switching Frequency\par
The READ10 telemetry registers are instantaneous and are cleared whenever the condition is no longer valid.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid True - High Switching Frequency \par
 False - Low Switching Frequency \par
}}{
Definition at line 1178 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_Status_InterruptEnable\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_Status_InterruptEnable}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Inno3Pro_Application::Inno3Pro_Read_Status_InterruptEnable (void )}}
\par
{\bkmkstart AAAAAAAAKG}
{\bkmkend AAAAAAAAKG}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 15 on Telemetry register Read10 - Interrupt Enable. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function provides the current status of the Active interrupt reporting scheme on the SCL Pin\par
The READ10 telemetry registers are instantaneous and are cleared whenever the condition is no longer valid.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid True - Interrupt is Enabled \par
 False - Interrupt is Disabled \par
}}{
Definition at line 1160 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_Status_IsPinShort\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_Status_IsPinShort}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Inno3Pro_Application::Inno3Pro_Read_Status_IsPinShort (void )}}
\par
{\bkmkstart AAAAAAAAKN}
{\bkmkend AAAAAAAAKN}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 3 on Telemetry register Read10 - IS-pin Short Circuit Detected. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function tells that IS-pin Short Circuit was triggered\par
The READ10 telemetry registers are instantaneous and are cleared whenever the condition is no longer valid.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid True - IS-pin Short Circuit Detected \par
 False - No IS-pin Short Circuit \par
}}{
Definition at line 1202 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_Status_IsPinShort_AR\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_Status_IsPinShort_AR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Inno3Pro_Application::Inno3Pro_Read_Status_IsPinShort_AR (void )}}
\par
{\bkmkstart AAAAAAAAKR}
{\bkmkend AAAAAAAAKR}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 12 on Telemetry register Read11 - IS-pin Short Circuit Auto Restart(AR) }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function tells that an Auto Restart happened because of IS-pin Short Circuit\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid True - IS-pin Short Circuit AR Occurred \par
 False - No Fault \par
}}{
Definition at line 1234 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_Status_IsPinShort_LO\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_Status_IsPinShort_LO}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Inno3Pro_Application::Inno3Pro_Read_Status_IsPinShort_LO (void )}}
\par
{\bkmkstart AAAAAAAAKX}
{\bkmkend AAAAAAAAKX}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 4 on Telemetry register Read11 - IS-pin Short Circuit Latch Off (LO) }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function tells that Latch-Off mode happened because of IS-pin Short Circuit\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid True - IS-pin Short Circuit LO Occurred \par
 False - No Fault \par
}}{
Definition at line 1270 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_Status_LatchOff\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_Status_LatchOff}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Inno3Pro_Application::Inno3Pro_Read_Status_LatchOff (void )}}
\par
{\bkmkstart AAAAAAAAKU}
{\bkmkend AAAAAAAAKU}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 7 on Telemetry register Read11 - Latch-Off (LO) Occurred. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function tells that the power supply is in Latch-Off mode.\par
An AC Input Reset is needed to bring back normal operation if the fault is no longer present.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid True - Latch-Off (LO) Occurred \par
 False - No Fault \par
}}{
Definition at line 1252 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_Status_OtpFault\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_Status_OtpFault}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Inno3Pro_Application::Inno3Pro_Read_Status_OtpFault (void )}}
\par
{\bkmkstart AAAAAAAAKK}
{\bkmkend AAAAAAAAKK}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 9 on Telemetry register Read10 - Over-Temperature Protection. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function tells that Over-Temperature Protection was triggered\par
The READ10 telemetry registers are instantaneous and are cleared whenever the condition is no longer valid.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid True - Over-Temperature Protection Enabled \par
 False - Over-Temperature Protection Disabled \par
}}{
Definition at line 1184 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_Status_OutputDischarge\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_Status_OutputDischarge}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Inno3Pro_Application::Inno3Pro_Read_Status_OutputDischarge (void )}}
\par
{\bkmkstart AAAAAAAAKI}
{\bkmkend AAAAAAAAKI}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 13 on Telemetry register Read10 - Output Discharge. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function tells the load(VBUS) has been discharged\par
The READ10 telemetry registers are instantaneous and are cleared whenever the condition is no longer valid.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid True - Discharge is Enabled \par
 False - Discharge is Disabled \par
}}{
Definition at line 1172 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_Status_OV_AR\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_Status_OV_AR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Inno3Pro_Application::Inno3Pro_Read_Status_OV_AR (void )}}
\par
{\bkmkstart AAAAAAAAKS}
{\bkmkend AAAAAAAAKS}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 10 on Telemetry register Read11 - Output Voltage OV Auto Restart(AR) }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function tells that an Auto Restart happened because of Output Voltage Overvoltage\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid True - Output Voltage Overvoltage AR Occurred \par
 False - No Fault \par
}}{
Definition at line 1240 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_Status_OV_Fault\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_Status_OV_Fault}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Inno3Pro_Application::Inno3Pro_Read_Status_OV_Fault (void )}}
\par
{\bkmkstart AAAAAAAAKP}
{\bkmkend AAAAAAAAKP}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 0 on Telemetry register Read10 - Output Voltage OV Fault Comparator. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function tells that Output Voltage has crossed the OV Fault Threshold Limit\par
The READ10 telemetry registers are instantaneous and are cleared whenever the condition is no longer valid.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid True - Output Voltage OV Fault Detected \par
 False - No Output Voltage OV Fault \par
}}{
Definition at line 1214 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_Status_OV_LO\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_Status_OV_LO}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Inno3Pro_Application::Inno3Pro_Read_Status_OV_LO (void )}}
\par
{\bkmkstart AAAAAAAAKY}
{\bkmkend AAAAAAAAKY}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 2 on Telemetry register Read11 - Output Voltage OV Latch Off (LO) }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function tells that Latch-Off mode happened because of Output Voltage Overvoltage\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid True - Output Voltage Overvoltage LO Occurred \par
 False - No Fault \par
}}{
Definition at line 1276 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_Status_PsuOffCmd\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_Status_PsuOffCmd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Inno3Pro_Application::Inno3Pro_Read_Status_PsuOffCmd (void )}}
\par
{\bkmkstart AAAAAAAAKW}
{\bkmkend AAAAAAAAKW}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 5 on Telemetry register Read11 - PSU Turn-Off Command Received. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function tells that PSU was Turned off since PSU Turn-Off CMD was received\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid True - PSU Turn-Off Command Received \par
 False - No Fault \par
}}{
Definition at line 1264 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_Status_SystemReady\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_Status_SystemReady}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Inno3Pro_Application::Inno3Pro_Read_Status_SystemReady (void )}}
\par
{\bkmkstart AAAAAAAAKH}
{\bkmkend AAAAAAAAKH}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 14 on Telemetry register Read10 - System Ready Signal. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function provides the current status when InnoSwitch3-Pro is ready to receive I2C commands\par
The READ10 telemetry registers are instantaneous and are cleared whenever the condition is no longer valid.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid True - System is Ready \par
}}{
Definition at line 1166 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_Status_UV_AR\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_Status_UV_AR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Inno3Pro_Application::Inno3Pro_Read_Status_UV_AR (void )}}
\par
{\bkmkstart AAAAAAAAKT}
{\bkmkend AAAAAAAAKT}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 9 on Telemetry register Read11 - Output Voltage UV Auto Restart(AR) }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function tells that an Auto Restart happened because of Output Voltage Undervoltage\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid True - Output Voltage Undervoltage AR Occurred \par
 False - No Fault \par
}}{
Definition at line 1246 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_Status_UV_Fault\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_Status_UV_Fault}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Inno3Pro_Application::Inno3Pro_Read_Status_UV_Fault (void )}}
\par
{\bkmkstart AAAAAAAAKO}
{\bkmkend AAAAAAAAKO}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 1 on Telemetry register Read10 - Output Voltage UV Fault Comparator. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function tells that Output Voltage has crossed the UV Fault Threshold Limit\par
The READ10 telemetry registers are instantaneous and are cleared whenever the condition is no longer valid.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid True - Output Voltage UV Fault Detected \par
 False - No Output Voltage UV Fault \par
}}{
Definition at line 1208 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_Status_UV_LO\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_Status_UV_LO}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Inno3Pro_Application::Inno3Pro_Read_Status_UV_LO (void )}}
\par
{\bkmkstart AAAAAAAAKZ}
{\bkmkend AAAAAAAAKZ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 1 on Telemetry register Read11 - Output Voltage UV Latch Off (LO) }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function tells that Latch-Off mode happened because of Output Voltage Undervoltage\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid True - Output Voltage Undervoltage LO Occurred \par
 False - No Fault \par
}}{
Definition at line 1282 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_Status_Vout10pct\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_Status_Vout10pct}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Inno3Pro_Application::Inno3Pro_Read_Status_Vout10pct (void )}}
\par
{\bkmkstart AAAAAAAAKM}
{\bkmkend AAAAAAAAKM}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 4 on Telemetry register Read10 - VOUTADC > 1.1*Vout. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function monitors the VOUT10PCT status to detect when to disable the Active bleeder when the BLEEDER function is being used to bleed the output voltage from high to low set point\par
The READ10 telemetry registers are instantaneous and are cleared whenever the condition is no longer valid.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid True - 2% Bleeder Enabled \par
 False - 2% Bleeder Disabled \par
}}{
Definition at line 1196 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_Status_Vout2pct\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_Status_Vout2pct}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Inno3Pro_Application::Inno3Pro_Read_Status_Vout2pct (void )}}
\par
{\bkmkstart AAAAAAAAKL}
{\bkmkend AAAAAAAAKL}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 5 on Telemetry register Read10 - 2% Bleeder Enabled. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function monitors the VOUT2PCT status to detect when to disable the Active bleeder. when the BLEEDER function is being used to bleed the output voltage from high to low set point\par
The InnoSwitch3-Pro automatically activates a weak current bleeder (>5mA) on the VOUT pin until the output voltage settles to less than 2% of the set regulation threshold.\par
The READ10 telemetry registers are instantaneous and are cleared whenever the condition is no longer valid.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid True - 2% Bleeder Enabled \par
 False - 2% Bleeder Disabled \par
}}{
Definition at line 1190 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_UV_Fault_Response\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_UV_Fault_Response}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t Inno3Pro_Application::Inno3Pro_Read_UV_Fault_Response (void )}}
\par
{\bkmkstart AAAAAAAAJY}
{\bkmkend AAAAAAAAJY}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads the Telemetry register READ6 - Under voltage Fault Response. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function provides the Undervoltage Fault Response setting that was programmed on the UVL Register\par
This determines the action that InnoSwitch3-Pro will take in response to an output Undervoltage fault\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid Under voltage Fault Response in Byte \par
}}{
Definition at line 1067 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_UV_Fault_Timer\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_UV_Fault_Timer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t Inno3Pro_Application::Inno3Pro_Read_UV_Fault_Timer (void )}}
\par
{\bkmkstart AAAAAAAAKA}
{\bkmkend AAAAAAAAKA}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads the Telemetry register READ6 - Undervoltage Timer. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function provides the Under voltage Timer setting that was programmed on the UVL Timer Register\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid Under voltage Timer in Byte \par
}}{
Definition at line 1079 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_UV_Threshold\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_UV_Threshold}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Inno3Pro_Application::Inno3Pro_Read_UV_Threshold (void )}}
\par
{\bkmkstart AAAAAAAAJM}
{\bkmkend AAAAAAAAJM}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads the Telemetry register Read2 - Under Voltage Threshold. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function provides the Under Voltage setting that was programmed on the UVA Register\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid Under Voltage Threshold in Volts \par
}}{
Definition at line 948 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_VbusSwitch\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_VbusSwitch}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Inno3Pro_Application::Inno3Pro_Read_VbusSwitch (void )}}
\par
{\bkmkstart AAAAAAAAJO}
{\bkmkend AAAAAAAAJO}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads bit 14 on Telemetry register Read4 - VBUS Switch Enable. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function provides the current status of the VBUS Switch\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid True - Vbus Switch is Enabled (Closed) \par
 False - Vbus Switch is Disabled (Open) \par
}}{
Definition at line 975 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_Voltage_DAC\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_Voltage_DAC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Inno3Pro_Application::Inno3Pro_Read_Voltage_DAC (void )}}
\par
{\bkmkstart AAAAAAAALP}
{\bkmkend AAAAAAAALP}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads the Telemetry register Read15 - Voltage DAC. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function is useful in determining if InnoSwitch3-Pro is operating in CC or CV Mode\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid DAC Voltage Reading in Volts \par
}}{
Definition at line 1428 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_Volts\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_Volts}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Inno3Pro_Application::Inno3Pro_Read_Volts (void )}}
\par
{\bkmkstart AAAAAAAAKF}
{\bkmkend AAAAAAAAKF}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads the Telemetry register Read9 - Measured Output Voltage. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function provides the actual measured output voltage. \par
 The output voltage report back is in 12-bit format but the resolution depends on the output voltage range.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid Voltage Reading in Volts \par
}}{
Definition at line 1137 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_VoltsAverage\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_VoltsAverage}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Inno3Pro_Application::Inno3Pro_Read_VoltsAverage (void )}}
\par
{\bkmkstart AAAAAAAALO}
{\bkmkend AAAAAAAALO}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads the Telemetry register Read14 - Average Output Voltage. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function provides the average measured output voltage. \par
 The average output voltage measurement is simply 16-samples rolling average of the READ9 (measured output voltage). \par
 The output voltage report back is in 12-bit format but the resolution depends on the output voltage range.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid Voltage Reading in Volts \par
}}{
Definition at line 1406 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Read_Watchdog_Timer\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Read_Watchdog_Timer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t Inno3Pro_Application::Inno3Pro_Read_Watchdog_Timer (void )}}
\par
{\bkmkstart AAAAAAAAKB}
{\bkmkend AAAAAAAAKB}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reads the Telemetry register READ6 - Watchdog Timer. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function provides the Watchdog Timer Timeout setting that was programmed on the Watchdog Timer Register\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid Watchdog Timer Timeout in Byte \par
}}{
Definition at line 1085 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Set_Register_CC\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Set_Register_CC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Inno3Pro_Application::Inno3Pro_Set_Register_CC (float  {\i fCc}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAALT}
{\bkmkend AAAAAAAALT}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 73 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Set_Register_CDC\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Set_Register_CDC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Inno3Pro_Application::Inno3Pro_Set_Register_CDC (float  {\i fCdc}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAALU}
{\bkmkend AAAAAAAALU}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 78 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Set_Register_CV\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Set_Register_CV}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Inno3Pro_Application::Inno3Pro_Set_Register_CV (float  {\i fVout}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAALQ}
{\bkmkend AAAAAAAALQ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 58 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Set_Register_OVA\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Set_Register_OVA}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Inno3Pro_Application::Inno3Pro_Set_Register_OVA (float  {\i fOva}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAALR}
{\bkmkend AAAAAAAALR}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 63 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Set_Register_UVA\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Set_Register_UVA}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Inno3Pro_Application::Inno3Pro_Set_Register_UVA (float  {\i fUva}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAALS}
{\bkmkend AAAAAAAALS}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 68 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Set_Register_UVL\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Set_Register_UVL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Inno3Pro_Application::Inno3Pro_Set_Register_UVL (float  {\i fUvl}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAALX}
{\bkmkend AAAAAAAALX}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 93 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Set_Register_VBEN\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Set_Register_VBEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Inno3Pro_Application::Inno3Pro_Set_Register_VBEN (float  {\i fVben}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAALW}
{\bkmkend AAAAAAAALW}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 88 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Set_Register_VKP\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Set_Register_VKP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Inno3Pro_Application::Inno3Pro_Set_Register_VKP (float  {\i fVkp}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAALV}
{\bkmkend AAAAAAAALV}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 83 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Telemetry\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Telemetry}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint16_t Inno3Pro_Application::Inno3Pro_Telemetry (uint8_t  {\i ReadBack_Address})}}
\par
{\bkmkstart AAAAAAAAJG}
{\bkmkend AAAAAAAAJG}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Handles InnoSwitch3-Pro Common I2C Read Back Telemetry. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function Reads the Specific InnoSwitch3-Pro Telemetry register\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Precondition:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid I2C_Read16() Driver should be already Configured and is able to Read I2C commands\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ReadBack_Address} \cell }{- Read Back Register Address\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid Register Reading \par
}}{
Definition at line 870 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_TurnOff_PSU\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_TurnOff_PSU}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Inno3Pro_Application::Inno3Pro_TurnOff_PSU (bool  {\i bEnable})}}
\par
{\bkmkstart AAAAAAAAIJ}
{\bkmkend AAAAAAAAIJ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Turns off the power supply. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function puts the device into latch off\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid AC power cycling is required to restart the power supply.\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i bEnable} \cell }{- Value to Turn off the power supply\cell }
{\row }
}
{\b  Input Values: } {
\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
False: Disable Turn Off\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
True : Enable Turn Off\par}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid None \par
}}{
Definition at line 499 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Vbus_Switch_Control\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Vbus_Switch_Control}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Inno3Pro_Application::Inno3Pro_Vbus_Switch_Control (bool  {\i bEnableVben})}}
\par
{\bkmkstart AAAAAAAAIG}
{\bkmkend AAAAAAAAIG}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Vbus Switch Control (VBEN Control) }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Used to Enable or Disable Vbus Switch By Writing a value to VBEN Register. This also Contains computations for VBEN settings\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid When VBEN is Disabled, Watchdog is Enabled As Default so Watchdog Timer is needed to be Disabled again\par
}Before Disabling the Vbus Switch, UV is set to 3V and then CV is programmed to 5V to avoid inadvertent triggering of OV fault.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i fEnableVben} \cell }{- Value to Enable VBEN\cell }
{\row }
}
{\b  Input Values: } {
\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
False: Disable VBEN\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
True : Enable VBEN\par}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid None \par
}}{
Definition at line 432 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Write_Amps\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Write_Amps}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Inno3Pro_Application::Inno3Pro_Write_Amps (float  {\i fSetPtCC})}}
\par
{\bkmkstart AAAAAAAAIQ}
{\bkmkend AAAAAAAAIQ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constant Current (CC) Control. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Used to update the Value of CC Register\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i fSetPtCC} \cell }{- Constant Current (CC) Set Point Value\cell }
{\row }
}
{\b  CC Range: } {
\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
20% to 100%\par}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid None \par
}}{
Definition at line 579 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Write_Cable_Drop_Comp\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Write_Cable_Drop_Comp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Inno3Pro_Application::Inno3Pro_Write_Cable_Drop_Comp (float  {\i fSetPtCDC})}}
\par
{\bkmkstart AAAAAAAAIP}
{\bkmkend AAAAAAAAIP}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Cable Drop Compensation (CDC) Control. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Used to update the Value of CDC Register. Contains computations for CDC settings\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i fSetPtCDC} \cell }{- Cable Drop Compensation (CDC) Set Point Value\cell }
{\row }
}
{\b  CDC Range: } {
\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
0 to 600 mv (in 50mv Step)\par}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid None \par
}}{
Definition at line 573 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Write_CV_Load\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Write_CV_Load}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Inno3Pro_Application::Inno3Pro_Write_CV_Load (uint16_t  {\i u16Load})}}
\par
{\bkmkstart AAAAAAAAJB}
{\bkmkend AAAAAAAAJB}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constant Voltage Load setting. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Optimization feature for CV type of Load\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid The constant current regulation mode in the InnoSwitch3-Pro can be optimized for constant voltage (CV) type load required by the end application. Enabling this command register reduces the output current ripple for CV load only. This setting should only be used if CV load must be supported.\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i u16Load} \cell }{- Value of CV load Register\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid None \par
}}{
Definition at line 645 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Write_CVOL_Fault_Response\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Write_CVOL_Fault_Response}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Inno3Pro_Application::Inno3Pro_Write_CVOL_Fault_Response (uint16_t  {\i u16Response})}}
\par
{\bkmkstart AAAAAAAAIX}
{\bkmkend AAAAAAAAIX}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
CV Only Fault Response Setting. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Defines how the device will respond to CV Only fault condition\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i u16Response} \cell }{- Fault Response setting of the Device\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid None \par
}}{
Definition at line 621 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Write_CVOL_Fault_Timer\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Write_CVOL_Fault_Timer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Inno3Pro_Application::Inno3Pro_Write_CVOL_Fault_Timer (uint16_t  {\i u16Timer})}}
\par
{\bkmkstart AAAAAAAAIY}
{\bkmkend AAAAAAAAIY}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
CV Only Fault Timer Setting. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Defines the duration of how long the device will continue to operate before triggering CVOL fault\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i u16Timer} \cell }{- Delay Time before fault is asserted\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid None \par
}}{
Definition at line 627 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Write_Interupt_Mask\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Write_Interupt_Mask}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Inno3Pro_Application::Inno3Pro_Write_Interupt_Mask (uint16_t  {\i u16IntMask})}}
\par
{\bkmkstart AAAAAAAAIZ}
{\bkmkend AAAAAAAAIZ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Interrupt Mask Setting. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This defines the setting of the Active interrupt reporting scheme on the SCL Pin.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid The Interrupt Mask Register must be enabled for each of the individual fault conditions to activate this feature. \par
 Once a fault occurs, the Interrupt Mask is reset and the particular faults of interest must be re-enabled to activate the SCL reporting scheme.\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i u16IntMask} \cell }{- Interrupt Bit Mask Settings\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid None \par
}}{
Definition at line 633 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Write_ISSC_Fault_Response\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Write_ISSC_Fault_Response}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Inno3Pro_Application::Inno3Pro_Write_ISSC_Fault_Response (uint16_t  {\i u16Response}, uint16_t  {\i u16Frequency})}}
\par
{\bkmkstart AAAAAAAAIU}
{\bkmkend AAAAAAAAIU}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
IS Pin Short Fault Response Setting. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Defines how the device will respond to IS pin Short fault condition\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid ISSC fault is annunciated in the event the IS pin voltage does not exceed approximately 50% of the full constant-current threshold (ISV(TH)) with a switching frequency exceeding a programmed threshold. The switching frequency can be selected in a range from 30 to 60 kHz.\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i u16Response} \cell }{- Fault Response setting of the Device u16Frequency - Switching frequency threshold\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid None \par
}}{
Definition at line 603 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Write_Loop_Speed1\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Write_Loop_Speed1}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Inno3Pro_Application::Inno3Pro_Write_Loop_Speed1 (uint16_t  {\i u16LoopSpeed})}}
\par
{\bkmkstart AAAAAAAAJC}
{\bkmkend AAAAAAAAJC}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Loop Speed 1 Setting. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Optimization feature for Transient Response\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid If faster transient response is required in the application the InnoSwitch3-Pro includes command registers to reduce the time for low to high output voltage transitions. \par
 Using values other than the default or recommended settings could lead to oscillatory behavior.\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i u16LoopSpeed} \cell }{- Value of u16Loop Speed 1\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid None \par
}}{
Definition at line 651 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Write_Loop_Speed2\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Write_Loop_Speed2}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Inno3Pro_Application::Inno3Pro_Write_Loop_Speed2 (uint16_t  {\i u16LoopSpeed})}}
\par
{\bkmkstart AAAAAAAAJD}
{\bkmkend AAAAAAAAJD}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Loop Speed 2 Setting. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Optimization feature for Transient Response\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid If faster transient response is required in the application the InnoSwitch3-Pro includes command registers to reduce the time for low to high output voltage transitions. \par
 Using values other than the default or recommended settings could lead to oscillatory behavior.\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i u16LoopSpeed} \cell }{- Value of u16Loop Speed 2\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid None \par
}}{
Definition at line 657 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Write_OTP_Hysteresis\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Write_OTP_Hysteresis}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Inno3Pro_Application::Inno3Pro_Write_OTP_Hysteresis (uint16_t  {\i u16Otp})}}
\par
{\bkmkstart AAAAAAAAJA}
{\bkmkend AAAAAAAAJA}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Over Temperature Setting. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Defines the temperature when bleeder can be re-enabled\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid As secondary controller die temperature increases beyond ~125 Degrees Celsius, the active VOUT pin bleeder function will be turned off. The bleeder will not be permitted to be re-enabled until the controller temperature falls below the programmable hysteresis value.\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i u16Otp} \cell }{- Over Temperature Hysteresis Setting\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid None \par
}}{
Definition at line 639 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Write_Over_Volts\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Write_Over_Volts}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Inno3Pro_Application::Inno3Pro_Write_Over_Volts (float  {\i fSetPtOVA})}}
\par
{\bkmkstart AAAAAAAAIN}
{\bkmkend AAAAAAAAIN}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Over Voltage Protection. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Used to update the Value of OVA Register\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i fSetPtOVA} \cell }{- Over Voltage (OVA) Set Point Value\cell }
{\row }
}
{\b  OVA Range: } {
\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
6.2V to 25 V (in 100mv Step)\par}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid None \par
}}{
Definition at line 561 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Write_OVL_Fault_Response\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Write_OVL_Fault_Response}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Inno3Pro_Application::Inno3Pro_Write_OVL_Fault_Response (uint16_t  {\i u16Response})}}
\par
{\bkmkstart AAAAAAAAIS}
{\bkmkend AAAAAAAAIS}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Over Voltage Fault Response Setting. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Defines how the device will respond to Over Voltage fault condition\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i u16Response} \cell }{- Fault Response setting of the Device\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid None \par
}}{
Definition at line 591 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Write_Under_Volts\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Write_Under_Volts}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Inno3Pro_Application::Inno3Pro_Write_Under_Volts (float  {\i fSetPtUVA})}}
\par
{\bkmkstart AAAAAAAAIO}
{\bkmkend AAAAAAAAIO}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Under Voltage Protection. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Used to update the Value of UVA Register\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i fSetPtUVA} \cell }{- Over Voltage (UVA) Set Point Value\cell }
{\row }
}
{\b  UVA Range: } {
\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
3V to 24 V (in 100mv Step)\par}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid None \par
}}{
Definition at line 567 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Write_UVL_Fault_Response\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Write_UVL_Fault_Response}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Inno3Pro_Application::Inno3Pro_Write_UVL_Fault_Response (uint16_t  {\i u16Response})}}
\par
{\bkmkstart AAAAAAAAIT}
{\bkmkend AAAAAAAAIT}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Under Voltage Fault Response Setting. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Defines how the device will respond to Under Voltage fault condition\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i u16Response} \cell }{- Fault Response setting of the Device\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid None \par
}}{
Definition at line 597 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Write_UVL_Fault_Timer\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Write_UVL_Fault_Timer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Inno3Pro_Application::Inno3Pro_Write_UVL_Fault_Timer (uint16_t  {\i u16Timer})}}
\par
{\bkmkstart AAAAAAAAIV}
{\bkmkend AAAAAAAAIV}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Under Voltage Fault Timer Setting. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Defines the duration of how long the device will continue to operate before triggering UVL fault\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i u16Timer} \cell }{- Delay Time before fault is asserted\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid None \par
}}{
Definition at line 609 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Write_VI\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Write_VI}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Inno3Pro_Application::Inno3Pro_Write_VI (float  {\i fSetPtCV}, float  {\i fSetPtCC})}}
\par
{\bkmkstart AAAAAAAAJE}
{\bkmkend AAAAAAAAJE}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Output Voltage Control with Bleeder Control and Constant Current (CC) Control. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Used to update the Value of CV and CC Register. \par
 Automatically computes for UVA and OVA settings{
\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
OVA is 124% of CV Setpoint\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
UVA is Fixed to 3V setting\par}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid UVL is set to "No Response" by this function when CV setting is \par
lesser than 3.6V and UVL is set back to "Auto Restart" when CV \par
setting crosses 3.6V. This UVL feature is optional and currently \par
commented on the code.\par
\par
This function stores the old values it received. \par
If the Input parameters is the same with the previous \par
it will not execute the I2C Commands        \par
}
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid Transition time of High voltage to Low voltage (e.g 20V to 5V at No load) may take some time(in ms). It is recommended that voltage updates using this function must only be done after the update request was finished. When this function is used but the voltage transition is not yet complete the incoming update will not be processed.\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i fSetPtCV} \cell }{- Output Voltage Set Point Value\cell }
{\row }
}
{\b  CV Range: } {
\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
3 to 24 V (in 10mv Step)\par}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i fSetPtCC} \cell }{- Constant Current (CC) Set Point Value\cell }
{\row }
}
{\b  CC Range: } {
\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
20% to 100%\par}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid True - Update process complete \par
 False - Update process not yet complete \par
}}{
Definition at line 663 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Write_Volt_Peak\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Write_Volt_Peak}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Inno3Pro_Application::Inno3Pro_Write_Volt_Peak (float  {\i fSetPtVpk})}}
\par
{\bkmkstart AAAAAAAAIR}
{\bkmkend AAAAAAAAIR}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constant Output Power Voltage Threshold (VKP) Control. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Used to update the Value of VKP Register. Contains computations for VKP settings\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i fSetPtVpk} \cell }{- Value to Enable VBEN VKP Range:\cell }
{\row }
}
{\b  VKP Range: } {
\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
5.3V to 24V (in 100mV step)\par}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid None \par
}}{
Definition at line 585 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Write_Volts\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Write_Volts}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Inno3Pro_Application::Inno3Pro_Write_Volts (float  {\i fSetPtCV})}}
\par
{\bkmkstart AAAAAAAAIM}
{\bkmkend AAAAAAAAIM}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Output Voltage Control without Bleeder Control. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Used to update the Value of CV Register\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i fSetPtCV} \cell }{- Output Voltage Set Point Value\cell }
{\row }
}
{\b  CV Range: } {
\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
3 to 24 V (in 10mv Step)\par}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid None \par
}}{
Definition at line 555 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3Pro_Write_Watchdog_Timer\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:Inno3Pro_Write_Watchdog_Timer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Inno3Pro_Application::Inno3Pro_Write_Watchdog_Timer (uint16_t  {\i u16Timer})}}
\par
{\bkmkstart AAAAAAAAIW}
{\bkmkend AAAAAAAAIW}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Watchdog Timer Setting. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Defines the duration of how long the device will continue to operate before triggering Watchdog fault\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i u16Timer} \cell }{- Delay Time before fault is asserted\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid None \par
}}{
Definition at line 615 of file Inno3Pro.cpp.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v b_Lock_Enable\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:b_Lock_Enable}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Inno3Pro_Application::b_Lock_Enable = false}}
\par
{\bkmkstart AAAAAAAAMH}
{\bkmkend AAAAAAAAMH}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 74 of file Inno3Pro.h.}\par
}
{\xe \v b_Lock_Timer_Is_Running\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:b_Lock_Timer_Is_Running}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Inno3Pro_Application::b_Lock_Timer_Is_Running = false}}
\par
{\bkmkstart AAAAAAAAMG}
{\bkmkend AAAAAAAAMG}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 73 of file Inno3Pro.h.}\par
}
{\xe \v b_Request_Enable\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:b_Request_Enable}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Inno3Pro_Application::b_Request_Enable = false}}
\par
{\bkmkstart AAAAAAAAMJ}
{\bkmkend AAAAAAAAMJ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 76 of file Inno3Pro.h.}\par
}
{\xe \v b_Setting_Update\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:b_Setting_Update}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Inno3Pro_Application::b_Setting_Update = false}}
\par
{\bkmkstart AAAAAAAAMI}
{\bkmkend AAAAAAAAMI}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 75 of file Inno3Pro.h.}\par
}
{\xe \v fInno3Pro_CC\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:fInno3Pro_CC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Inno3Pro_Application::fInno3Pro_CC = (float)(5.1)}}
\par
{\bkmkstart AAAAAAAANM}
{\bkmkend AAAAAAAANM}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 2105 of file Inno3Pro.h.}\par
}
{\xe \v fInno3Pro_CDC\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:fInno3Pro_CDC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Inno3Pro_Application::fInno3Pro_CDC = (float)(300)}}
\par
{\bkmkstart AAAAAAAANL}
{\bkmkend AAAAAAAANL}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 2104 of file Inno3Pro.h.}\par
}
{\xe \v fInno3Pro_CV\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:fInno3Pro_CV}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Inno3Pro_Application::fInno3Pro_CV = (float)(5)}}
\par
{\bkmkstart AAAAAAAANI}
{\bkmkend AAAAAAAANI}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 2101 of file Inno3Pro.h.}\par
}
{\xe \v fInno3Pro_OVA\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:fInno3Pro_OVA}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Inno3Pro_Application::fInno3Pro_OVA = (float)(6.2)}}
\par
{\bkmkstart AAAAAAAANJ}
{\bkmkend AAAAAAAANJ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 2102 of file Inno3Pro.h.}\par
}
{\xe \v fInno3Pro_UVA\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:fInno3Pro_UVA}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Inno3Pro_Application::fInno3Pro_UVA = (float)(3)}}
\par
{\bkmkstart AAAAAAAANK}
{\bkmkend AAAAAAAANK}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 2103 of file Inno3Pro.h.}\par
}
{\xe \v fInno3Pro_UVL\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:fInno3Pro_UVL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Inno3Pro_Application::fInno3Pro_UVL = (float)(0)}}
\par
{\bkmkstart AAAAAAAANP}
{\bkmkend AAAAAAAANP}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 2108 of file Inno3Pro.h.}\par
}
{\xe \v fInno3Pro_VBEN\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:fInno3Pro_VBEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Inno3Pro_Application::fInno3Pro_VBEN = (float)(0)}}
\par
{\bkmkstart AAAAAAAANO}
{\bkmkend AAAAAAAANO}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 2107 of file Inno3Pro.h.}\par
}
{\xe \v fInno3Pro_VKP\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:fInno3Pro_VKP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Inno3Pro_Application::fInno3Pro_VKP = (float)(7)}}
\par
{\bkmkstart AAAAAAAANN}
{\bkmkend AAAAAAAANN}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 2106 of file Inno3Pro.h.}\par
}
{\xe \v u8_Buffer_BLEEDER\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:u8_Buffer_BLEEDER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t Inno3Pro_Application::u8_Buffer_BLEEDER[2] =\{0\}}}
\par
{\bkmkstart AAAAAAAAML}
{\bkmkend AAAAAAAAML}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 2002 of file Inno3Pro.h.}\par
}
{\xe \v u8_Buffer_CC\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:u8_Buffer_CC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t Inno3Pro_Application::u8_Buffer_CC[2] =\{0\}}}
\par
{\bkmkstart AAAAAAAAMU}
{\bkmkend AAAAAAAAMU}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 2012 of file Inno3Pro.h.}\par
}
{\xe \v u8_Buffer_CDC\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:u8_Buffer_CDC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t Inno3Pro_Application::u8_Buffer_CDC[2] =\{0\}}}
\par
{\bkmkstart AAAAAAAAMT}
{\bkmkend AAAAAAAAMT}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 2011 of file Inno3Pro.h.}\par
}
{\xe \v u8_Buffer_CV\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:u8_Buffer_CV}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t Inno3Pro_Application::u8_Buffer_CV[2] =\{0\}}}
\par
{\bkmkstart AAAAAAAAMQ}
{\bkmkend AAAAAAAAMQ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 2008 of file Inno3Pro.h.}\par
}
{\xe \v u8_Buffer_CVLOAD\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:u8_Buffer_CVLOAD}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t Inno3Pro_Application::u8_Buffer_CVLOAD[2] =\{0\}}}
\par
{\bkmkstart AAAAAAAANF}
{\bkmkend AAAAAAAANF}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 2026 of file Inno3Pro.h.}\par
}
{\xe \v u8_Buffer_CVO\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:u8_Buffer_CVO}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t Inno3Pro_Application::u8_Buffer_CVO[2] =\{0\}}}
\par
{\bkmkstart AAAAAAAAMP}
{\bkmkend AAAAAAAAMP}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 2006 of file Inno3Pro.h.}\par
}
{\xe \v u8_Buffer_CVOL\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:u8_Buffer_CVOL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t Inno3Pro_Application::u8_Buffer_CVOL[2] =\{0\}}}
\par
{\bkmkstart AAAAAAAANB}
{\bkmkend AAAAAAAANB}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 2021 of file Inno3Pro.h.}\par
}
{\xe \v u8_Buffer_CVOL_TIMER\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:u8_Buffer_CVOL_TIMER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t Inno3Pro_Application::u8_Buffer_CVOL_TIMER[2] =\{0\}}}
\par
{\bkmkstart AAAAAAAANC}
{\bkmkend AAAAAAAANC}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 2022 of file Inno3Pro.h.}\par
}
{\xe \v u8_Buffer_FAST_VI_CMD\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:u8_Buffer_FAST_VI_CMD}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t Inno3Pro_Application::u8_Buffer_FAST_VI_CMD[2] =\{0\}}}
\par
{\bkmkstart AAAAAAAAMO}
{\bkmkend AAAAAAAAMO}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 2005 of file Inno3Pro.h.}\par
}
{\xe \v u8_Buffer_INTERRUPT\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:u8_Buffer_INTERRUPT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t Inno3Pro_Application::u8_Buffer_INTERRUPT[2] =\{0\}}}
\par
{\bkmkstart AAAAAAAAND}
{\bkmkend AAAAAAAAND}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 2023 of file Inno3Pro.h.}\par
}
{\xe \v u8_Buffer_ISSC\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:u8_Buffer_ISSC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t Inno3Pro_Application::u8_Buffer_ISSC[2] =\{0\}}}
\par
{\bkmkstart AAAAAAAAMY}
{\bkmkend AAAAAAAAMY}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 2017 of file Inno3Pro.h.}\par
}
{\xe \v u8_Buffer_LoopSpeed1\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:u8_Buffer_LoopSpeed1}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t Inno3Pro_Application::u8_Buffer_LoopSpeed1[2] =\{0\}}}
\par
{\bkmkstart AAAAAAAANG}
{\bkmkend AAAAAAAANG}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 2027 of file Inno3Pro.h.}\par
}
{\xe \v u8_Buffer_LoopSpeed2\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:u8_Buffer_LoopSpeed2}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t Inno3Pro_Application::u8_Buffer_LoopSpeed2[2] =\{0\}}}
\par
{\bkmkstart AAAAAAAANH}
{\bkmkend AAAAAAAANH}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 2028 of file Inno3Pro.h.}\par
}
{\xe \v u8_Buffer_OTP\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:u8_Buffer_OTP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t Inno3Pro_Application::u8_Buffer_OTP[2] =\{0\}}}
\par
{\bkmkstart AAAAAAAANE}
{\bkmkend AAAAAAAANE}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 2024 of file Inno3Pro.h.}\par
}
{\xe \v u8_Buffer_OVA\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:u8_Buffer_OVA}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t Inno3Pro_Application::u8_Buffer_OVA[2] =\{0\}}}
\par
{\bkmkstart AAAAAAAAMR}
{\bkmkend AAAAAAAAMR}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 2009 of file Inno3Pro.h.}\par
}
{\xe \v u8_Buffer_OVL\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:u8_Buffer_OVL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t Inno3Pro_Application::u8_Buffer_OVL[2] =\{0\}}}
\par
{\bkmkstart AAAAAAAAMW}
{\bkmkend AAAAAAAAMW}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 2015 of file Inno3Pro.h.}\par
}
{\xe \v u8_Buffer_TURN_OFF_PSU\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:u8_Buffer_TURN_OFF_PSU}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t Inno3Pro_Application::u8_Buffer_TURN_OFF_PSU[2] =\{0\}}}
\par
{\bkmkstart AAAAAAAAMN}
{\bkmkend AAAAAAAAMN}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 2004 of file Inno3Pro.h.}\par
}
{\xe \v u8_Buffer_UVA\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:u8_Buffer_UVA}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t Inno3Pro_Application::u8_Buffer_UVA[2] =\{0\}}}
\par
{\bkmkstart AAAAAAAAMS}
{\bkmkend AAAAAAAAMS}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 2010 of file Inno3Pro.h.}\par
}
{\xe \v u8_Buffer_UVL\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:u8_Buffer_UVL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t Inno3Pro_Application::u8_Buffer_UVL[2] =\{0\}}}
\par
{\bkmkstart AAAAAAAAMX}
{\bkmkend AAAAAAAAMX}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 2016 of file Inno3Pro.h.}\par
}
{\xe \v u8_Buffer_UVL_TIMER\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:u8_Buffer_UVL_TIMER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t Inno3Pro_Application::u8_Buffer_UVL_TIMER[2] =\{0\}}}
\par
{\bkmkstart AAAAAAAAMZ}
{\bkmkend AAAAAAAAMZ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 2018 of file Inno3Pro.h.}\par
}
{\xe \v u8_Buffer_VBEN\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:u8_Buffer_VBEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t Inno3Pro_Application::u8_Buffer_VBEN[2] =\{0\}}}
\par
{\bkmkstart AAAAAAAAMK}
{\bkmkend AAAAAAAAMK}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 2001 of file Inno3Pro.h.}\par
}
{\xe \v u8_Buffer_VDIS\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:u8_Buffer_VDIS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t Inno3Pro_Application::u8_Buffer_VDIS[2] =\{0\}}}
\par
{\bkmkstart AAAAAAAAMM}
{\bkmkend AAAAAAAAMM}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 2003 of file Inno3Pro.h.}\par
}
{\xe \v u8_Buffer_VKP\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:u8_Buffer_VKP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t Inno3Pro_Application::u8_Buffer_VKP[2] =\{0\}}}
\par
{\bkmkstart AAAAAAAAMV}
{\bkmkend AAAAAAAAMV}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 2013 of file Inno3Pro.h.}\par
}
{\xe \v u8_Buffer_WATCHDOG_TIMER\:Inno3Pro_Application}
{\xe \v Inno3Pro_Application\:u8_Buffer_WATCHDOG_TIMER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t Inno3Pro_Application::u8_Buffer_WATCHDOG_TIMER[2] =\{0\}}}
\par
{\bkmkstart AAAAAAAANA}
{\bkmkend AAAAAAAANA}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 2019 of file Inno3Pro.h.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
C:/Users/csales/Documents/Arduino/libraries/InnoPro_Arduino/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIB" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro.h}}}
\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
C:/Users/csales/Documents/Arduino/libraries/InnoPro_Arduino/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHY" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro.cpp}}}
\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Inno3Pro_I2C Class Reference\par \pard\plain 
{\tc\tcl2 \v Inno3Pro_I2C}
{\xe \v Inno3Pro_I2C}
{\bkmkstart AAAAAAAAHU}
{\bkmkend AAAAAAAAHU}
\par
{
{\f2 #include <Drv_i2c.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOA" }{}}{\fldrslt {\cs37\ul\cf2 I2C_Write16}}}
 (uint8_t slaveAddress, uint8_t dataAddress, uint8_t *dataBuffer, uint8_t buflen)\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Handles one i2c master write transaction with the supplied parameters. }{
}\par
}}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOB" }{}}{\fldrslt {\cs37\ul\cf2 I2C_Read8}}}
 (uint8_t slaveAddress, uint8_t dataAddress)\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Handles one i2c master read transaction with the supplied parameters. }{
}\par
}}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint16_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOC" }{}}{\fldrslt {\cs37\ul\cf2 I2C_Read16}}}
 (uint8_t slaveAddress, uint8_t dataAddress)\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Handles one i2c master read transaction with the supplied parameters. }{
}\par
}}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line 45 of file Drv_i2c.h.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v I2C_Read16\:Inno3Pro_I2C}
{\xe \v Inno3Pro_I2C\:I2C_Read16}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint16_t Inno3Pro_I2C::I2C_Read16 (uint8_t  {\i slaveAddress}, uint8_t  {\i dataAddress})}}
\par
{\bkmkstart AAAAAAAAOC}
{\bkmkend AAAAAAAAOC}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Handles one i2c master read transaction with the supplied parameters. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This Reads 2 Bytes of data from the Slave Device\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i slaveAddress} \cell }{- The address of the i2c Device to be accessed Uses 7 Bit Address Scheme\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i dataAddress} \cell }{- The Register Address to be accessed\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid Merged LSB and MSB from the Slave Device \par
}}{
Definition at line 108 of file Drv_i2c.cpp.}\par
}
{\xe \v I2C_Read8\:Inno3Pro_I2C}
{\xe \v Inno3Pro_I2C\:I2C_Read8}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t Inno3Pro_I2C::I2C_Read8 (uint8_t  {\i slaveAddress}, uint8_t  {\i dataAddress})}}
\par
{\bkmkstart AAAAAAAAOB}
{\bkmkend AAAAAAAAOB}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Handles one i2c master read transaction with the supplied parameters. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This Reads 1 Byte of data from the Slave Device\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i slaveAddress} \cell }{- The address of the i2c Device to be accessed Uses 7 Bit Address Scheme\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i dataAddress} \cell }{- The Register Address to be accessed\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid 1 Byte of Data from the Slave Device \par
}}{
Definition at line 72 of file Drv_i2c.cpp.}\par
}
{\xe \v I2C_Write16\:Inno3Pro_I2C}
{\xe \v Inno3Pro_I2C\:I2C_Write16}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Inno3Pro_I2C::I2C_Write16 (uint8_t  {\i slaveAddress}, uint8_t  {\i dataAddress}, uint8_t *  {\i dataBuffer}, uint8_t  {\i buflen})}}
\par
{\bkmkstart AAAAAAAAOA}
{\bkmkend AAAAAAAAOA}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Handles one i2c master write transaction with the supplied parameters. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This Writes 1 to 2 Bytes of data to the Slave Device\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i slaveAddress} \cell }{- The address of the i2c Device to be accessed Uses 7 Bit Address Scheme\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i dataAddress} \cell }{- The Register Address to be accessed\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i dataBuffer} \cell }{- A pointer to the block of data to be sent\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i buflen} \cell }{- The length of the data block to be sent\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid None \par
}}{
Definition at line 44 of file Drv_i2c.cpp.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
C:/Users/csales/Documents/Arduino/libraries/InnoPro_Arduino/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHT" }{}}{\fldrslt {\cs37\ul\cf2 Drv_i2c.h}}}
\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
C:/Users/csales/Documents/Arduino/libraries/InnoPro_Arduino/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHS" }{}}{\fldrslt {\cs37\ul\cf2 Drv_i2c.cpp}}}
\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Inno3Pro_Rtc Class Reference\par \pard\plain 
{\tc\tcl2 \v Inno3Pro_Rtc}
{\xe \v Inno3Pro_Rtc}
{\bkmkstart AAAAAAAAHX}
{\bkmkend AAAAAAAAHX}
\par
{
{\f2 #include <Drv_Rtc.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint16_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOD" }{}}{\fldrslt {\cs37\ul\cf2 clock_GetTimeStampMs}}}
 (void)\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the current timestamp in mSec. }{
}\par
}}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOE" }{}}{\fldrslt {\cs37\ul\cf2 clock_HasTimeElapsedMs}}}
 (uint16_t u16TimeStamp, uint16_t u16TimeDurationCheck)\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Used for Generating milli Seconds delay. }{
}\par
}}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint16_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOF" }{}}{\fldrslt {\cs37\ul\cf2 clock_GetTimeStampUs}}}
 (void)\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the current timestamp in uSec. }{
}\par
}}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOG" }{}}{\fldrslt {\cs37\ul\cf2 clock_HasTimeElapsedUs}}}
 (uint16_t u16TimeStamp, uint16_t u16TimeDurationCheck)\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Used for Generating micro Seconds delay. }{
}\par
}}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Private Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint16_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOH" }{}}{\fldrslt {\cs37\ul\cf2 clock_GetElapsedTimeMs}}}
 (uint16_t u16TimeStamp)\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Used for calculating the elapsed time in milli seconds. }{
}\par
}}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint16_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOI" }{}}{\fldrslt {\cs37\ul\cf2 clock_GetElapsedTimeUs}}}
 (uint16_t u16TimeStamp)\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Used for calculating the elapsed time in micro seconds. }{
}\par
}}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Private Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint16_t {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOJ" }{}}{\fldrslt {\cs37\ul\cf2 u16ClockMSec}}}
 = 0\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line 44 of file Drv_Rtc.h.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v clock_GetElapsedTimeMs\:Inno3Pro_Rtc}
{\xe \v Inno3Pro_Rtc\:clock_GetElapsedTimeMs}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint16_t Inno3Pro_Rtc::clock_GetElapsedTimeMs (uint16_t  {\i u16TimeStamp}){\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAOH}
{\bkmkend AAAAAAAAOH}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Used for calculating the elapsed time in milli seconds. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i u16TimeStamp} \cell }{- milli second time stamp variable\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid Returns the Time that have elapsed since u16TimeStamp \par
}}{
Definition at line 42 of file Drv_Rtc.cpp.}\par
}
{\xe \v clock_GetElapsedTimeUs\:Inno3Pro_Rtc}
{\xe \v Inno3Pro_Rtc\:clock_GetElapsedTimeUs}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint16_t Inno3Pro_Rtc::clock_GetElapsedTimeUs (uint16_t  {\i u16TimeStamp}){\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAOI}
{\bkmkend AAAAAAAAOI}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Used for calculating the elapsed time in micro seconds. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i u16TimeStamp} \cell }{- micro second time stamp variable\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid Returns the Time that have elapsed since u16TimeStamp \par
}}{
Definition at line 66 of file Drv_Rtc.cpp.}\par
}
{\xe \v clock_GetTimeStampMs\:Inno3Pro_Rtc}
{\xe \v Inno3Pro_Rtc\:clock_GetTimeStampMs}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint16_t Inno3Pro_Rtc::clock_GetTimeStampMs (void )}}
\par
{\bkmkstart AAAAAAAAOD}
{\bkmkend AAAAAAAAOD}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the current timestamp in mSec. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid Current timestamp in milli Seconds \par
}}{
Definition at line 48 of file Drv_Rtc.cpp.}\par
}
{\xe \v clock_GetTimeStampUs\:Inno3Pro_Rtc}
{\xe \v Inno3Pro_Rtc\:clock_GetTimeStampUs}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint16_t Inno3Pro_Rtc::clock_GetTimeStampUs (void )}}
\par
{\bkmkstart AAAAAAAAOF}
{\bkmkend AAAAAAAAOF}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the current timestamp in uSec. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i None} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid Current timestamp in micro Seconds \par
}}{
Definition at line 72 of file Drv_Rtc.cpp.}\par
}
{\xe \v clock_HasTimeElapsedMs\:Inno3Pro_Rtc}
{\xe \v Inno3Pro_Rtc\:clock_HasTimeElapsedMs}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Inno3Pro_Rtc::clock_HasTimeElapsedMs (uint16_t  {\i u16TimeStamp}, uint16_t  {\i u16TimeDurationCheck})}}
\par
{\bkmkstart AAAAAAAAOE}
{\bkmkend AAAAAAAAOE}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Used for Generating milli Seconds delay. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i u16TimeStamp} \cell }{- milli second time stamp variable\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i u16TimeDurationCheck} \cell }{- Duration to compare against the TimeStamp\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid TRUE after Delay Time has Elapsed \par
}}{
Definition at line 54 of file Drv_Rtc.cpp.}\par
}
{\xe \v clock_HasTimeElapsedUs\:Inno3Pro_Rtc}
{\xe \v Inno3Pro_Rtc\:clock_HasTimeElapsedUs}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Inno3Pro_Rtc::clock_HasTimeElapsedUs (uint16_t  {\i u16TimeStamp}, uint16_t  {\i u16TimeDurationCheck})}}
\par
{\bkmkstart AAAAAAAAOG}
{\bkmkend AAAAAAAAOG}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Used for Generating micro Seconds delay. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i u16TimeStamp} \cell }{- micro second time stamp variable\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i u16TimeDurationCheck} \cell }{- Duration to compare against the TimeStamp\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid TRUE after Delay Time has Elapsed \par
}}{
Definition at line 78 of file Drv_Rtc.cpp.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v u16ClockMSec\:Inno3Pro_Rtc}
{\xe \v Inno3Pro_Rtc\:u16ClockMSec}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint16_t Inno3Pro_Rtc::u16ClockMSec = 0{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAOJ}
{\bkmkend AAAAAAAAOJ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Clock Variables \par
}{
Definition at line 116 of file Drv_Rtc.h.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
C:/Users/csales/Documents/Arduino/libraries/InnoPro_Arduino/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHW" }{}}{\fldrslt {\cs37\ul\cf2 Drv_Rtc.h}}}
\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
C:/Users/csales/Documents/Arduino/libraries/InnoPro_Arduino/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHV" }{}}{\fldrslt {\cs37\ul\cf2 Drv_Rtc.cpp}}}
\par
}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
File Documentation{\tc \v File Documentation}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
C:/Users/csales/Documents/Arduino/libraries/InnoPro_Arduino/Config.h File Reference\par \pard\plain 
{\tc\tcl2 \v C:/Users/csales/Documents/Arduino/libraries/InnoPro_Arduino/Config.h}
{\xe \v C:/Users/csales/Documents/Arduino/libraries/InnoPro_Arduino/Config.h}
{\bkmkstart AAAAAAAAAA}
{\bkmkend AAAAAAAAAA}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This is the header file containing all the Library Macros and configuration for InnoSwitch3-Pro. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "WProgram.h"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 
{
\pard\plain \s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid Firmware Revision Macro\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Defines the revision number of {\b  InnoSwitch3-Pro Code Library }  to track changes on each release\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid {\b  Version Format: v00.00.00 } \par
}}}\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 

{
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAB" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_FW_VERSION_MAJOR}}}
\~ '0','1'\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_FW_VERSION_MINOR}}}
\~ '0','0'\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAD" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_FW_VERSION_TEST}}}
\~ '0','0'\par
}
}{
\pard\plain \s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid Saturation Macros\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Used for Setting limits to a certain parameter \par
}}\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 

{
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAE" }{}}{\fldrslt {\cs37\ul\cf2 sig_minmax}}}
(sig,  min,  max)\~ ((sig < min) ? sig = min : (sig > max) ? sig = max : 0)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAF" }{}}{\fldrslt {\cs37\ul\cf2 sig_max}}}
(sig,  max)\~ ((sig > max) ? sig = max : 0)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAG" }{}}{\fldrslt {\cs37\ul\cf2 sig_min}}}
(sig,  min)\~ ((sig < min) ? sig = min : 0)\par
}
}{
\pard\plain \s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid Bit Manipulation Macros\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Used for Manipulating bits in a certain byte \par
}}\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 

{
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAH" }{}}{\fldrslt {\cs37\ul\cf2 set_bit}}}
(ADDRESS,  BIT)\~ (ADDRESS |= (1<<BIT))\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAI" }{}}{\fldrslt {\cs37\ul\cf2 clear_bit}}}
(ADDRESS,  BIT)\~ (ADDRESS &= ~(1<<BIT))\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAJ" }{}}{\fldrslt {\cs37\ul\cf2 toggle_bit}}}
(ADDRESS,  BIT)\~ (ADDRESS ^= (1<<BIT))\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAK" }{}}{\fldrslt {\cs37\ul\cf2 test_bit}}}
(ADDRESS,  BIT)\~ (ADDRESS & (1<<BIT))\par
}
}{
\pard\plain \s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid InnoSwitch3-Pro I2C Macros\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Defines the Slave address of InnoSwitch3-Pro and I2C Write Sizes\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid 0011000 (0x18) - 7bit Address Scheme \par
}}}\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 

{
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAL" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_ADDRESS}}}
\~ 0x18\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAM" }{}}{\fldrslt {\cs37\ul\cf2 WR_WORD}}}
\~ 0x03\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAN" }{}}{\fldrslt {\cs37\ul\cf2 WR_BYTE}}}
\~ 0x02\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAO" }{}}{\fldrslt {\cs37\ul\cf2 RD_MSB}}}
\~ 1\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAP" }{}}{\fldrslt {\cs37\ul\cf2 RD_LSB}}}
\~ 0\par
}
}{
\pard\plain \s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid InnoSwitch3-Pro Read Register BitShift Count Macros\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Defines the Register BitShift position used in Reading Register Values \par
}}\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 

{
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAQ" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_READ_OV_FAULT_BITSHIFT}}}
\~ 14\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAR" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_READ_UV_FAULT_BITSHIFT}}}
\~ 12\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAS" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_READ_ISSC_SHORT_BITSHIFT}}}
\~ 8\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAT" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_READ_UVL_TIMER_BITSHIFT}}}
\~ 6\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAU" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_READ_WATCHDOG_TIMER_BITSHIFT}}}
\~ 4\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAV" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_READ_CV_MODE_BITSHIFT}}}
\~ 2\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAW" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_READ_CV_MODE_TIMER_BITSHIFT}}}
\~ 0\par
}
}{
\pard\plain \s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid InnoSwitch3-Pro Response and Timer Macros\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Used for Response and Timer settings of registers\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid Use these MACROS for updating the PI Command register settings \par
}}}\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 

{
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAX" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_VBUS_ENABLE}}}
\~ true\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAY" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_VBUS_DISABLE}}}
\~ false\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAZ" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_BLEEDER_ENABLE}}}
\~ true\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABA" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_BLEEDER_DISABLE}}}
\~ false\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABB" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_LOAD_DISCHARGE_ENABLE}}}
\~ true\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABC" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_LOAD_DISCHARGE_DISABLE}}}
\~ false\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABD" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_TURN_OFF_PSU_ENABLE}}}
\~ true\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABE" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_TURN_OFF_PSU_DISABLE}}}
\~ false\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABF" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_FASTVI_UPDATE_LIMIT_ENABLE}}}
\~ false\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABG" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_FASTVI_UPDATE_LIMIT_DISABLE}}}
\~ true\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABH" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_OVL_FAULT_RESPONSE_NORESPONSE}}}
\~ 0\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABI" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_OVL_FAULT_RESPONSE_LATCHOFF}}}
\~ 1\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABJ" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_OVL_FAULT_RESPONSE_AUTORESTART}}}
\~ 2\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABK" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_UVL_FAULT_RESPONSE_AUTORESTART}}}
\~ 0\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABL" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_UVL_FAULT_RESPONSE_LATCHOFF}}}
\~ 1\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABM" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_UVL_FAULT_RESPONSE_NORESPONSE}}}
\~ 2\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABN" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_ISSC_FAULT_RESPONSE_NORESPONSE}}}
\~ 0\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABO" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_ISSC_FAULT_RESPONSE_LATCHOFF}}}
\~ 1\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABP" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_ISSC_FAULT_RESPONSE_AUTORESTART}}}
\~ 2\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABQ" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_ISSC_FREQ_THRESHOLD_50KHZ}}}
\~ 0\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABR" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_ISSC_FREQ_THRESHOLD_30KHZ}}}
\~ 1\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABS" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_ISSC_FREQ_THRESHOLD_40KHZ}}}
\~ 2\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABT" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_ISSC_FREQ_THRESHOLD_60KHZ}}}
\~ 3\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABU" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_UVL_FAULT_TIMER_8MS}}}
\~ 0\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABV" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_UVL_FAULT_TIMER_16MS}}}
\~ 1\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABW" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_UVL_FAULT_TIMER_32MS}}}
\~ 2\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABX" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_UVL_FAULT_TIMER_64MS}}}
\~ 3\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABY" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_WATCHDOG_TIMER_NOWATCHDOG}}}
\~ 0\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABZ" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_WATCHDOG_TIMER_500MS}}}
\~ 1\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACA" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_WATCHDOG_TIMER_1000MS}}}
\~ 2\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACB" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_WATCHDOG_TIMER_2000MS}}}
\~ 3\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACC" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_CVOL_FAULT_RESPONSE_NORESPONSE}}}
\~ 0\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_CVOL_FAULT_RESPONSE_AUTORESTART}}}
\~ 1\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACE" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_CVOL_FAULT_RESPONSE_LATCHOFF}}}
\~ 2\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACF" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_CVOL_FAULT_TIMER_8MS}}}
\~ 0\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACG" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_CVOL_FAULT_TIMER_16MS}}}
\~ 1\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACH" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_CVOL_FAULT_TIMER_32MS}}}
\~ 2\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACI" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_CVOL_FAULT_TIMER_64MS}}}
\~ 3\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACJ" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_INTERRUPT_CONTROL_S_MASK}}}
\~ 0x40\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACK" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_INTERRUPT_BPS_CURR_LO_FAULT_MASK}}}
\~ 0x20\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACL" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_INTERRUPT_CVO_PKLOAD_TIMER_MASK}}}
\~ 0x10\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACM" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_INTERRUPT_ISSC_MASK}}}
\~ 0x08\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACN" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_INTERRUPT_VOUT_UV_MASK}}}
\~ 0x02\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACO" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_INTERRUPT_VOUT_OV_MASK}}}
\~ 0x01\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACP" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_OTP_FAULT_HYST_40DEG}}}
\~ 0\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACQ" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_OTP_FAULT_HYST_60DEG}}}
\~ 1\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACR" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_CVLOAD_DEFAULT}}}
\~ 0x20\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACS" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_CVLOAD_RECOMMENDED}}}
\~ 0x80\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACT" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_LOOPSPEED1_DEFAULT}}}
\~ 0x281E\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACU" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_LOOPSPEED1_RECOMMENDED}}}
\~ 0x140A\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACV" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_LOOPSPEED2_DEFAULT}}}
\~ 0x08C8\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACW" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_LOOPSPEED2_RECOMMENDED}}}
\~ 0x0F84\par
}
}{
\pard\plain \s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid PI_COMMAND Register Address Assignments\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Defines the Command Registers to Control \par
}}\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 

{
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACX" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_VBEN}}}
\~ 0x04\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACY" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_BLEEDER}}}
\~ 0x86\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACZ" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_VDIS}}}
\~ 0x08\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADA" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_TURN_OFF_PSU}}}
\~ 0x8A\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADB" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_FAST_VI_CMD}}}
\~ 0x8C\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADC" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_CVO}}}
\~ 0x0E\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADD" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_CV}}}
\~ 0x10\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADE" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_OVA}}}
\~ 0x92\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADF" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_UVA}}}
\~ 0x94\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADG" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_CDC}}}
\~ 0x16\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADH" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_CC}}}
\~ 0x98\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADI" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_VKP}}}
\~ 0x1A\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADJ" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_OVL}}}
\~ 0x1C\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADK" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_UVL}}}
\~ 0x9E\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADL" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_ISSC}}}
\~ 0xA2\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADM" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_UVL_TIMER}}}
\~ 0xA4\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADN" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_WATCHDOG_TIMER}}}
\~ 0x26\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADO" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_CVOL}}}
\~ 0xA8\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADP" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_CVOL_TIMER}}}
\~ 0x2A\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADQ" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_INTERRUPT}}}
\~ 0x2C\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADR" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_OTP}}}
\~ 0xAE\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADS" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_CV_LOAD}}}
\~ 0x30\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADT" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_LOOP_SPEED_1}}}
\~ 0x32\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADU" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_LOOP_SPEED_2}}}
\~ 0x34\par
}
}{
\pard\plain \s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid Telemetry(Read-Back) Register Address Assignments\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Defines the Telemetry Report Back Registers to Read \par
}}\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 

{
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADV" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_READ0}}}
\~ 0x00\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADW" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_READ1}}}
\~ 0x02\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADX" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_READ2}}}
\~ 0x04\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADY" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_READ3}}}
\~ 0x06\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADZ" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_READ4}}}
\~ 0x08\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEA" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_READ5}}}
\~ 0x0A\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEB" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_READ6}}}
\~ 0x0C\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEC" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_READ7}}}
\~ 0x0E\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAED" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_READ9}}}
\~ 0x12\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEE" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_READ10}}}
\~ 0x14\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEF" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_READ11}}}
\~ 0x16\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEG" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_READ12}}}
\~ 0x18\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEH" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_READ13}}}
\~ 0x1A\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEI" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_READ14}}}
\~ 0x1C\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEJ" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_READ15}}}
\~ 0x5C\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEK" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_READ_LOOP_SPEED_1}}}
\~ 0x20\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEL" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_READ_LOOP_SPEED_2}}}
\~ 0x22\par
}
}{
\pard\plain \s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid Telemetry READ4 Bit Assignments\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Defines the Bit Assignments on READ4 Register \par
}}\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 

{
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEM" }{}}{\fldrslt {\cs37\ul\cf2 READ4_Reg_VBEN}}}
\~ 14\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEN" }{}}{\fldrslt {\cs37\ul\cf2 READ4_Reg_BLEEDER}}}
\~ 13\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEO" }{}}{\fldrslt {\cs37\ul\cf2 READ4_Reg_PSUOFF}}}
\~ 12\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEP" }{}}{\fldrslt {\cs37\ul\cf2 READ4_Reg_FSTVIC}}}
\~ 11\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEQ" }{}}{\fldrslt {\cs37\ul\cf2 READ4_Reg_CVO}}}
\~ 10\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAER" }{}}{\fldrslt {\cs37\ul\cf2 READ4_Reg_OTP}}}
\~ 9\par
}
}{
\pard\plain \s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid Telemetry READ10 Bit Assignments\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Defines the Bit Assignments on READ10 Register \par
}}\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 

{
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAES" }{}}{\fldrslt {\cs37\ul\cf2 READ10_Reg_INTERRUPT_EN}}}
\~ 15\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAET" }{}}{\fldrslt {\cs37\ul\cf2 READ10_Reg_CONTROL_S}}}
\~ 14\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEU" }{}}{\fldrslt {\cs37\ul\cf2 READ10_Reg_VDIS}}}
\~ 13\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEV" }{}}{\fldrslt {\cs37\ul\cf2 READ10_Reg_HIGH_FSW}}}
\~ 12\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEW" }{}}{\fldrslt {\cs37\ul\cf2 READ10_Reg_OTP}}}
\~ 9\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEX" }{}}{\fldrslt {\cs37\ul\cf2 READ10_Reg_VOUT2PCT}}}
\~ 5\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEY" }{}}{\fldrslt {\cs37\ul\cf2 READ10_Reg_VOUT10PCT}}}
\~ 4\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEZ" }{}}{\fldrslt {\cs37\ul\cf2 READ10_Reg_ISSC}}}
\~ 3\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFA" }{}}{\fldrslt {\cs37\ul\cf2 READ10_Reg_VOUT_UV}}}
\~ 1\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFB" }{}}{\fldrslt {\cs37\ul\cf2 READ10_Reg_VOUT_OV}}}
\~ 0\par
}
}{
\pard\plain \s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid Telemetry READ11 Bit Assignments\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Defines the Bit Assignments on READ11 Register \par
}}\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 

{
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFC" }{}}{\fldrslt {\cs37\ul\cf2 READ11_Reg_ar_CV}}}
\~ 15\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFD" }{}}{\fldrslt {\cs37\ul\cf2 READ11_Reg_ar_ISSC}}}
\~ 12\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFE" }{}}{\fldrslt {\cs37\ul\cf2 READ11_Reg_ar_CCSC}}}
\~ 11\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFF" }{}}{\fldrslt {\cs37\ul\cf2 READ11_Reg_ar_VOUT_OV}}}
\~ 10\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFG" }{}}{\fldrslt {\cs37\ul\cf2 READ11_Reg_ar_VOUT_UV}}}
\~ 9\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFH" }{}}{\fldrslt {\cs37\ul\cf2 READ11_Reg_LO}}}
\~ 7\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFI" }{}}{\fldrslt {\cs37\ul\cf2 READ11_Reg_Lo_CVO}}}
\~ 6\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 READ11_Reg_PSUOFF}}}
\~ 5\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFK" }{}}{\fldrslt {\cs37\ul\cf2 READ11_Reg_Lo_ISSC}}}
\~ 4\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFL" }{}}{\fldrslt {\cs37\ul\cf2 READ11_Reg_Lo_VOUT_OV}}}
\~ 2\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFM" }{}}{\fldrslt {\cs37\ul\cf2 READ11_Reg_Lo_VOUT_UV}}}
\~ 1\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFN" }{}}{\fldrslt {\cs37\ul\cf2 READ11_Reg_BPS_OV}}}
\~ 0\par
}
}{
\pard\plain \s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid Telemetry READ12 Bit Assignments\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Defines the Bit Assignments on READ12 Register \par
}}\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 

{
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFO" }{}}{\fldrslt {\cs37\ul\cf2 READ12_Reg_CONTROL_S_MASK}}}
\~ 14\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFP" }{}}{\fldrslt {\cs37\ul\cf2 READ12_Reg_LO_Fault_MASK}}}
\~ 13\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFQ" }{}}{\fldrslt {\cs37\ul\cf2 READ12_Reg_CCAR_MASK}}}
\~ 12\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFR" }{}}{\fldrslt {\cs37\ul\cf2 READ12_Reg_ISSC_MASK}}}
\~ 11\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFS" }{}}{\fldrslt {\cs37\ul\cf2 READ12_Reg_VOUT_UV_MASK}}}
\~ 9\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFT" }{}}{\fldrslt {\cs37\ul\cf2 READ12_Reg_VOUT_OV_MASK}}}
\~ 8\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFU" }{}}{\fldrslt {\cs37\ul\cf2 READ12_Reg_CONTROL_S_STATUS}}}
\~ 6\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFV" }{}}{\fldrslt {\cs37\ul\cf2 READ12_Reg_LO_FAULT_STATUS}}}
\~ 5\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFW" }{}}{\fldrslt {\cs37\ul\cf2 READ12_Reg_CCAR_STATUS}}}
\~ 4\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFX" }{}}{\fldrslt {\cs37\ul\cf2 READ12_Reg_ISSC_STATUS}}}
\~ 3\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFY" }{}}{\fldrslt {\cs37\ul\cf2 READ12_Reg_VOUT_UV_STATUS}}}
\~ 1\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFZ" }{}}{\fldrslt {\cs37\ul\cf2 READ12_Reg_VOUT_OV_STATUS}}}
\~ 0\par
}
}{
\pard\plain \s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid InnoSwitch3-Pro Computation Macros\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Defines the Computations needed by individual Registers \par
}}\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 

{
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGA" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_RSENSE}}}
\~ (float)(5.25)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGB" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_FULL_RANGE_RSENSE_VOLTAGE}}}
\~ (float)(31.1)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGC" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_ADC_FULL_RANGE}}}
\~ (float)(128)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGD" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_CC_SET_PT_MULT}}}
\~ (float)(({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGC" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_ADC_FULL_RANGE}}}
 * {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGA" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_RSENSE}}}
) / {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGB" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_FULL_RANGE_RSENSE_VOLTAGE}}}
)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGE" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_CV_SET_PT_MULT}}}
\~ (float)(100)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGF" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_OV_PERCENTAGE_MULT}}}
\~ (float)(1.24)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGG" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_UV_PERCENTAGE_MULT}}}
\~ (float)(0.72)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGH" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_OV_SET_PT_MULT}}}
\~ (float)(10)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGI" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_UV_SET_PT_MULT}}}
\~ (float)(10)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGJ" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_CDC_SET_PT_DIV}}}
\~ (float)(50)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGK" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_VKP_SET_PT_MULT}}}
\~ (float)(10)\par
}
}{
\pard\plain \s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid InnoSwitch3-Pro Sample Configuration Settings\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Defines example values to be uploaded to InnoSwitch3-Pro \par
}}\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 

{
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGL" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_DEFAULT_CV_SET_PT_LEVEL}}}
\~ (float)(5)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGM" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_DEFAULT_OVA_SET_PT_LEVEL}}}
\~ (float)(6.2)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGN" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_DEFAULT_UVA_SET_PT_LEVEL}}}
\~ (float)(3)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGO" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_DEFAULT_CDC_ASSERT_LEVEL}}}
\~ (float)(300)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGP" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_DEFAULT_CC_ASSERT_LEVEL}}}
\~ (float)(5.1)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGQ" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_DEFAULT_VKP_ASSERT_LEVEL}}}
\~ (float)(7)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGR" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_DEFAULT_VBEN_CONTROL_LOGIC}}}
\~ (float)(0)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGS" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_DEFAULT_UVL_CONTROL_LOGIC}}}
\~ (float)(0)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGT" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_5V_CV_SET_PT_LEVEL}}}
\~ (float)(5)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGU" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_5V_CDC_ASSERT_LEVEL}}}
\~ (float)(300)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGV" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_5V_CC_ASSERT_LEVEL}}}
\~ (float)(5.1)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGW" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_5V_VKP_ASSERT_LEVEL}}}
\~ (float)(7)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGX" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_5V_VBEN_CONTROL_LOGIC}}}
\~ (float)(1)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGY" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_8V_CV_SET_PT_LEVEL}}}
\~ (float)(8)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGZ" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_8V_CDC_ASSERT_LEVEL}}}
\~ (float)(300)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHA" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_8V_CC_ASSERT_LEVEL}}}
\~ (float)(5.1)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHB" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_8V_VKP_ASSERT_LEVEL}}}
\~ (float)(7)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHC" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_8V_VBEN_CONTROL_LOGIC}}}
\~ (float)(1)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHD" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_15V_CV_SET_PT_LEVEL}}}
\~ (float)(15)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHE" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_15V_CDC_ASSERT_LEVEL}}}
\~ (float)(300)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHF" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_15V_CC_ASSERT_LEVEL}}}
\~ (float)(2.76)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHG" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_15V_VKP_ASSERT_LEVEL}}}
\~ (float)(7)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHH" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_15V_VBEN_CONTROL_LOGIC}}}
\~ (float)(1)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHI" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_20V_CV_SET_PT_LEVEL}}}
\~ (float)(20)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHJ" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_20V_CDC_ASSERT_LEVEL}}}
\~ (float)(300)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHK" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_20V_CC_ASSERT_LEVEL}}}
\~ (float)(2.1)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHL" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_20V_VKP_ASSERT_LEVEL}}}
\~ (float)(7)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHM" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_20V_VBEN_CONTROL_LOGIC}}}
\~ (float)(1)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHN" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_3V_CV_SET_PT_LEVEL}}}
\~ (float)(3)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHO" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_3V_CDC_ASSERT_LEVEL}}}
\~ (float)(300)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHP" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_3V_CC_ASSERT_LEVEL}}}
\~ (float)(5.1)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHQ" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_3V_VKP_ASSERT_LEVEL}}}
\~ (float)(7)\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHR" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_3V_VBEN_CONTROL_LOGIC}}}
\~ (float)(1)\par
}
}{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This is the header file containing all the Library Macros and configuration for InnoSwitch3-Pro. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid CS - PIPH Applications\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Date:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid August 3, 2018\par
}Copyright (C) 2018 Power Integrations. All rights reserved.\par
DISCLAIMER: YOU AGREE AND ACKNOWLEDGE THE SOFTWARE CODE LIBRARIES ARE PROVIDED ON AN "AS IS" BASIS AND THAT YOUR USE OR RELIANCE UPON THE SOFTWARE IS AT YOUR OWN RISK AND DISCRETION. POWER INTEGRATIONS HEREBY DISCLAIM ANY AND ALL REPRESENTATIONS, WARRANTIES AND GUARANTIES REGARDING THE SOFTWARE. POWER INTEGRATIONS MAKES NO WARRANTY HEREIN AND SPECIFICALLY DISCLAIMS ALL WARRANTIES INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT TO THIRD PARTIES. FURTHERMORE, POWER INTEGRATIONS MAKES NO WARRANTY THAT\par
1) THE SOFTWARE CODE LIBRARIES WILL MEET YOUR REQUIREMENTS 2) THE SOFTWARE CODE LIBRARIES WILL BE ACCURATE, RELIBALE, OR ERROR-FREE.\par
DAMAGES DISCLAIMER: POWER INTEGRATIONS, WILL NOT UNDER ANY CIRCUMSTANCES, BE LIABLE TO ANY USER FOR ANY DIRECT, INDIRECT, CONSEQUENTIAL, SPECIAL, PUNITIVE, INCIDENTAL DAMAGES, LOST PROFITS OR LOSS OF BUSINESS, WHETHER FORESEEABLE OR UNFORESEEABLE EVEN IF POWER INTEGRATIONS HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES ARISING OUT OF OR RELATED TO USE OF THIS SOFTWARE CODE LIBRARY. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macro Definition Documentation\par
\pard\plain 
{\xe \v clear_bit\:Config.h}
{\xe \v Config.h\:clear_bit}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define clear_bit( ADDRESS,  BIT)\~ (ADDRESS &= ~(1<<BIT))}}
\par
{\bkmkstart AAAAAAAAAI}
{\bkmkend AAAAAAAAAI}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Clear a bit in a byte \par
}{
Definition at line 93 of file Config.h.}\par
}
{\xe \v INNO3PRO_15V_CC_ASSERT_LEVEL\:Config.h}
{\xe \v Config.h\:INNO3PRO_15V_CC_ASSERT_LEVEL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_15V_CC_ASSERT_LEVEL\~ (float)(2.76)}}
\par
{\bkmkstart AAAAAAAAHF}
{\bkmkend AAAAAAAAHF}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 745 of file Config.h.}\par
}
{\xe \v INNO3PRO_15V_CDC_ASSERT_LEVEL\:Config.h}
{\xe \v Config.h\:INNO3PRO_15V_CDC_ASSERT_LEVEL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_15V_CDC_ASSERT_LEVEL\~ (float)(300)}}
\par
{\bkmkstart AAAAAAAAHE}
{\bkmkend AAAAAAAAHE}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 744 of file Config.h.}\par
}
{\xe \v INNO3PRO_15V_CV_SET_PT_LEVEL\:Config.h}
{\xe \v Config.h\:INNO3PRO_15V_CV_SET_PT_LEVEL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_15V_CV_SET_PT_LEVEL\~ (float)(15)}}
\par
{\bkmkstart AAAAAAAAHD}
{\bkmkend AAAAAAAAHD}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 743 of file Config.h.}\par
}
{\xe \v INNO3PRO_15V_VBEN_CONTROL_LOGIC\:Config.h}
{\xe \v Config.h\:INNO3PRO_15V_VBEN_CONTROL_LOGIC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_15V_VBEN_CONTROL_LOGIC\~ (float)(1)}}
\par
{\bkmkstart AAAAAAAAHH}
{\bkmkend AAAAAAAAHH}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 747 of file Config.h.}\par
}
{\xe \v INNO3PRO_15V_VKP_ASSERT_LEVEL\:Config.h}
{\xe \v Config.h\:INNO3PRO_15V_VKP_ASSERT_LEVEL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_15V_VKP_ASSERT_LEVEL\~ (float)(7)}}
\par
{\bkmkstart AAAAAAAAHG}
{\bkmkend AAAAAAAAHG}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 746 of file Config.h.}\par
}
{\xe \v INNO3PRO_20V_CC_ASSERT_LEVEL\:Config.h}
{\xe \v Config.h\:INNO3PRO_20V_CC_ASSERT_LEVEL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_20V_CC_ASSERT_LEVEL\~ (float)(2.1)}}
\par
{\bkmkstart AAAAAAAAHK}
{\bkmkend AAAAAAAAHK}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 752 of file Config.h.}\par
}
{\xe \v INNO3PRO_20V_CDC_ASSERT_LEVEL\:Config.h}
{\xe \v Config.h\:INNO3PRO_20V_CDC_ASSERT_LEVEL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_20V_CDC_ASSERT_LEVEL\~ (float)(300)}}
\par
{\bkmkstart AAAAAAAAHJ}
{\bkmkend AAAAAAAAHJ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 751 of file Config.h.}\par
}
{\xe \v INNO3PRO_20V_CV_SET_PT_LEVEL\:Config.h}
{\xe \v Config.h\:INNO3PRO_20V_CV_SET_PT_LEVEL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_20V_CV_SET_PT_LEVEL\~ (float)(20)}}
\par
{\bkmkstart AAAAAAAAHI}
{\bkmkend AAAAAAAAHI}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 750 of file Config.h.}\par
}
{\xe \v INNO3PRO_20V_VBEN_CONTROL_LOGIC\:Config.h}
{\xe \v Config.h\:INNO3PRO_20V_VBEN_CONTROL_LOGIC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_20V_VBEN_CONTROL_LOGIC\~ (float)(1)}}
\par
{\bkmkstart AAAAAAAAHM}
{\bkmkend AAAAAAAAHM}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 754 of file Config.h.}\par
}
{\xe \v INNO3PRO_20V_VKP_ASSERT_LEVEL\:Config.h}
{\xe \v Config.h\:INNO3PRO_20V_VKP_ASSERT_LEVEL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_20V_VKP_ASSERT_LEVEL\~ (float)(7)}}
\par
{\bkmkstart AAAAAAAAHL}
{\bkmkend AAAAAAAAHL}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 753 of file Config.h.}\par
}
{\xe \v INNO3PRO_3V_CC_ASSERT_LEVEL\:Config.h}
{\xe \v Config.h\:INNO3PRO_3V_CC_ASSERT_LEVEL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_3V_CC_ASSERT_LEVEL\~ (float)(5.1)}}
\par
{\bkmkstart AAAAAAAAHP}
{\bkmkend AAAAAAAAHP}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 759 of file Config.h.}\par
}
{\xe \v INNO3PRO_3V_CDC_ASSERT_LEVEL\:Config.h}
{\xe \v Config.h\:INNO3PRO_3V_CDC_ASSERT_LEVEL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_3V_CDC_ASSERT_LEVEL\~ (float)(300)}}
\par
{\bkmkstart AAAAAAAAHO}
{\bkmkend AAAAAAAAHO}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 758 of file Config.h.}\par
}
{\xe \v INNO3PRO_3V_CV_SET_PT_LEVEL\:Config.h}
{\xe \v Config.h\:INNO3PRO_3V_CV_SET_PT_LEVEL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_3V_CV_SET_PT_LEVEL\~ (float)(3)}}
\par
{\bkmkstart AAAAAAAAHN}
{\bkmkend AAAAAAAAHN}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 757 of file Config.h.}\par
}
{\xe \v INNO3PRO_3V_VBEN_CONTROL_LOGIC\:Config.h}
{\xe \v Config.h\:INNO3PRO_3V_VBEN_CONTROL_LOGIC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_3V_VBEN_CONTROL_LOGIC\~ (float)(1)}}
\par
{\bkmkstart AAAAAAAAHR}
{\bkmkend AAAAAAAAHR}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 761 of file Config.h.}\par
}
{\xe \v INNO3PRO_3V_VKP_ASSERT_LEVEL\:Config.h}
{\xe \v Config.h\:INNO3PRO_3V_VKP_ASSERT_LEVEL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_3V_VKP_ASSERT_LEVEL\~ (float)(7)}}
\par
{\bkmkstart AAAAAAAAHQ}
{\bkmkend AAAAAAAAHQ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 760 of file Config.h.}\par
}
{\xe \v INNO3PRO_5V_CC_ASSERT_LEVEL\:Config.h}
{\xe \v Config.h\:INNO3PRO_5V_CC_ASSERT_LEVEL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_5V_CC_ASSERT_LEVEL\~ (float)(5.1)}}
\par
{\bkmkstart AAAAAAAAGV}
{\bkmkend AAAAAAAAGV}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 731 of file Config.h.}\par
}
{\xe \v INNO3PRO_5V_CDC_ASSERT_LEVEL\:Config.h}
{\xe \v Config.h\:INNO3PRO_5V_CDC_ASSERT_LEVEL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_5V_CDC_ASSERT_LEVEL\~ (float)(300)}}
\par
{\bkmkstart AAAAAAAAGU}
{\bkmkend AAAAAAAAGU}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 730 of file Config.h.}\par
}
{\xe \v INNO3PRO_5V_CV_SET_PT_LEVEL\:Config.h}
{\xe \v Config.h\:INNO3PRO_5V_CV_SET_PT_LEVEL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_5V_CV_SET_PT_LEVEL\~ (float)(5)}}
\par
{\bkmkstart AAAAAAAAGT}
{\bkmkend AAAAAAAAGT}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 729 of file Config.h.}\par
}
{\xe \v INNO3PRO_5V_VBEN_CONTROL_LOGIC\:Config.h}
{\xe \v Config.h\:INNO3PRO_5V_VBEN_CONTROL_LOGIC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_5V_VBEN_CONTROL_LOGIC\~ (float)(1)}}
\par
{\bkmkstart AAAAAAAAGX}
{\bkmkend AAAAAAAAGX}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 733 of file Config.h.}\par
}
{\xe \v INNO3PRO_5V_VKP_ASSERT_LEVEL\:Config.h}
{\xe \v Config.h\:INNO3PRO_5V_VKP_ASSERT_LEVEL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_5V_VKP_ASSERT_LEVEL\~ (float)(7)}}
\par
{\bkmkstart AAAAAAAAGW}
{\bkmkend AAAAAAAAGW}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 732 of file Config.h.}\par
}
{\xe \v INNO3PRO_8V_CC_ASSERT_LEVEL\:Config.h}
{\xe \v Config.h\:INNO3PRO_8V_CC_ASSERT_LEVEL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_8V_CC_ASSERT_LEVEL\~ (float)(5.1)}}
\par
{\bkmkstart AAAAAAAAHA}
{\bkmkend AAAAAAAAHA}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 738 of file Config.h.}\par
}
{\xe \v INNO3PRO_8V_CDC_ASSERT_LEVEL\:Config.h}
{\xe \v Config.h\:INNO3PRO_8V_CDC_ASSERT_LEVEL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_8V_CDC_ASSERT_LEVEL\~ (float)(300)}}
\par
{\bkmkstart AAAAAAAAGZ}
{\bkmkend AAAAAAAAGZ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 737 of file Config.h.}\par
}
{\xe \v INNO3PRO_8V_CV_SET_PT_LEVEL\:Config.h}
{\xe \v Config.h\:INNO3PRO_8V_CV_SET_PT_LEVEL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_8V_CV_SET_PT_LEVEL\~ (float)(8)}}
\par
{\bkmkstart AAAAAAAAGY}
{\bkmkend AAAAAAAAGY}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 736 of file Config.h.}\par
}
{\xe \v INNO3PRO_8V_VBEN_CONTROL_LOGIC\:Config.h}
{\xe \v Config.h\:INNO3PRO_8V_VBEN_CONTROL_LOGIC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_8V_VBEN_CONTROL_LOGIC\~ (float)(1)}}
\par
{\bkmkstart AAAAAAAAHC}
{\bkmkend AAAAAAAAHC}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 740 of file Config.h.}\par
}
{\xe \v INNO3PRO_8V_VKP_ASSERT_LEVEL\:Config.h}
{\xe \v Config.h\:INNO3PRO_8V_VKP_ASSERT_LEVEL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_8V_VKP_ASSERT_LEVEL\~ (float)(7)}}
\par
{\bkmkstart AAAAAAAAHB}
{\bkmkend AAAAAAAAHB}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 739 of file Config.h.}\par
}
{\xe \v INNO3PRO_ADC_FULL_RANGE\:Config.h}
{\xe \v Config.h\:INNO3PRO_ADC_FULL_RANGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_ADC_FULL_RANGE\~ (float)(128)}}
\par
{\bkmkstart AAAAAAAAGC}
{\bkmkend AAAAAAAAGC}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Analog to Digital Full Range \par
}{
Definition at line 685 of file Config.h.}\par
}
{\xe \v INNO3PRO_ADDRESS\:Config.h}
{\xe \v Config.h\:INNO3PRO_ADDRESS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_ADDRESS\~ 0x18}}
\par
{\bkmkstart AAAAAAAAAL}
{\bkmkend AAAAAAAAAL}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
InnoSwitch3-Pro I2C 7-bit Slave Address \par
}{
Definition at line 115 of file Config.h.}\par
}
{\xe \v INNO3PRO_BLEEDER\:Config.h}
{\xe \v Config.h\:INNO3PRO_BLEEDER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_BLEEDER\~ 0x86}}
\par
{\bkmkstart AAAAAAAACY}
{\bkmkend AAAAAAAACY}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Activate Bleeder(Vout) Function Register \par
}{
Definition at line 376 of file Config.h.}\par
}
{\xe \v INNO3PRO_BLEEDER_DISABLE\:Config.h}
{\xe \v Config.h\:INNO3PRO_BLEEDER_DISABLE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_BLEEDER_DISABLE\~ false}}
\par
{\bkmkstart AAAAAAAABA}
{\bkmkend AAAAAAAABA}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Active Bleeder Disable \par
}{
Definition at line 184 of file Config.h.}\par
}
{\xe \v INNO3PRO_BLEEDER_ENABLE\:Config.h}
{\xe \v Config.h\:INNO3PRO_BLEEDER_ENABLE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_BLEEDER_ENABLE\~ true}}
\par
{\bkmkstart AAAAAAAAAZ}
{\bkmkend AAAAAAAAAZ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Active Bleeder Enable \par
}{
Definition at line 181 of file Config.h.}\par
}
{\xe \v INNO3PRO_CC\:Config.h}
{\xe \v Config.h\:INNO3PRO_CC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_CC\~ 0x98}}
\par
{\bkmkstart AAAAAAAADH}
{\bkmkend AAAAAAAADH}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constant Current Regulation Register \par
}{
Definition at line 403 of file Config.h.}\par
}
{\xe \v INNO3PRO_CC_SET_PT_MULT\:Config.h}
{\xe \v Config.h\:INNO3PRO_CC_SET_PT_MULT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_CC_SET_PT_MULT\~ (float)(({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGC" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_ADC_FULL_RANGE}}}
 * {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGA" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_RSENSE}}}
) / {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGB" }{}}{\fldrslt {\cs37\ul\cf2 INNO3PRO_FULL_RANGE_RSENSE_VOLTAGE}}}
)}}
\par
{\bkmkstart AAAAAAAAGD}
{\bkmkend AAAAAAAAGD}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
CC Set Point Computation: (Value * Rsense * 128 / 32) \par
}{
Definition at line 688 of file Config.h.}\par
}
{\xe \v INNO3PRO_CDC\:Config.h}
{\xe \v Config.h\:INNO3PRO_CDC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_CDC\~ 0x16}}
\par
{\bkmkstart AAAAAAAADG}
{\bkmkend AAAAAAAADG}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Cable Drop Compensation Register \par
}{
Definition at line 400 of file Config.h.}\par
}
{\xe \v INNO3PRO_CDC_SET_PT_DIV\:Config.h}
{\xe \v Config.h\:INNO3PRO_CDC_SET_PT_DIV}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_CDC_SET_PT_DIV\~ (float)(50)}}
\par
{\bkmkstart AAAAAAAAGJ}
{\bkmkend AAAAAAAAGJ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Divider for Cable Drop Compensation Step Size of 50mv/LSB \par
}{
Definition at line 706 of file Config.h.}\par
}
{\xe \v INNO3PRO_CV\:Config.h}
{\xe \v Config.h\:INNO3PRO_CV}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_CV\~ 0x10}}
\par
{\bkmkstart AAAAAAAADD}
{\bkmkend AAAAAAAADD}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Output Voltage Register \par
}{
Definition at line 391 of file Config.h.}\par
}
{\xe \v INNO3PRO_CV_LOAD\:Config.h}
{\xe \v Config.h\:INNO3PRO_CV_LOAD}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_CV_LOAD\~ 0x30}}
\par
{\bkmkstart AAAAAAAADS}
{\bkmkend AAAAAAAADS}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constant Voltage Load \par
}{
Definition at line 438 of file Config.h.}\par
}
{\xe \v INNO3PRO_CV_SET_PT_MULT\:Config.h}
{\xe \v Config.h\:INNO3PRO_CV_SET_PT_MULT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_CV_SET_PT_MULT\~ (float)(100)}}
\par
{\bkmkstart AAAAAAAAGE}
{\bkmkend AAAAAAAAGE}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Multiplier for Output Voltage Step Size of 10mv/LSB \par
}{
Definition at line 691 of file Config.h.}\par
}
{\xe \v INNO3PRO_CVLOAD_DEFAULT\:Config.h}
{\xe \v Config.h\:INNO3PRO_CVLOAD_DEFAULT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_CVLOAD_DEFAULT\~ 0x20}}
\par
{\bkmkstart AAAAAAAACR}
{\bkmkend AAAAAAAACR}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constant Voltage Load Default Settings \par
}{
Definition at line 341 of file Config.h.}\par
}
{\xe \v INNO3PRO_CVLOAD_RECOMMENDED\:Config.h}
{\xe \v Config.h\:INNO3PRO_CVLOAD_RECOMMENDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_CVLOAD_RECOMMENDED\~ 0x80}}
\par
{\bkmkstart AAAAAAAACS}
{\bkmkend AAAAAAAACS}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constant Voltage Load Recommended Settings \par
}{
Definition at line 344 of file Config.h.}\par
}
{\xe \v INNO3PRO_CVO\:Config.h}
{\xe \v Config.h\:INNO3PRO_CVO}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_CVO\~ 0x0E}}
\par
{\bkmkstart AAAAAAAADC}
{\bkmkend AAAAAAAADC}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constant Voltage Only Register \par
}{
Definition at line 388 of file Config.h.}\par
}
{\xe \v INNO3PRO_CVOL\:Config.h}
{\xe \v Config.h\:INNO3PRO_CVOL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_CVOL\~ 0xA8}}
\par
{\bkmkstart AAAAAAAADO}
{\bkmkend AAAAAAAADO}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constant Voltage Mode Fault Response Register \par
}{
Definition at line 425 of file Config.h.}\par
}
{\xe \v INNO3PRO_CVOL_FAULT_RESPONSE_AUTORESTART\:Config.h}
{\xe \v Config.h\:INNO3PRO_CVOL_FAULT_RESPONSE_AUTORESTART}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_CVOL_FAULT_RESPONSE_AUTORESTART\~ 1}}
\par
{\bkmkstart AAAAAAAACD}
{\bkmkend AAAAAAAACD}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constant Voltage Only Fault Response Set to Auto-Restart \par
}{
Definition at line 291 of file Config.h.}\par
}
{\xe \v INNO3PRO_CVOL_FAULT_RESPONSE_LATCHOFF\:Config.h}
{\xe \v Config.h\:INNO3PRO_CVOL_FAULT_RESPONSE_LATCHOFF}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_CVOL_FAULT_RESPONSE_LATCHOFF\~ 2}}
\par
{\bkmkstart AAAAAAAACE}
{\bkmkend AAAAAAAACE}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constant Voltage Only Fault Response Set to Latch-Off \par
}{
Definition at line 294 of file Config.h.}\par
}
{\xe \v INNO3PRO_CVOL_FAULT_RESPONSE_NORESPONSE\:Config.h}
{\xe \v Config.h\:INNO3PRO_CVOL_FAULT_RESPONSE_NORESPONSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_CVOL_FAULT_RESPONSE_NORESPONSE\~ 0}}
\par
{\bkmkstart AAAAAAAACC}
{\bkmkend AAAAAAAACC}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constant Voltage Only Fault Response Set to No Response \par
}{
Definition at line 288 of file Config.h.}\par
}
{\xe \v INNO3PRO_CVOL_FAULT_TIMER_16MS\:Config.h}
{\xe \v Config.h\:INNO3PRO_CVOL_FAULT_TIMER_16MS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_CVOL_FAULT_TIMER_16MS\~ 1}}
\par
{\bkmkstart AAAAAAAACG}
{\bkmkend AAAAAAAACG}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constant Voltage Only Fault Timer Set to 16ms \par
}{
Definition at line 302 of file Config.h.}\par
}
{\xe \v INNO3PRO_CVOL_FAULT_TIMER_32MS\:Config.h}
{\xe \v Config.h\:INNO3PRO_CVOL_FAULT_TIMER_32MS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_CVOL_FAULT_TIMER_32MS\~ 2}}
\par
{\bkmkstart AAAAAAAACH}
{\bkmkend AAAAAAAACH}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constant Voltage Only Fault Timer Set to 32ms \par
}{
Definition at line 305 of file Config.h.}\par
}
{\xe \v INNO3PRO_CVOL_FAULT_TIMER_64MS\:Config.h}
{\xe \v Config.h\:INNO3PRO_CVOL_FAULT_TIMER_64MS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_CVOL_FAULT_TIMER_64MS\~ 3}}
\par
{\bkmkstart AAAAAAAACI}
{\bkmkend AAAAAAAACI}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constant Voltage Only Fault Timer Set to 64ms \par
}{
Definition at line 308 of file Config.h.}\par
}
{\xe \v INNO3PRO_CVOL_FAULT_TIMER_8MS\:Config.h}
{\xe \v Config.h\:INNO3PRO_CVOL_FAULT_TIMER_8MS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_CVOL_FAULT_TIMER_8MS\~ 0}}
\par
{\bkmkstart AAAAAAAACF}
{\bkmkend AAAAAAAACF}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constant Voltage Only Fault Timer Set to 8ms \par
}{
Definition at line 299 of file Config.h.}\par
}
{\xe \v INNO3PRO_CVOL_TIMER\:Config.h}
{\xe \v Config.h\:INNO3PRO_CVOL_TIMER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_CVOL_TIMER\~ 0x2A}}
\par
{\bkmkstart AAAAAAAADP}
{\bkmkend AAAAAAAADP}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constant Voltage Fault Timer Register \par
}{
Definition at line 428 of file Config.h.}\par
}
{\xe \v INNO3PRO_DEFAULT_CC_ASSERT_LEVEL\:Config.h}
{\xe \v Config.h\:INNO3PRO_DEFAULT_CC_ASSERT_LEVEL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_DEFAULT_CC_ASSERT_LEVEL\~ (float)(5.1)}}
\par
{\bkmkstart AAAAAAAAGP}
{\bkmkend AAAAAAAAGP}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 723 of file Config.h.}\par
}
{\xe \v INNO3PRO_DEFAULT_CDC_ASSERT_LEVEL\:Config.h}
{\xe \v Config.h\:INNO3PRO_DEFAULT_CDC_ASSERT_LEVEL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_DEFAULT_CDC_ASSERT_LEVEL\~ (float)(300)}}
\par
{\bkmkstart AAAAAAAAGO}
{\bkmkend AAAAAAAAGO}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 722 of file Config.h.}\par
}
{\xe \v INNO3PRO_DEFAULT_CV_SET_PT_LEVEL\:Config.h}
{\xe \v Config.h\:INNO3PRO_DEFAULT_CV_SET_PT_LEVEL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_DEFAULT_CV_SET_PT_LEVEL\~ (float)(5)}}
\par
{\bkmkstart AAAAAAAAGL}
{\bkmkend AAAAAAAAGL}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 719 of file Config.h.}\par
}
{\xe \v INNO3PRO_DEFAULT_OVA_SET_PT_LEVEL\:Config.h}
{\xe \v Config.h\:INNO3PRO_DEFAULT_OVA_SET_PT_LEVEL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_DEFAULT_OVA_SET_PT_LEVEL\~ (float)(6.2)}}
\par
{\bkmkstart AAAAAAAAGM}
{\bkmkend AAAAAAAAGM}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 720 of file Config.h.}\par
}
{\xe \v INNO3PRO_DEFAULT_UVA_SET_PT_LEVEL\:Config.h}
{\xe \v Config.h\:INNO3PRO_DEFAULT_UVA_SET_PT_LEVEL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_DEFAULT_UVA_SET_PT_LEVEL\~ (float)(3)}}
\par
{\bkmkstart AAAAAAAAGN}
{\bkmkend AAAAAAAAGN}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 721 of file Config.h.}\par
}
{\xe \v INNO3PRO_DEFAULT_UVL_CONTROL_LOGIC\:Config.h}
{\xe \v Config.h\:INNO3PRO_DEFAULT_UVL_CONTROL_LOGIC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_DEFAULT_UVL_CONTROL_LOGIC\~ (float)(0)}}
\par
{\bkmkstart AAAAAAAAGS}
{\bkmkend AAAAAAAAGS}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 726 of file Config.h.}\par
}
{\xe \v INNO3PRO_DEFAULT_VBEN_CONTROL_LOGIC\:Config.h}
{\xe \v Config.h\:INNO3PRO_DEFAULT_VBEN_CONTROL_LOGIC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_DEFAULT_VBEN_CONTROL_LOGIC\~ (float)(0)}}
\par
{\bkmkstart AAAAAAAAGR}
{\bkmkend AAAAAAAAGR}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 725 of file Config.h.}\par
}
{\xe \v INNO3PRO_DEFAULT_VKP_ASSERT_LEVEL\:Config.h}
{\xe \v Config.h\:INNO3PRO_DEFAULT_VKP_ASSERT_LEVEL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_DEFAULT_VKP_ASSERT_LEVEL\~ (float)(7)}}
\par
{\bkmkstart AAAAAAAAGQ}
{\bkmkend AAAAAAAAGQ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 724 of file Config.h.}\par
}
{\xe \v INNO3PRO_FAST_VI_CMD\:Config.h}
{\xe \v Config.h\:INNO3PRO_FAST_VI_CMD}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_FAST_VI_CMD\~ 0x8C}}
\par
{\bkmkstart AAAAAAAADB}
{\bkmkend AAAAAAAADB}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Speed of Output CV/CC Update Register \par
}{
Definition at line 385 of file Config.h.}\par
}
{\xe \v INNO3PRO_FASTVI_UPDATE_LIMIT_DISABLE\:Config.h}
{\xe \v Config.h\:INNO3PRO_FASTVI_UPDATE_LIMIT_DISABLE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_FASTVI_UPDATE_LIMIT_DISABLE\~ true}}
\par
{\bkmkstart AAAAAAAABG}
{\bkmkend AAAAAAAABG}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fast VI Command Disable \par
}{
Definition at line 208 of file Config.h.}\par
}
{\xe \v INNO3PRO_FASTVI_UPDATE_LIMIT_ENABLE\:Config.h}
{\xe \v Config.h\:INNO3PRO_FASTVI_UPDATE_LIMIT_ENABLE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_FASTVI_UPDATE_LIMIT_ENABLE\~ false}}
\par
{\bkmkstart AAAAAAAABF}
{\bkmkend AAAAAAAABF}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fast VI Command Enable \par
}{
Definition at line 205 of file Config.h.}\par
}
{\xe \v INNO3PRO_FULL_RANGE_RSENSE_VOLTAGE\:Config.h}
{\xe \v Config.h\:INNO3PRO_FULL_RANGE_RSENSE_VOLTAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_FULL_RANGE_RSENSE_VOLTAGE\~ (float)(31.1)}}
\par
{\bkmkstart AAAAAAAAGB}
{\bkmkend AAAAAAAAGB}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Current Sense Resistor Full Range Voltage in mV \par
}{
Definition at line 682 of file Config.h.}\par
}
{\xe \v INNO3PRO_FW_VERSION_MAJOR\:Config.h}
{\xe \v Config.h\:INNO3PRO_FW_VERSION_MAJOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_FW_VERSION_MAJOR\~ '0','1'}}
\par
{\bkmkstart AAAAAAAAAB}
{\bkmkend AAAAAAAAAB}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Firmware Version for Major Code Changes \par
}{
Definition at line 54 of file Config.h.}\par
}
{\xe \v INNO3PRO_FW_VERSION_MINOR\:Config.h}
{\xe \v Config.h\:INNO3PRO_FW_VERSION_MINOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_FW_VERSION_MINOR\~ '0','0'}}
\par
{\bkmkstart AAAAAAAAAC}
{\bkmkend AAAAAAAAAC}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Firmware Version for Minor Code Changes \par
}{
Definition at line 57 of file Config.h.}\par
}
{\xe \v INNO3PRO_FW_VERSION_TEST\:Config.h}
{\xe \v Config.h\:INNO3PRO_FW_VERSION_TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_FW_VERSION_TEST\~ '0','0'}}
\par
{\bkmkstart AAAAAAAAAD}
{\bkmkend AAAAAAAAAD}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Firmware Version for Test Codes \par
}{
Definition at line 60 of file Config.h.}\par
}
{\xe \v INNO3PRO_INTERRUPT\:Config.h}
{\xe \v Config.h\:INNO3PRO_INTERRUPT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_INTERRUPT\~ 0x2C}}
\par
{\bkmkstart AAAAAAAADQ}
{\bkmkend AAAAAAAADQ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Interrupt Mask Register \par
}{
Definition at line 431 of file Config.h.}\par
}
{\xe \v INNO3PRO_INTERRUPT_BPS_CURR_LO_FAULT_MASK\:Config.h}
{\xe \v Config.h\:INNO3PRO_INTERRUPT_BPS_CURR_LO_FAULT_MASK}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_INTERRUPT_BPS_CURR_LO_FAULT_MASK\~ 0x20}}
\par
{\bkmkstart AAAAAAAACK}
{\bkmkend AAAAAAAACK}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Interrupt Mask for BPS Current Latch-off Fault \par
}{
Definition at line 316 of file Config.h.}\par
}
{\xe \v INNO3PRO_INTERRUPT_CONTROL_S_MASK\:Config.h}
{\xe \v Config.h\:INNO3PRO_INTERRUPT_CONTROL_S_MASK}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_INTERRUPT_CONTROL_S_MASK\~ 0x40}}
\par
{\bkmkstart AAAAAAAACJ}
{\bkmkend AAAAAAAACJ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Interrupt Mask for Control Secondary Fault \par
}{
Definition at line 313 of file Config.h.}\par
}
{\xe \v INNO3PRO_INTERRUPT_CVO_PKLOAD_TIMER_MASK\:Config.h}
{\xe \v Config.h\:INNO3PRO_INTERRUPT_CVO_PKLOAD_TIMER_MASK}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_INTERRUPT_CVO_PKLOAD_TIMER_MASK\~ 0x10}}
\par
{\bkmkstart AAAAAAAACL}
{\bkmkend AAAAAAAACL}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Interrupt Mask for CVO Mode Peak Load Timer Fault \par
}{
Definition at line 319 of file Config.h.}\par
}
{\xe \v INNO3PRO_INTERRUPT_ISSC_MASK\:Config.h}
{\xe \v Config.h\:INNO3PRO_INTERRUPT_ISSC_MASK}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_INTERRUPT_ISSC_MASK\~ 0x08}}
\par
{\bkmkstart AAAAAAAACM}
{\bkmkend AAAAAAAACM}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Interrupt Mask for IS-Pin Short Fault \par
}{
Definition at line 322 of file Config.h.}\par
}
{\xe \v INNO3PRO_INTERRUPT_VOUT_OV_MASK\:Config.h}
{\xe \v Config.h\:INNO3PRO_INTERRUPT_VOUT_OV_MASK}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_INTERRUPT_VOUT_OV_MASK\~ 0x01}}
\par
{\bkmkstart AAAAAAAACO}
{\bkmkend AAAAAAAACO}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Interrupt Mask for Overvoltage Fault \par
}{
Definition at line 328 of file Config.h.}\par
}
{\xe \v INNO3PRO_INTERRUPT_VOUT_UV_MASK\:Config.h}
{\xe \v Config.h\:INNO3PRO_INTERRUPT_VOUT_UV_MASK}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_INTERRUPT_VOUT_UV_MASK\~ 0x02}}
\par
{\bkmkstart AAAAAAAACN}
{\bkmkend AAAAAAAACN}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Interrupt Mask for Undervoltage Fault \par
}{
Definition at line 325 of file Config.h.}\par
}
{\xe \v INNO3PRO_ISSC\:Config.h}
{\xe \v Config.h\:INNO3PRO_ISSC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_ISSC\~ 0xA2}}
\par
{\bkmkstart AAAAAAAADL}
{\bkmkend AAAAAAAADL}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
IS-Pin Short Fault Response and Detection Frequency Register \par
}{
Definition at line 416 of file Config.h.}\par
}
{\xe \v INNO3PRO_ISSC_FAULT_RESPONSE_AUTORESTART\:Config.h}
{\xe \v Config.h\:INNO3PRO_ISSC_FAULT_RESPONSE_AUTORESTART}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_ISSC_FAULT_RESPONSE_AUTORESTART\~ 2}}
\par
{\bkmkstart AAAAAAAABP}
{\bkmkend AAAAAAAABP}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
IS-Pin Short Fault Response Set to Auto-Restart \par
}{
Definition at line 241 of file Config.h.}\par
}
{\xe \v INNO3PRO_ISSC_FAULT_RESPONSE_LATCHOFF\:Config.h}
{\xe \v Config.h\:INNO3PRO_ISSC_FAULT_RESPONSE_LATCHOFF}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_ISSC_FAULT_RESPONSE_LATCHOFF\~ 1}}
\par
{\bkmkstart AAAAAAAABO}
{\bkmkend AAAAAAAABO}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
IS-Pin Short Fault Response Set to Latch-Off \par
}{
Definition at line 238 of file Config.h.}\par
}
{\xe \v INNO3PRO_ISSC_FAULT_RESPONSE_NORESPONSE\:Config.h}
{\xe \v Config.h\:INNO3PRO_ISSC_FAULT_RESPONSE_NORESPONSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_ISSC_FAULT_RESPONSE_NORESPONSE\~ 0}}
\par
{\bkmkstart AAAAAAAABN}
{\bkmkend AAAAAAAABN}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
IS-Pin Short Fault Response Set to No Response \par
}{
Definition at line 235 of file Config.h.}\par
}
{\xe \v INNO3PRO_ISSC_FREQ_THRESHOLD_30KHZ\:Config.h}
{\xe \v Config.h\:INNO3PRO_ISSC_FREQ_THRESHOLD_30KHZ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_ISSC_FREQ_THRESHOLD_30KHZ\~ 1}}
\par
{\bkmkstart AAAAAAAABR}
{\bkmkend AAAAAAAABR}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
IS-Pin Short Frequency Detection Threshold at 30Khz \par
}{
Definition at line 249 of file Config.h.}\par
}
{\xe \v INNO3PRO_ISSC_FREQ_THRESHOLD_40KHZ\:Config.h}
{\xe \v Config.h\:INNO3PRO_ISSC_FREQ_THRESHOLD_40KHZ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_ISSC_FREQ_THRESHOLD_40KHZ\~ 2}}
\par
{\bkmkstart AAAAAAAABS}
{\bkmkend AAAAAAAABS}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
IS-Pin Short Frequency Detection Threshold at 40Khz \par
}{
Definition at line 252 of file Config.h.}\par
}
{\xe \v INNO3PRO_ISSC_FREQ_THRESHOLD_50KHZ\:Config.h}
{\xe \v Config.h\:INNO3PRO_ISSC_FREQ_THRESHOLD_50KHZ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_ISSC_FREQ_THRESHOLD_50KHZ\~ 0}}
\par
{\bkmkstart AAAAAAAABQ}
{\bkmkend AAAAAAAABQ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
IS-Pin Short Frequency Detection Threshold at 50Khz \par
}{
Definition at line 246 of file Config.h.}\par
}
{\xe \v INNO3PRO_ISSC_FREQ_THRESHOLD_60KHZ\:Config.h}
{\xe \v Config.h\:INNO3PRO_ISSC_FREQ_THRESHOLD_60KHZ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_ISSC_FREQ_THRESHOLD_60KHZ\~ 3}}
\par
{\bkmkstart AAAAAAAABT}
{\bkmkend AAAAAAAABT}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
IS-Pin Short Frequency Detection Threshold at 60Khz \par
}{
Definition at line 255 of file Config.h.}\par
}
{\xe \v INNO3PRO_LOAD_DISCHARGE_DISABLE\:Config.h}
{\xe \v Config.h\:INNO3PRO_LOAD_DISCHARGE_DISABLE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_LOAD_DISCHARGE_DISABLE\~ false}}
\par
{\bkmkstart AAAAAAAABC}
{\bkmkend AAAAAAAABC}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Load Discharge Enable \par
}{
Definition at line 192 of file Config.h.}\par
}
{\xe \v INNO3PRO_LOAD_DISCHARGE_ENABLE\:Config.h}
{\xe \v Config.h\:INNO3PRO_LOAD_DISCHARGE_ENABLE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_LOAD_DISCHARGE_ENABLE\~ true}}
\par
{\bkmkstart AAAAAAAABB}
{\bkmkend AAAAAAAABB}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Load Discharge Enable \par
}{
Definition at line 189 of file Config.h.}\par
}
{\xe \v INNO3PRO_LOOP_SPEED_1\:Config.h}
{\xe \v Config.h\:INNO3PRO_LOOP_SPEED_1}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_LOOP_SPEED_1\~ 0x32}}
\par
{\bkmkstart AAAAAAAADT}
{\bkmkend AAAAAAAADT}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Loop Speed 1 \par
}{
Definition at line 441 of file Config.h.}\par
}
{\xe \v INNO3PRO_LOOP_SPEED_2\:Config.h}
{\xe \v Config.h\:INNO3PRO_LOOP_SPEED_2}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_LOOP_SPEED_2\~ 0x34}}
\par
{\bkmkstart AAAAAAAADU}
{\bkmkend AAAAAAAADU}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Loop Speed 2 \par
}{
Definition at line 444 of file Config.h.}\par
}
{\xe \v INNO3PRO_LOOPSPEED1_DEFAULT\:Config.h}
{\xe \v Config.h\:INNO3PRO_LOOPSPEED1_DEFAULT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_LOOPSPEED1_DEFAULT\~ 0x281E}}
\par
{\bkmkstart AAAAAAAACT}
{\bkmkend AAAAAAAACT}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Loop Speed 1 Default Settings \par
}{
Definition at line 349 of file Config.h.}\par
}
{\xe \v INNO3PRO_LOOPSPEED1_RECOMMENDED\:Config.h}
{\xe \v Config.h\:INNO3PRO_LOOPSPEED1_RECOMMENDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_LOOPSPEED1_RECOMMENDED\~ 0x140A}}
\par
{\bkmkstart AAAAAAAACU}
{\bkmkend AAAAAAAACU}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Loop Speed 1 Recommended Settings \par
}{
Definition at line 352 of file Config.h.}\par
}
{\xe \v INNO3PRO_LOOPSPEED2_DEFAULT\:Config.h}
{\xe \v Config.h\:INNO3PRO_LOOPSPEED2_DEFAULT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_LOOPSPEED2_DEFAULT\~ 0x08C8}}
\par
{\bkmkstart AAAAAAAACV}
{\bkmkend AAAAAAAACV}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Loop Speed 2 Default Settings \par
}{
Definition at line 357 of file Config.h.}\par
}
{\xe \v INNO3PRO_LOOPSPEED2_RECOMMENDED\:Config.h}
{\xe \v Config.h\:INNO3PRO_LOOPSPEED2_RECOMMENDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_LOOPSPEED2_RECOMMENDED\~ 0x0F84}}
\par
{\bkmkstart AAAAAAAACW}
{\bkmkend AAAAAAAACW}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Loop Speed 2 Recommended Settings \par
}{
Definition at line 360 of file Config.h.}\par
}
{\xe \v INNO3PRO_OTP\:Config.h}
{\xe \v Config.h\:INNO3PRO_OTP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_OTP\~ 0xAE}}
\par
{\bkmkstart AAAAAAAADR}
{\bkmkend AAAAAAAADR}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Secondary Over-Temperature Fault Hysteresis Register \par
}{
Definition at line 435 of file Config.h.}\par
}
{\xe \v INNO3PRO_OTP_FAULT_HYST_40DEG\:Config.h}
{\xe \v Config.h\:INNO3PRO_OTP_FAULT_HYST_40DEG}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_OTP_FAULT_HYST_40DEG\~ 0}}
\par
{\bkmkstart AAAAAAAACP}
{\bkmkend AAAAAAAACP}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Over Temperature Fault Hysteresis Set to 40 Degrees Celsius \par
}{
Definition at line 333 of file Config.h.}\par
}
{\xe \v INNO3PRO_OTP_FAULT_HYST_60DEG\:Config.h}
{\xe \v Config.h\:INNO3PRO_OTP_FAULT_HYST_60DEG}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_OTP_FAULT_HYST_60DEG\~ 1}}
\par
{\bkmkstart AAAAAAAACQ}
{\bkmkend AAAAAAAACQ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Over Temperature Fault Hysteresis Set to 60 Degrees Celsius \par
}{
Definition at line 336 of file Config.h.}\par
}
{\xe \v INNO3PRO_OV_PERCENTAGE_MULT\:Config.h}
{\xe \v Config.h\:INNO3PRO_OV_PERCENTAGE_MULT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_OV_PERCENTAGE_MULT\~ (float)(1.24)}}
\par
{\bkmkstart AAAAAAAAGF}
{\bkmkend AAAAAAAAGF}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Percentage Setting: 124% of CV \par
}{
Definition at line 694 of file Config.h.}\par
}
{\xe \v INNO3PRO_OV_SET_PT_MULT\:Config.h}
{\xe \v Config.h\:INNO3PRO_OV_SET_PT_MULT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_OV_SET_PT_MULT\~ (float)(10)}}
\par
{\bkmkstart AAAAAAAAGH}
{\bkmkend AAAAAAAAGH}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Multiplier for OverVoltage Step Size of 100mv/LSB \par
}{
Definition at line 700 of file Config.h.}\par
}
{\xe \v INNO3PRO_OVA\:Config.h}
{\xe \v Config.h\:INNO3PRO_OVA}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_OVA\~ 0x92}}
\par
{\bkmkstart AAAAAAAADE}
{\bkmkend AAAAAAAADE}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Over-Voltage Threshold Register \par
}{
Definition at line 394 of file Config.h.}\par
}
{\xe \v INNO3PRO_OVL\:Config.h}
{\xe \v Config.h\:INNO3PRO_OVL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_OVL\~ 0x1C}}
\par
{\bkmkstart AAAAAAAADJ}
{\bkmkend AAAAAAAADJ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Over Voltage Fault Response Register \par
}{
Definition at line 409 of file Config.h.}\par
}
{\xe \v INNO3PRO_OVL_FAULT_RESPONSE_AUTORESTART\:Config.h}
{\xe \v Config.h\:INNO3PRO_OVL_FAULT_RESPONSE_AUTORESTART}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_OVL_FAULT_RESPONSE_AUTORESTART\~ 2}}
\par
{\bkmkstart AAAAAAAABJ}
{\bkmkend AAAAAAAABJ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Overvoltage Fault Response Set to Auto-Restart \par
}{
Definition at line 219 of file Config.h.}\par
}
{\xe \v INNO3PRO_OVL_FAULT_RESPONSE_LATCHOFF\:Config.h}
{\xe \v Config.h\:INNO3PRO_OVL_FAULT_RESPONSE_LATCHOFF}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_OVL_FAULT_RESPONSE_LATCHOFF\~ 1}}
\par
{\bkmkstart AAAAAAAABI}
{\bkmkend AAAAAAAABI}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Overvoltage Fault Response Set to Latch-Off \par
}{
Definition at line 216 of file Config.h.}\par
}
{\xe \v INNO3PRO_OVL_FAULT_RESPONSE_NORESPONSE\:Config.h}
{\xe \v Config.h\:INNO3PRO_OVL_FAULT_RESPONSE_NORESPONSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_OVL_FAULT_RESPONSE_NORESPONSE\~ 0}}
\par
{\bkmkstart AAAAAAAABH}
{\bkmkend AAAAAAAABH}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Overvoltage Fault Response Set to No Response \par
}{
Definition at line 213 of file Config.h.}\par
}
{\xe \v INNO3PRO_READ0\:Config.h}
{\xe \v Config.h\:INNO3PRO_READ0}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_READ0\~ 0x00}}
\par
{\bkmkstart AAAAAAAADV}
{\bkmkend AAAAAAAADV}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Revision ID Telemetry Register \par
}{
Definition at line 457 of file Config.h.}\par
}
{\xe \v INNO3PRO_READ1\:Config.h}
{\xe \v Config.h\:INNO3PRO_READ1}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_READ1\~ 0x02}}
\par
{\bkmkstart AAAAAAAADW}
{\bkmkend AAAAAAAADW}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Output Voltage Set-Point Telemetry Register \par
}{
Definition at line 460 of file Config.h.}\par
}
{\xe \v INNO3PRO_READ10\:Config.h}
{\xe \v Config.h\:INNO3PRO_READ10}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_READ10\~ 0x14}}
\par
{\bkmkstart AAAAAAAAEE}
{\bkmkend AAAAAAAAEE}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
INNTERRUPT,CONTROL_S,VDIS,HIGH_FSW,OTP,VOUT2PCT,VOUT10PCT, ISSC, CCSC VOUT_UV,VOUT_OV Telemetry Register \par
}{
Definition at line 486 of file Config.h.}\par
}
{\xe \v INNO3PRO_READ11\:Config.h}
{\xe \v Config.h\:INNO3PRO_READ11}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_READ11\~ 0x16}}
\par
{\bkmkstart AAAAAAAAEF}
{\bkmkend AAAAAAAAEF}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
AR_CVO,AR_ISSC,CCSC,VOUT_OV,VOUT_UV,LO,LO_CVO,PSU_OFF,LO_ISSC, LO_CCSC,LO_VOUT_OV, LO_VOUT_UV, BPS_OV Telemetry Register \par
}{
Definition at line 490 of file Config.h.}\par
}
{\xe \v INNO3PRO_READ12\:Config.h}
{\xe \v Config.h\:INNO3PRO_READ12}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_READ12\~ 0x18}}
\par
{\bkmkstart AAAAAAAAEG}
{\bkmkend AAAAAAAAEG}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Interrupts Telemetry Register \par
}{
Definition at line 493 of file Config.h.}\par
}
{\xe \v INNO3PRO_READ13\:Config.h}
{\xe \v Config.h\:INNO3PRO_READ13}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_READ13\~ 0x1A}}
\par
{\bkmkstart AAAAAAAAEH}
{\bkmkend AAAAAAAAEH}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Average Measured Output Current Telemetry Register \par
}{
Definition at line 496 of file Config.h.}\par
}
{\xe \v INNO3PRO_READ14\:Config.h}
{\xe \v Config.h\:INNO3PRO_READ14}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_READ14\~ 0x1C}}
\par
{\bkmkstart AAAAAAAAEI}
{\bkmkend AAAAAAAAEI}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Average Measured Output Voltage Telemetry Register \par
}{
Definition at line 499 of file Config.h.}\par
}
{\xe \v INNO3PRO_READ15\:Config.h}
{\xe \v Config.h\:INNO3PRO_READ15}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_READ15\~ 0x5C}}
\par
{\bkmkstart AAAAAAAAEJ}
{\bkmkend AAAAAAAAEJ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Voltage DAC Telemetry Register \par
}{
Definition at line 502 of file Config.h.}\par
}
{\xe \v INNO3PRO_READ2\:Config.h}
{\xe \v Config.h\:INNO3PRO_READ2}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_READ2\~ 0x04}}
\par
{\bkmkstart AAAAAAAADX}
{\bkmkend AAAAAAAADX}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Under-Voltage Threshold Telemetry Register \par
}{
Definition at line 463 of file Config.h.}\par
}
{\xe \v INNO3PRO_READ3\:Config.h}
{\xe \v Config.h\:INNO3PRO_READ3}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_READ3\~ 0x06}}
\par
{\bkmkstart AAAAAAAADY}
{\bkmkend AAAAAAAADY}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Over-Voltage Threshold Telemetry Register \par
}{
Definition at line 466 of file Config.h.}\par
}
{\xe \v INNO3PRO_READ4\:Config.h}
{\xe \v Config.h\:INNO3PRO_READ4}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_READ4\~ 0x08}}
\par
{\bkmkstart AAAAAAAADZ}
{\bkmkend AAAAAAAADZ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
VBEN,BLEEDER,PSUOFF,FSTVIC,CVO,OTP,CDC Telemetry Register \par
}{
Definition at line 469 of file Config.h.}\par
}
{\xe \v INNO3PRO_READ5\:Config.h}
{\xe \v Config.h\:INNO3PRO_READ5}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_READ5\~ 0x0A}}
\par
{\bkmkstart AAAAAAAAEA}
{\bkmkend AAAAAAAAEA}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constant Current , Constant Power Telemetry Register \par
}{
Definition at line 472 of file Config.h.}\par
}
{\xe \v INNO3PRO_READ6\:Config.h}
{\xe \v Config.h\:INNO3PRO_READ6}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_READ6\~ 0x0C}}
\par
{\bkmkstart AAAAAAAAEB}
{\bkmkend AAAAAAAAEB}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
OVL,UVL,CCSL,ISSC,UVLTIMER,WDTIMER,CVMODE,CVTIMER Telemetry Register \par
}{
Definition at line 476 of file Config.h.}\par
}
{\xe \v INNO3PRO_READ7\:Config.h}
{\xe \v Config.h\:INNO3PRO_READ7}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_READ7\~ 0x0E}}
\par
{\bkmkstart AAAAAAAAEC}
{\bkmkend AAAAAAAAEC}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Measured Output Current Telemetry Register \par
}{
Definition at line 479 of file Config.h.}\par
}
{\xe \v INNO3PRO_READ9\:Config.h}
{\xe \v Config.h\:INNO3PRO_READ9}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_READ9\~ 0x12}}
\par
{\bkmkstart AAAAAAAAED}
{\bkmkend AAAAAAAAED}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Measured Output Voltage Telemetry Register \par
}{
Definition at line 482 of file Config.h.}\par
}
{\xe \v INNO3PRO_READ_CV_MODE_BITSHIFT\:Config.h}
{\xe \v Config.h\:INNO3PRO_READ_CV_MODE_BITSHIFT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_READ_CV_MODE_BITSHIFT\~ 2}}
\par
{\bkmkstart AAAAAAAAAV}
{\bkmkend AAAAAAAAAV}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constant Voltage Only Mode Bit Shift Count \par
}{
Definition at line 156 of file Config.h.}\par
}
{\xe \v INNO3PRO_READ_CV_MODE_TIMER_BITSHIFT\:Config.h}
{\xe \v Config.h\:INNO3PRO_READ_CV_MODE_TIMER_BITSHIFT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_READ_CV_MODE_TIMER_BITSHIFT\~ 0}}
\par
{\bkmkstart AAAAAAAAAW}
{\bkmkend AAAAAAAAAW}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constant Voltage Only Mode Timer Bit Shift Count \par
}{
Definition at line 159 of file Config.h.}\par
}
{\xe \v INNO3PRO_READ_ISSC_SHORT_BITSHIFT\:Config.h}
{\xe \v Config.h\:INNO3PRO_READ_ISSC_SHORT_BITSHIFT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_READ_ISSC_SHORT_BITSHIFT\~ 8}}
\par
{\bkmkstart AAAAAAAAAS}
{\bkmkend AAAAAAAAAS}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
IS-Pin Short Fault Bit Shift Count \par
}{
Definition at line 147 of file Config.h.}\par
}
{\xe \v INNO3PRO_READ_LOOP_SPEED_1\:Config.h}
{\xe \v Config.h\:INNO3PRO_READ_LOOP_SPEED_1}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_READ_LOOP_SPEED_1\~ 0x20}}
\par
{\bkmkstart AAAAAAAAEK}
{\bkmkend AAAAAAAAEK}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Loop Speed 1 Telemetry Register \par
}{
Definition at line 505 of file Config.h.}\par
}
{\xe \v INNO3PRO_READ_LOOP_SPEED_2\:Config.h}
{\xe \v Config.h\:INNO3PRO_READ_LOOP_SPEED_2}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_READ_LOOP_SPEED_2\~ 0x22}}
\par
{\bkmkstart AAAAAAAAEL}
{\bkmkend AAAAAAAAEL}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Loop Speed 2 Telemetry Register \par
}{
Definition at line 508 of file Config.h.}\par
}
{\xe \v INNO3PRO_READ_OV_FAULT_BITSHIFT\:Config.h}
{\xe \v Config.h\:INNO3PRO_READ_OV_FAULT_BITSHIFT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_READ_OV_FAULT_BITSHIFT\~ 14}}
\par
{\bkmkstart AAAAAAAAAQ}
{\bkmkend AAAAAAAAAQ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Overvoltage Fault Bit Shift Count \par
}{
Definition at line 141 of file Config.h.}\par
}
{\xe \v INNO3PRO_READ_UV_FAULT_BITSHIFT\:Config.h}
{\xe \v Config.h\:INNO3PRO_READ_UV_FAULT_BITSHIFT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_READ_UV_FAULT_BITSHIFT\~ 12}}
\par
{\bkmkstart AAAAAAAAAR}
{\bkmkend AAAAAAAAAR}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Undervoltage Fault Bit Shift Count \par
}{
Definition at line 144 of file Config.h.}\par
}
{\xe \v INNO3PRO_READ_UVL_TIMER_BITSHIFT\:Config.h}
{\xe \v Config.h\:INNO3PRO_READ_UVL_TIMER_BITSHIFT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_READ_UVL_TIMER_BITSHIFT\~ 6}}
\par
{\bkmkstart AAAAAAAAAT}
{\bkmkend AAAAAAAAAT}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Undervoltage Fault Timer Bit Shift Count \par
}{
Definition at line 150 of file Config.h.}\par
}
{\xe \v INNO3PRO_READ_WATCHDOG_TIMER_BITSHIFT\:Config.h}
{\xe \v Config.h\:INNO3PRO_READ_WATCHDOG_TIMER_BITSHIFT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_READ_WATCHDOG_TIMER_BITSHIFT\~ 4}}
\par
{\bkmkstart AAAAAAAAAU}
{\bkmkend AAAAAAAAAU}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Watchdog Timer Bit Shift Count \par
}{
Definition at line 153 of file Config.h.}\par
}
{\xe \v INNO3PRO_RSENSE\:Config.h}
{\xe \v Config.h\:INNO3PRO_RSENSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_RSENSE\~ (float)(5.25)}}
\par
{\bkmkstart AAAAAAAAGA}
{\bkmkend AAAAAAAAGA}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Current Sense Resistor in milli Ohm \par
}{
Definition at line 679 of file Config.h.}\par
}
{\xe \v INNO3PRO_TURN_OFF_PSU\:Config.h}
{\xe \v Config.h\:INNO3PRO_TURN_OFF_PSU}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_TURN_OFF_PSU\~ 0x8A}}
\par
{\bkmkstart AAAAAAAADA}
{\bkmkend AAAAAAAADA}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Latch-off Device Register \par
}{
Definition at line 382 of file Config.h.}\par
}
{\xe \v INNO3PRO_TURN_OFF_PSU_DISABLE\:Config.h}
{\xe \v Config.h\:INNO3PRO_TURN_OFF_PSU_DISABLE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_TURN_OFF_PSU_DISABLE\~ false}}
\par
{\bkmkstart AAAAAAAABE}
{\bkmkend AAAAAAAABE}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Latch Off Device Disable \par
}{
Definition at line 200 of file Config.h.}\par
}
{\xe \v INNO3PRO_TURN_OFF_PSU_ENABLE\:Config.h}
{\xe \v Config.h\:INNO3PRO_TURN_OFF_PSU_ENABLE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_TURN_OFF_PSU_ENABLE\~ true}}
\par
{\bkmkstart AAAAAAAABD}
{\bkmkend AAAAAAAABD}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Latch Off Device Enable \par
}{
Definition at line 197 of file Config.h.}\par
}
{\xe \v INNO3PRO_UV_PERCENTAGE_MULT\:Config.h}
{\xe \v Config.h\:INNO3PRO_UV_PERCENTAGE_MULT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_UV_PERCENTAGE_MULT\~ (float)(0.72)}}
\par
{\bkmkstart AAAAAAAAGG}
{\bkmkend AAAAAAAAGG}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Percentage Setting: 72% of CV \par
}{
Definition at line 697 of file Config.h.}\par
}
{\xe \v INNO3PRO_UV_SET_PT_MULT\:Config.h}
{\xe \v Config.h\:INNO3PRO_UV_SET_PT_MULT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_UV_SET_PT_MULT\~ (float)(10)}}
\par
{\bkmkstart AAAAAAAAGI}
{\bkmkend AAAAAAAAGI}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Multiplier for UnderVoltage Step Size of 100mv/LSB \par
}{
Definition at line 703 of file Config.h.}\par
}
{\xe \v INNO3PRO_UVA\:Config.h}
{\xe \v Config.h\:INNO3PRO_UVA}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_UVA\~ 0x94}}
\par
{\bkmkstart AAAAAAAADF}
{\bkmkend AAAAAAAADF}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Under-Voltage Threshold Register \par
}{
Definition at line 397 of file Config.h.}\par
}
{\xe \v INNO3PRO_UVL\:Config.h}
{\xe \v Config.h\:INNO3PRO_UVL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_UVL\~ 0x9E}}
\par
{\bkmkstart AAAAAAAADK}
{\bkmkend AAAAAAAADK}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Under Voltage Fault Response Register \par
}{
Definition at line 412 of file Config.h.}\par
}
{\xe \v INNO3PRO_UVL_FAULT_RESPONSE_AUTORESTART\:Config.h}
{\xe \v Config.h\:INNO3PRO_UVL_FAULT_RESPONSE_AUTORESTART}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_UVL_FAULT_RESPONSE_AUTORESTART\~ 0}}
\par
{\bkmkstart AAAAAAAABK}
{\bkmkend AAAAAAAABK}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Undervoltage Fault Response Set to Auto-Restart \par
}{
Definition at line 224 of file Config.h.}\par
}
{\xe \v INNO3PRO_UVL_FAULT_RESPONSE_LATCHOFF\:Config.h}
{\xe \v Config.h\:INNO3PRO_UVL_FAULT_RESPONSE_LATCHOFF}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_UVL_FAULT_RESPONSE_LATCHOFF\~ 1}}
\par
{\bkmkstart AAAAAAAABL}
{\bkmkend AAAAAAAABL}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Undervoltage Fault Response Set to Latch-Off \par
}{
Definition at line 227 of file Config.h.}\par
}
{\xe \v INNO3PRO_UVL_FAULT_RESPONSE_NORESPONSE\:Config.h}
{\xe \v Config.h\:INNO3PRO_UVL_FAULT_RESPONSE_NORESPONSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_UVL_FAULT_RESPONSE_NORESPONSE\~ 2}}
\par
{\bkmkstart AAAAAAAABM}
{\bkmkend AAAAAAAABM}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Undervoltage Fault Response Set to No Response \par
}{
Definition at line 230 of file Config.h.}\par
}
{\xe \v INNO3PRO_UVL_FAULT_TIMER_16MS\:Config.h}
{\xe \v Config.h\:INNO3PRO_UVL_FAULT_TIMER_16MS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_UVL_FAULT_TIMER_16MS\~ 1}}
\par
{\bkmkstart AAAAAAAABV}
{\bkmkend AAAAAAAABV}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Undervoltage Fault Timer Set to 16ms \par
}{
Definition at line 263 of file Config.h.}\par
}
{\xe \v INNO3PRO_UVL_FAULT_TIMER_32MS\:Config.h}
{\xe \v Config.h\:INNO3PRO_UVL_FAULT_TIMER_32MS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_UVL_FAULT_TIMER_32MS\~ 2}}
\par
{\bkmkstart AAAAAAAABW}
{\bkmkend AAAAAAAABW}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Undervoltage Fault Timer Set to 32ms \par
}{
Definition at line 266 of file Config.h.}\par
}
{\xe \v INNO3PRO_UVL_FAULT_TIMER_64MS\:Config.h}
{\xe \v Config.h\:INNO3PRO_UVL_FAULT_TIMER_64MS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_UVL_FAULT_TIMER_64MS\~ 3}}
\par
{\bkmkstart AAAAAAAABX}
{\bkmkend AAAAAAAABX}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Undervoltage Fault Timer Set to 64ms \par
}{
Definition at line 269 of file Config.h.}\par
}
{\xe \v INNO3PRO_UVL_FAULT_TIMER_8MS\:Config.h}
{\xe \v Config.h\:INNO3PRO_UVL_FAULT_TIMER_8MS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_UVL_FAULT_TIMER_8MS\~ 0}}
\par
{\bkmkstart AAAAAAAABU}
{\bkmkend AAAAAAAABU}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Undervoltage Fault Timer Set to 8ms \par
}{
Definition at line 260 of file Config.h.}\par
}
{\xe \v INNO3PRO_UVL_TIMER\:Config.h}
{\xe \v Config.h\:INNO3PRO_UVL_TIMER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_UVL_TIMER\~ 0xA4}}
\par
{\bkmkstart AAAAAAAADM}
{\bkmkend AAAAAAAADM}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
UVL Fault Timer Register \par
}{
Definition at line 419 of file Config.h.}\par
}
{\xe \v INNO3PRO_VBEN\:Config.h}
{\xe \v Config.h\:INNO3PRO_VBEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_VBEN\~ 0x04}}
\par
{\bkmkstart AAAAAAAACX}
{\bkmkend AAAAAAAACX}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Series Bus Switch Control Register \par
}{
Definition at line 373 of file Config.h.}\par
}
{\xe \v INNO3PRO_VBUS_DISABLE\:Config.h}
{\xe \v Config.h\:INNO3PRO_VBUS_DISABLE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_VBUS_DISABLE\~ false}}
\par
{\bkmkstart AAAAAAAAAY}
{\bkmkend AAAAAAAAAY}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Series Bus Switch Disable \par
}{
Definition at line 176 of file Config.h.}\par
}
{\xe \v INNO3PRO_VBUS_ENABLE\:Config.h}
{\xe \v Config.h\:INNO3PRO_VBUS_ENABLE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_VBUS_ENABLE\~ true}}
\par
{\bkmkstart AAAAAAAAAX}
{\bkmkend AAAAAAAAAX}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Series Bus Switch Enable \par
}{
Definition at line 173 of file Config.h.}\par
}
{\xe \v INNO3PRO_VDIS\:Config.h}
{\xe \v Config.h\:INNO3PRO_VDIS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_VDIS\~ 0x08}}
\par
{\bkmkstart AAAAAAAACZ}
{\bkmkend AAAAAAAACZ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Load (VBUS) Discharge Register \par
}{
Definition at line 379 of file Config.h.}\par
}
{\xe \v INNO3PRO_VKP\:Config.h}
{\xe \v Config.h\:INNO3PRO_VKP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_VKP\~ 0x1A}}
\par
{\bkmkstart AAAAAAAADI}
{\bkmkend AAAAAAAADI}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constant Output Power Knee Voltage Register \par
}{
Definition at line 406 of file Config.h.}\par
}
{\xe \v INNO3PRO_VKP_SET_PT_MULT\:Config.h}
{\xe \v Config.h\:INNO3PRO_VKP_SET_PT_MULT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_VKP_SET_PT_MULT\~ (float)(10)}}
\par
{\bkmkstart AAAAAAAAGK}
{\bkmkend AAAAAAAAGK}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Multiplier for Constant Output Power Knee Voltage Step Size of 100mv/LSB \par
}{
Definition at line 709 of file Config.h.}\par
}
{\xe \v INNO3PRO_WATCHDOG_TIMER\:Config.h}
{\xe \v Config.h\:INNO3PRO_WATCHDOG_TIMER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_WATCHDOG_TIMER\~ 0x26}}
\par
{\bkmkstart AAAAAAAADN}
{\bkmkend AAAAAAAADN}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Communication Rate Monitor Register \par
}{
Definition at line 422 of file Config.h.}\par
}
{\xe \v INNO3PRO_WATCHDOG_TIMER_1000MS\:Config.h}
{\xe \v Config.h\:INNO3PRO_WATCHDOG_TIMER_1000MS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_WATCHDOG_TIMER_1000MS\~ 2}}
\par
{\bkmkstart AAAAAAAACA}
{\bkmkend AAAAAAAACA}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Watchdog Timer Set to 1 sec \par
}{
Definition at line 280 of file Config.h.}\par
}
{\xe \v INNO3PRO_WATCHDOG_TIMER_2000MS\:Config.h}
{\xe \v Config.h\:INNO3PRO_WATCHDOG_TIMER_2000MS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_WATCHDOG_TIMER_2000MS\~ 3}}
\par
{\bkmkstart AAAAAAAACB}
{\bkmkend AAAAAAAACB}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Watchdog Timer Set to 2 sec \par
}{
Definition at line 283 of file Config.h.}\par
}
{\xe \v INNO3PRO_WATCHDOG_TIMER_500MS\:Config.h}
{\xe \v Config.h\:INNO3PRO_WATCHDOG_TIMER_500MS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_WATCHDOG_TIMER_500MS\~ 1}}
\par
{\bkmkstart AAAAAAAABZ}
{\bkmkend AAAAAAAABZ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Watchdog Timer Set to 0.5 sec \par
}{
Definition at line 277 of file Config.h.}\par
}
{\xe \v INNO3PRO_WATCHDOG_TIMER_NOWATCHDOG\:Config.h}
{\xe \v Config.h\:INNO3PRO_WATCHDOG_TIMER_NOWATCHDOG}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INNO3PRO_WATCHDOG_TIMER_NOWATCHDOG\~ 0}}
\par
{\bkmkstart AAAAAAAABY}
{\bkmkend AAAAAAAABY}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Watchdog Timer Set to 0 sec (No-Watchdog) \par
}{
Definition at line 274 of file Config.h.}\par
}
{\xe \v RD_LSB\:Config.h}
{\xe \v Config.h\:RD_LSB}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define RD_LSB\~ 0}}
\par
{\bkmkstart AAAAAAAAAP}
{\bkmkend AAAAAAAAAP}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
InnoSwitch3-Pro Read LSB \par
}{
Definition at line 127 of file Config.h.}\par
}
{\xe \v RD_MSB\:Config.h}
{\xe \v Config.h\:RD_MSB}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define RD_MSB\~ 1}}
\par
{\bkmkstart AAAAAAAAAO}
{\bkmkend AAAAAAAAAO}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
InnoSwitch3-Pro Read MSB \par
}{
Definition at line 124 of file Config.h.}\par
}
{\xe \v READ10_Reg_CONTROL_S\:Config.h}
{\xe \v Config.h\:READ10_Reg_CONTROL_S}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define READ10_Reg_CONTROL_S\~ 14}}
\par
{\bkmkstart AAAAAAAAET}
{\bkmkend AAAAAAAAET}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
System Ready Signal \par
}{
Definition at line 552 of file Config.h.}\par
}
{\xe \v READ10_Reg_HIGH_FSW\:Config.h}
{\xe \v Config.h\:READ10_Reg_HIGH_FSW}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define READ10_Reg_HIGH_FSW\~ 12}}
\par
{\bkmkstart AAAAAAAAEV}
{\bkmkend AAAAAAAAEV}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Switching Frequency High? \par
}{
Definition at line 558 of file Config.h.}\par
}
{\xe \v READ10_Reg_INTERRUPT_EN\:Config.h}
{\xe \v Config.h\:READ10_Reg_INTERRUPT_EN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define READ10_Reg_INTERRUPT_EN\~ 15}}
\par
{\bkmkstart AAAAAAAAES}
{\bkmkend AAAAAAAAES}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Interrupt Enable \par
}{
Definition at line 549 of file Config.h.}\par
}
{\xe \v READ10_Reg_ISSC\:Config.h}
{\xe \v Config.h\:READ10_Reg_ISSC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define READ10_Reg_ISSC\~ 3}}
\par
{\bkmkstart AAAAAAAAEZ}
{\bkmkend AAAAAAAAEZ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
IS-pin Short Circuit Detected \par
}{
Definition at line 570 of file Config.h.}\par
}
{\xe \v READ10_Reg_OTP\:Config.h}
{\xe \v Config.h\:READ10_Reg_OTP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define READ10_Reg_OTP\~ 9}}
\par
{\bkmkstart AAAAAAAAEW}
{\bkmkend AAAAAAAAEW}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Over Temperature Protection \par
}{
Definition at line 561 of file Config.h.}\par
}
{\xe \v READ10_Reg_VDIS\:Config.h}
{\xe \v Config.h\:READ10_Reg_VDIS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define READ10_Reg_VDIS\~ 13}}
\par
{\bkmkstart AAAAAAAAEU}
{\bkmkend AAAAAAAAEU}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Output Discharge \par
}{
Definition at line 555 of file Config.h.}\par
}
{\xe \v READ10_Reg_VOUT10PCT\:Config.h}
{\xe \v Config.h\:READ10_Reg_VOUT10PCT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define READ10_Reg_VOUT10PCT\~ 4}}
\par
{\bkmkstart AAAAAAAAEY}
{\bkmkend AAAAAAAAEY}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
VOUTADC > 1.1*Vout \par
}{
Definition at line 567 of file Config.h.}\par
}
{\xe \v READ10_Reg_VOUT2PCT\:Config.h}
{\xe \v Config.h\:READ10_Reg_VOUT2PCT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define READ10_Reg_VOUT2PCT\~ 5}}
\par
{\bkmkstart AAAAAAAAEX}
{\bkmkend AAAAAAAAEX}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
2% Bleeder Enabled \par
}{
Definition at line 564 of file Config.h.}\par
}
{\xe \v READ10_Reg_VOUT_OV\:Config.h}
{\xe \v Config.h\:READ10_Reg_VOUT_OV}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define READ10_Reg_VOUT_OV\~ 0}}
\par
{\bkmkstart AAAAAAAAFB}
{\bkmkend AAAAAAAAFB}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Output Voltage OV Fault \par
}{
Definition at line 576 of file Config.h.}\par
}
{\xe \v READ10_Reg_VOUT_UV\:Config.h}
{\xe \v Config.h\:READ10_Reg_VOUT_UV}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define READ10_Reg_VOUT_UV\~ 1}}
\par
{\bkmkstart AAAAAAAAFA}
{\bkmkend AAAAAAAAFA}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Output Voltage UV Fault \par
}{
Definition at line 573 of file Config.h.}\par
}
{\xe \v READ11_Reg_ar_CCSC\:Config.h}
{\xe \v Config.h\:READ11_Reg_ar_CCSC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define READ11_Reg_ar_CCSC\~ 11}}
\par
{\bkmkstart AAAAAAAAFE}
{\bkmkend AAAAAAAAFE}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Output Short-Circuit AR \par
}{
Definition at line 594 of file Config.h.}\par
}
{\xe \v READ11_Reg_ar_CV\:Config.h}
{\xe \v Config.h\:READ11_Reg_ar_CV}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define READ11_Reg_ar_CV\~ 15}}
\par
{\bkmkstart AAAAAAAAFC}
{\bkmkend AAAAAAAAFC}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
CVO Mode AR \par
}{
Definition at line 588 of file Config.h.}\par
}
{\xe \v READ11_Reg_ar_ISSC\:Config.h}
{\xe \v Config.h\:READ11_Reg_ar_ISSC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define READ11_Reg_ar_ISSC\~ 12}}
\par
{\bkmkstart AAAAAAAAFD}
{\bkmkend AAAAAAAAFD}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
IS-pin Short Circuit AR \par
}{
Definition at line 591 of file Config.h.}\par
}
{\xe \v READ11_Reg_ar_VOUT_OV\:Config.h}
{\xe \v Config.h\:READ11_Reg_ar_VOUT_OV}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define READ11_Reg_ar_VOUT_OV\~ 10}}
\par
{\bkmkstart AAAAAAAAFF}
{\bkmkend AAAAAAAAFF}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Output Voltage OV AR \par
}{
Definition at line 597 of file Config.h.}\par
}
{\xe \v READ11_Reg_ar_VOUT_UV\:Config.h}
{\xe \v Config.h\:READ11_Reg_ar_VOUT_UV}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define READ11_Reg_ar_VOUT_UV\~ 9}}
\par
{\bkmkstart AAAAAAAAFG}
{\bkmkend AAAAAAAAFG}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Output Voltage UV AR \par
}{
Definition at line 600 of file Config.h.}\par
}
{\xe \v READ11_Reg_BPS_OV\:Config.h}
{\xe \v Config.h\:READ11_Reg_BPS_OV}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define READ11_Reg_BPS_OV\~ 0}}
\par
{\bkmkstart AAAAAAAAFN}
{\bkmkend AAAAAAAAFN}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
BPS-pin LO \par
}{
Definition at line 621 of file Config.h.}\par
}
{\xe \v READ11_Reg_LO\:Config.h}
{\xe \v Config.h\:READ11_Reg_LO}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define READ11_Reg_LO\~ 7}}
\par
{\bkmkstart AAAAAAAAFH}
{\bkmkend AAAAAAAAFH}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Latch-Off (LO) Occurred \par
}{
Definition at line 603 of file Config.h.}\par
}
{\xe \v READ11_Reg_Lo_CVO\:Config.h}
{\xe \v Config.h\:READ11_Reg_Lo_CVO}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define READ11_Reg_Lo_CVO\~ 6}}
\par
{\bkmkstart AAAAAAAAFI}
{\bkmkend AAAAAAAAFI}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
CVO Mode LO \par
}{
Definition at line 606 of file Config.h.}\par
}
{\xe \v READ11_Reg_Lo_ISSC\:Config.h}
{\xe \v Config.h\:READ11_Reg_Lo_ISSC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define READ11_Reg_Lo_ISSC\~ 4}}
\par
{\bkmkstart AAAAAAAAFK}
{\bkmkend AAAAAAAAFK}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
IS-pin Short Circuit LO \par
}{
Definition at line 612 of file Config.h.}\par
}
{\xe \v READ11_Reg_Lo_VOUT_OV\:Config.h}
{\xe \v Config.h\:READ11_Reg_Lo_VOUT_OV}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define READ11_Reg_Lo_VOUT_OV\~ 2}}
\par
{\bkmkstart AAAAAAAAFL}
{\bkmkend AAAAAAAAFL}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Output Voltage OV LO \par
}{
Definition at line 615 of file Config.h.}\par
}
{\xe \v READ11_Reg_Lo_VOUT_UV\:Config.h}
{\xe \v Config.h\:READ11_Reg_Lo_VOUT_UV}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define READ11_Reg_Lo_VOUT_UV\~ 1}}
\par
{\bkmkstart AAAAAAAAFM}
{\bkmkend AAAAAAAAFM}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Output Voltage UV LO \par
}{
Definition at line 618 of file Config.h.}\par
}
{\xe \v READ11_Reg_PSUOFF\:Config.h}
{\xe \v Config.h\:READ11_Reg_PSUOFF}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define READ11_Reg_PSUOFF\~ 5}}
\par
{\bkmkstart AAAAAAAAFJ}
{\bkmkend AAAAAAAAFJ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
PSU Turn-Off CMD Received \par
}{
Definition at line 609 of file Config.h.}\par
}
{\xe \v READ12_Reg_CCAR_MASK\:Config.h}
{\xe \v Config.h\:READ12_Reg_CCAR_MASK}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define READ12_Reg_CCAR_MASK\~ 12}}
\par
{\bkmkstart AAAAAAAAFQ}
{\bkmkend AAAAAAAAFQ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Interrupts Masks \par
}{
Definition at line 639 of file Config.h.}\par
}
{\xe \v READ12_Reg_CCAR_STATUS\:Config.h}
{\xe \v Config.h\:READ12_Reg_CCAR_STATUS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define READ12_Reg_CCAR_STATUS\~ 4}}
\par
{\bkmkstart AAAAAAAAFW}
{\bkmkend AAAAAAAAFW}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Interrupts Status \par
}{
Definition at line 657 of file Config.h.}\par
}
{\xe \v READ12_Reg_CONTROL_S_MASK\:Config.h}
{\xe \v Config.h\:READ12_Reg_CONTROL_S_MASK}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define READ12_Reg_CONTROL_S_MASK\~ 14}}
\par
{\bkmkstart AAAAAAAAFO}
{\bkmkend AAAAAAAAFO}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Interrupts Masks \par
}{
Definition at line 633 of file Config.h.}\par
}
{\xe \v READ12_Reg_CONTROL_S_STATUS\:Config.h}
{\xe \v Config.h\:READ12_Reg_CONTROL_S_STATUS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define READ12_Reg_CONTROL_S_STATUS\~ 6}}
\par
{\bkmkstart AAAAAAAAFU}
{\bkmkend AAAAAAAAFU}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Interrupts Status \par
}{
Definition at line 651 of file Config.h.}\par
}
{\xe \v READ12_Reg_ISSC_MASK\:Config.h}
{\xe \v Config.h\:READ12_Reg_ISSC_MASK}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define READ12_Reg_ISSC_MASK\~ 11}}
\par
{\bkmkstart AAAAAAAAFR}
{\bkmkend AAAAAAAAFR}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Interrupts Masks \par
}{
Definition at line 642 of file Config.h.}\par
}
{\xe \v READ12_Reg_ISSC_STATUS\:Config.h}
{\xe \v Config.h\:READ12_Reg_ISSC_STATUS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define READ12_Reg_ISSC_STATUS\~ 3}}
\par
{\bkmkstart AAAAAAAAFX}
{\bkmkend AAAAAAAAFX}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Interrupts Status \par
}{
Definition at line 660 of file Config.h.}\par
}
{\xe \v READ12_Reg_LO_Fault_MASK\:Config.h}
{\xe \v Config.h\:READ12_Reg_LO_Fault_MASK}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define READ12_Reg_LO_Fault_MASK\~ 13}}
\par
{\bkmkstart AAAAAAAAFP}
{\bkmkend AAAAAAAAFP}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Interrupts Masks \par
}{
Definition at line 636 of file Config.h.}\par
}
{\xe \v READ12_Reg_LO_FAULT_STATUS\:Config.h}
{\xe \v Config.h\:READ12_Reg_LO_FAULT_STATUS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define READ12_Reg_LO_FAULT_STATUS\~ 5}}
\par
{\bkmkstart AAAAAAAAFV}
{\bkmkend AAAAAAAAFV}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Interrupts Status \par
}{
Definition at line 654 of file Config.h.}\par
}
{\xe \v READ12_Reg_VOUT_OV_MASK\:Config.h}
{\xe \v Config.h\:READ12_Reg_VOUT_OV_MASK}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define READ12_Reg_VOUT_OV_MASK\~ 8}}
\par
{\bkmkstart AAAAAAAAFT}
{\bkmkend AAAAAAAAFT}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Interrupts Masks \par
}{
Definition at line 648 of file Config.h.}\par
}
{\xe \v READ12_Reg_VOUT_OV_STATUS\:Config.h}
{\xe \v Config.h\:READ12_Reg_VOUT_OV_STATUS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define READ12_Reg_VOUT_OV_STATUS\~ 0}}
\par
{\bkmkstart AAAAAAAAFZ}
{\bkmkend AAAAAAAAFZ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Interrupts Status \par
}{
Definition at line 666 of file Config.h.}\par
}
{\xe \v READ12_Reg_VOUT_UV_MASK\:Config.h}
{\xe \v Config.h\:READ12_Reg_VOUT_UV_MASK}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define READ12_Reg_VOUT_UV_MASK\~ 9}}
\par
{\bkmkstart AAAAAAAAFS}
{\bkmkend AAAAAAAAFS}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Interrupts Masks \par
}{
Definition at line 645 of file Config.h.}\par
}
{\xe \v READ12_Reg_VOUT_UV_STATUS\:Config.h}
{\xe \v Config.h\:READ12_Reg_VOUT_UV_STATUS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define READ12_Reg_VOUT_UV_STATUS\~ 1}}
\par
{\bkmkstart AAAAAAAAFY}
{\bkmkend AAAAAAAAFY}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Interrupts Status \par
}{
Definition at line 663 of file Config.h.}\par
}
{\xe \v READ4_Reg_BLEEDER\:Config.h}
{\xe \v Config.h\:READ4_Reg_BLEEDER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define READ4_Reg_BLEEDER\~ 13}}
\par
{\bkmkstart AAAAAAAAEN}
{\bkmkend AAAAAAAAEN}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Minimum Load \par
}{
Definition at line 525 of file Config.h.}\par
}
{\xe \v READ4_Reg_CVO\:Config.h}
{\xe \v Config.h\:READ4_Reg_CVO}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define READ4_Reg_CVO\~ 10}}
\par
{\bkmkstart AAAAAAAAEQ}
{\bkmkend AAAAAAAAEQ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constant-Voltage Mode Only \par
}{
Definition at line 534 of file Config.h.}\par
}
{\xe \v READ4_Reg_FSTVIC\:Config.h}
{\xe \v Config.h\:READ4_Reg_FSTVIC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define READ4_Reg_FSTVIC\~ 11}}
\par
{\bkmkstart AAAAAAAAEP}
{\bkmkend AAAAAAAAEP}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fast VI Commands \par
}{
Definition at line 531 of file Config.h.}\par
}
{\xe \v READ4_Reg_OTP\:Config.h}
{\xe \v Config.h\:READ4_Reg_OTP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define READ4_Reg_OTP\~ 9}}
\par
{\bkmkstart AAAAAAAAER}
{\bkmkend AAAAAAAAER}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Over-Temperature Protection \par
}{
Definition at line 537 of file Config.h.}\par
}
{\xe \v READ4_Reg_PSUOFF\:Config.h}
{\xe \v Config.h\:READ4_Reg_PSUOFF}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define READ4_Reg_PSUOFF\~ 12}}
\par
{\bkmkstart AAAAAAAAEO}
{\bkmkend AAAAAAAAEO}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Turn PSU Off \par
}{
Definition at line 528 of file Config.h.}\par
}
{\xe \v READ4_Reg_VBEN\:Config.h}
{\xe \v Config.h\:READ4_Reg_VBEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define READ4_Reg_VBEN\~ 14}}
\par
{\bkmkstart AAAAAAAAEM}
{\bkmkend AAAAAAAAEM}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
VBUS Switch Enable \par
}{
Definition at line 522 of file Config.h.}\par
}
{\xe \v set_bit\:Config.h}
{\xe \v Config.h\:set_bit}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define set_bit( ADDRESS,  BIT)\~ (ADDRESS |= (1<<BIT))}}
\par
{\bkmkstart AAAAAAAAAH}
{\bkmkend AAAAAAAAAH}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Set a bit in a byte \par
}{
Definition at line 90 of file Config.h.}\par
}
{\xe \v sig_max\:Config.h}
{\xe \v Config.h\:sig_max}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define sig_max( sig,  max)\~ ((sig > max) ? sig = max : 0)}}
\par
{\bkmkstart AAAAAAAAAF}
{\bkmkend AAAAAAAAAF}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constrain the parameter up to Minimum Value Only \par
}{
Definition at line 74 of file Config.h.}\par
}
{\xe \v sig_min\:Config.h}
{\xe \v Config.h\:sig_min}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define sig_min( sig,  min)\~ ((sig < min) ? sig = min : 0)}}
\par
{\bkmkstart AAAAAAAAAG}
{\bkmkend AAAAAAAAAG}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constrain the parameter up to Maximum Value Only \par
}{
Definition at line 77 of file Config.h.}\par
}
{\xe \v sig_minmax\:Config.h}
{\xe \v Config.h\:sig_minmax}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define sig_minmax( sig,  min,  max)\~ ((sig < min) ? sig = min : (sig > max) ? sig = max : 0)}}
\par
{\bkmkstart AAAAAAAAAE}
{\bkmkend AAAAAAAAAE}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constrain the parameter up to Minimum and Maximum Value Only \par
}{
Definition at line 71 of file Config.h.}\par
}
{\xe \v test_bit\:Config.h}
{\xe \v Config.h\:test_bit}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define test_bit( ADDRESS,  BIT)\~ (ADDRESS & (1<<BIT))}}
\par
{\bkmkstart AAAAAAAAAK}
{\bkmkend AAAAAAAAAK}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test a bit in a byte if it Set \par
}{
Definition at line 99 of file Config.h.}\par
}
{\xe \v toggle_bit\:Config.h}
{\xe \v Config.h\:toggle_bit}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define toggle_bit( ADDRESS,  BIT)\~ (ADDRESS ^= (1<<BIT))}}
\par
{\bkmkstart AAAAAAAAAJ}
{\bkmkend AAAAAAAAAJ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Toggle a bit in a byte \par
}{
Definition at line 96 of file Config.h.}\par
}
{\xe \v WR_BYTE\:Config.h}
{\xe \v Config.h\:WR_BYTE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WR_BYTE\~ 0x02}}
\par
{\bkmkstart AAAAAAAAAN}
{\bkmkend AAAAAAAAAN}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
InnoSwitch3-Pro I2C Buffer Length (Address, LSB) \par
}{
Definition at line 121 of file Config.h.}\par
}
{\xe \v WR_WORD\:Config.h}
{\xe \v Config.h\:WR_WORD}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WR_WORD\~ 0x03}}
\par
{\bkmkstart AAAAAAAAAM}
{\bkmkend AAAAAAAAAM}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
InnoSwitch3-Pro I2C Buffer Length (Address, LSB, MSB) \par
}{
Definition at line 118 of file Config.h.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
C:/Users/csales/Documents/Arduino/libraries/InnoPro_Arduino/Drv_i2c.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v C:/Users/csales/Documents/Arduino/libraries/InnoPro_Arduino/Drv_i2c.cpp}
{\xe \v C:/Users/csales/Documents/Arduino/libraries/InnoPro_Arduino/Drv_i2c.cpp}
{\bkmkstart AAAAAAAAHS}
{\bkmkend AAAAAAAAHS}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This is the source file containing the driver APIs for I2C. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "WProgram.h"}\par
{\f2 #include <Wire.h>}\par
{\f2 #include "Drv_i2c.h"}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This is the source file containing the driver APIs for I2C. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid CS - PIPH Applications\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Date:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid August 3, 2018\par
}Copyright (C) 2018 Power Integrations. All rights reserved.\par
DISCLAIMER: YOU AGREE AND ACKNOWLEDGE THE SOFTWARE CODE LIBRARIES ARE PROVIDED ON AN "AS IS" BASIS AND THAT YOUR USE OR RELIANCE UPON THE SOFTWARE IS AT YOUR OWN RISK AND DISCRETION. POWER INTEGRATIONS HEREBY DISCLAIM ANY AND ALL REPRESENTATIONS, WARRANTIES AND GUARANTIES REGARDING THE SOFTWARE. POWER INTEGRATIONS MAKES NO WARRANTY HEREIN AND SPECIFICALLY DISCLAIMS ALL WARRANTIES INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT TO THIRD PARTIES. FURTHERMORE, POWER INTEGRATIONS MAKES NO WARRANTY THAT\par
1) THE SOFTWARE CODE LIBRARIES WILL MEET YOUR REQUIREMENTS 2) THE SOFTWARE CODE LIBRARIES WILL BE ACCURATE, RELIBALE, OR ERROR-FREE.\par
DAMAGES DISCLAIMER: POWER INTEGRATIONS, WILL NOT UNDER ANY CIRCUMSTANCES, BE LIABLE TO ANY USER FOR ANY DIRECT, INDIRECT, CONSEQUENTIAL, SPECIAL, PUNITIVE, INCIDENTAL DAMAGES, LOST PROFITS OR LOSS OF BUSINESS, WHETHER FORESEEABLE OR UNFORESEEABLE EVEN IF POWER INTEGRATIONS HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES ARISING OUT OF OR RELATED TO USE OF THIS SOFTWARE CODE LIBRARY. \par
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
C:/Users/csales/Documents/Arduino/libraries/InnoPro_Arduino/Drv_i2c.h File Reference\par \pard\plain 
{\tc\tcl2 \v C:/Users/csales/Documents/Arduino/libraries/InnoPro_Arduino/Drv_i2c.h}
{\xe \v C:/Users/csales/Documents/Arduino/libraries/InnoPro_Arduino/Drv_i2c.h}
{\bkmkstart AAAAAAAAHT}
{\bkmkend AAAAAAAAHT}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This is the header file containing the driver APIs for I2C. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "WProgram.h"}\par
{\f2 #include <Wire.h>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHU" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_I2C}}}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This is the header file containing the driver APIs for I2C. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid CS - PIPH Applications\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Date:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid August 3, 2018\par
}Copyright (C) 2018 Power Integrations. All rights reserved.\par
DISCLAIMER: YOU AGREE AND ACKNOWLEDGE THE SOFTWARE CODE LIBRARIES ARE PROVIDED ON AN "AS IS" BASIS AND THAT YOUR USE OR RELIANCE UPON THE SOFTWARE IS AT YOUR OWN RISK AND DISCRETION. POWER INTEGRATIONS HEREBY DISCLAIM ANY AND ALL REPRESENTATIONS, WARRANTIES AND GUARANTIES REGARDING THE SOFTWARE. POWER INTEGRATIONS MAKES NO WARRANTY HEREIN AND SPECIFICALLY DISCLAIMS ALL WARRANTIES INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT TO THIRD PARTIES. FURTHERMORE, POWER INTEGRATIONS MAKES NO WARRANTY THAT\par
1) THE SOFTWARE CODE LIBRARIES WILL MEET YOUR REQUIREMENTS 2) THE SOFTWARE CODE LIBRARIES WILL BE ACCURATE, RELIBALE, OR ERROR-FREE.\par
DAMAGES DISCLAIMER: POWER INTEGRATIONS, WILL NOT UNDER ANY CIRCUMSTANCES, BE LIABLE TO ANY USER FOR ANY DIRECT, INDIRECT, CONSEQUENTIAL, SPECIAL, PUNITIVE, INCIDENTAL DAMAGES, LOST PROFITS OR LOSS OF BUSINESS, WHETHER FORESEEABLE OR UNFORESEEABLE EVEN IF POWER INTEGRATIONS HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES ARISING OUT OF OR RELATED TO USE OF THIS SOFTWARE CODE LIBRARY. \par
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
C:/Users/csales/Documents/Arduino/libraries/InnoPro_Arduino/Drv_Rtc.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v C:/Users/csales/Documents/Arduino/libraries/InnoPro_Arduino/Drv_Rtc.cpp}
{\xe \v C:/Users/csales/Documents/Arduino/libraries/InnoPro_Arduino/Drv_Rtc.cpp}
{\bkmkstart AAAAAAAAHV}
{\bkmkend AAAAAAAAHV}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This is the source file containing the driver APIs for Clock Signals. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "WProgram.h"}\par
{\f2 #include "Drv_Rtc.h"}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This is the source file containing the driver APIs for Clock Signals. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid CS - PIPH Applications\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Date:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid August 3, 2018\par
}Copyright (C) 2018 Power Integrations. All rights reserved.\par
DISCLAIMER: YOU AGREE AND ACKNOWLEDGE THE SOFTWARE CODE LIBRARIES ARE PROVIDED ON AN "AS IS" BASIS AND THAT YOUR USE OR RELIANCE UPON THE SOFTWARE IS AT YOUR OWN RISK AND DISCRETION. POWER INTEGRATIONS HEREBY DISCLAIM ANY AND ALL REPRESENTATIONS, WARRANTIES AND GUARANTIES REGARDING THE SOFTWARE. POWER INTEGRATIONS MAKES NO WARRANTY HEREIN AND SPECIFICALLY DISCLAIMS ALL WARRANTIES INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT TO THIRD PARTIES. FURTHERMORE, POWER INTEGRATIONS MAKES NO WARRANTY THAT\par
1) THE SOFTWARE CODE LIBRARIES WILL MEET YOUR REQUIREMENTS 2) THE SOFTWARE CODE LIBRARIES WILL BE ACCURATE, RELIBALE, OR ERROR-FREE.\par
DAMAGES DISCLAIMER: POWER INTEGRATIONS, WILL NOT UNDER ANY CIRCUMSTANCES, BE LIABLE TO ANY USER FOR ANY DIRECT, INDIRECT, CONSEQUENTIAL, SPECIAL, PUNITIVE, INCIDENTAL DAMAGES, LOST PROFITS OR LOSS OF BUSINESS, WHETHER FORESEEABLE OR UNFORESEEABLE EVEN IF POWER INTEGRATIONS HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES ARISING OUT OF OR RELATED TO USE OF THIS SOFTWARE CODE LIBRARY. \par
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
C:/Users/csales/Documents/Arduino/libraries/InnoPro_Arduino/Drv_Rtc.h File Reference\par \pard\plain 
{\tc\tcl2 \v C:/Users/csales/Documents/Arduino/libraries/InnoPro_Arduino/Drv_Rtc.h}
{\xe \v C:/Users/csales/Documents/Arduino/libraries/InnoPro_Arduino/Drv_Rtc.h}
{\bkmkstart AAAAAAAAHW}
{\bkmkend AAAAAAAAHW}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This is the header file containing the driver APIs for Clock Signals. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "WProgram.h"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHX" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Rtc}}}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This is the header file containing the driver APIs for Clock Signals. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid CS - PIPH Applications\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Date:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid August 3, 2018\par
}Copyright (C) 2018 Power Integrations. All rights reserved.\par
DISCLAIMER: YOU AGREE AND ACKNOWLEDGE THE SOFTWARE CODE LIBRARIES ARE PROVIDED ON AN "AS IS" BASIS AND THAT YOUR USE OR RELIANCE UPON THE SOFTWARE IS AT YOUR OWN RISK AND DISCRETION. POWER INTEGRATIONS HEREBY DISCLAIM ANY AND ALL REPRESENTATIONS, WARRANTIES AND GUARANTIES REGARDING THE SOFTWARE. POWER INTEGRATIONS MAKES NO WARRANTY HEREIN AND SPECIFICALLY DISCLAIMS ALL WARRANTIES INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT TO THIRD PARTIES. FURTHERMORE, POWER INTEGRATIONS MAKES NO WARRANTY THAT\par
1) THE SOFTWARE CODE LIBRARIES WILL MEET YOUR REQUIREMENTS 2) THE SOFTWARE CODE LIBRARIES WILL BE ACCURATE, RELIBALE, OR ERROR-FREE.\par
DAMAGES DISCLAIMER: POWER INTEGRATIONS, WILL NOT UNDER ANY CIRCUMSTANCES, BE LIABLE TO ANY USER FOR ANY DIRECT, INDIRECT, CONSEQUENTIAL, SPECIAL, PUNITIVE, INCIDENTAL DAMAGES, LOST PROFITS OR LOSS OF BUSINESS, WHETHER FORESEEABLE OR UNFORESEEABLE EVEN IF POWER INTEGRATIONS HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES ARISING OUT OF OR RELATED TO USE OF THIS SOFTWARE CODE LIBRARY. \par
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
C:/Users/csales/Documents/Arduino/libraries/InnoPro_Arduino/Inno3Pro.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v C:/Users/csales/Documents/Arduino/libraries/InnoPro_Arduino/Inno3Pro.cpp}
{\xe \v C:/Users/csales/Documents/Arduino/libraries/InnoPro_Arduino/Inno3Pro.cpp}
{\bkmkstart AAAAAAAAHY}
{\bkmkend AAAAAAAAHY}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This is the source file containing the InnoSwitch3-Pro APIs. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "WProgram.h"}\par
{\f2 #include <Wire.h>}\par
{\f2 #include <Config.h>}\par
{\f2 #include <Drv_Rtc.h>}\par
{\f2 #include <Drv_i2c.h>}\par
{\f2 #include "Inno3Pro.h"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHU" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_I2C}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHZ" }{}}{\fldrslt {\cs37\ul\cf2 Inno3ProSend}}}
\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Class instance Declaration. }{
}\par
}}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHX" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Rtc}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIA" }{}}{\fldrslt {\cs37\ul\cf2 Inno3ProTimer}}}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This is the source file containing the InnoSwitch3-Pro APIs. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid CS - PIPH Applications\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Date:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid August 3, 2018\par
}Copyright (C) 2018 Power Integrations. All rights reserved.\par
DISCLAIMER: YOU AGREE AND ACKNOWLEDGE THE SOFTWARE CODE LIBRARIES ARE PROVIDED ON AN "AS IS" BASIS AND THAT YOUR USE OR RELIANCE UPON THE SOFTWARE IS AT YOUR OWN RISK AND DISCRETION. POWER INTEGRATIONS HEREBY DISCLAIM ANY AND ALL REPRESENTATIONS, WARRANTIES AND GUARANTIES REGARDING THE SOFTWARE. POWER INTEGRATIONS MAKES NO WARRANTY HEREIN AND SPECIFICALLY DISCLAIMS ALL WARRANTIES INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT TO THIRD PARTIES. FURTHERMORE, POWER INTEGRATIONS MAKES NO WARRANTY THAT\par
1) THE SOFTWARE CODE LIBRARIES WILL MEET YOUR REQUIREMENTS 2) THE SOFTWARE CODE LIBRARIES WILL BE ACCURATE, RELIBALE, OR ERROR-FREE.\par
DAMAGES DISCLAIMER: POWER INTEGRATIONS, WILL NOT UNDER ANY CIRCUMSTANCES, BE LIABLE TO ANY USER FOR ANY DIRECT, INDIRECT, CONSEQUENTIAL, SPECIAL, PUNITIVE, INCIDENTAL DAMAGES, LOST PROFITS OR LOSS OF BUSINESS, WHETHER FORESEEABLE OR UNFORESEEABLE EVEN IF POWER INTEGRATIONS HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES ARISING OUT OF OR RELATED TO USE OF THIS SOFTWARE CODE LIBRARY. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v Inno3ProSend\:Inno3Pro.cpp}
{\xe \v Inno3Pro.cpp\:Inno3ProSend}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHU" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_I2C}}}
 Inno3ProSend}}
\par
{\bkmkstart AAAAAAAAHZ}
{\bkmkend AAAAAAAAHZ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Class instance Declaration. }}\par
{
Definition at line 48 of file Inno3Pro.cpp.}\par
}
{\xe \v Inno3ProTimer\:Inno3Pro.cpp}
{\xe \v Inno3Pro.cpp\:Inno3ProTimer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHX" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Rtc}}}
 Inno3ProTimer}}
\par
{\bkmkstart AAAAAAAAIA}
{\bkmkend AAAAAAAAIA}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 49 of file Inno3Pro.cpp.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
C:/Users/csales/Documents/Arduino/libraries/InnoPro_Arduino/Inno3Pro.h File Reference\par \pard\plain 
{\tc\tcl2 \v C:/Users/csales/Documents/Arduino/libraries/InnoPro_Arduino/Inno3Pro.h}
{\xe \v C:/Users/csales/Documents/Arduino/libraries/InnoPro_Arduino/Inno3Pro.h}
{\bkmkstart AAAAAAAAIB}
{\bkmkend AAAAAAAAIB}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This is the header file containing the InnoSwitch3-Pro I2C Settings and Control. Includes API for computations related to configuring InnoSwitch3-Pro Registers and Functions to Control the InnoSwitch3-Pro IC. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "WProgram.h"}\par
{\f2 #include <Wire.h>}\par
{\f2 #include <Config.h>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIC" }{}}{\fldrslt {\cs37\ul\cf2 Inno3Pro_Application}}}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This is the header file containing the InnoSwitch3-Pro I2C Settings and Control. Includes API for computations related to configuring InnoSwitch3-Pro Registers and Functions to Control the InnoSwitch3-Pro IC. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid CS - PIPH Applications\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Date:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid August 3, 2018\par
}Copyright (C) 2018 Power Integrations. All rights reserved.\par
This software, including source code, documentation and related materials, is owned by Power Integrations.You may use this software, and any derivatives created by any person or entity by or on your behalf, exclusively with Power Integrations' products. Power Integrations reserves the right to make changes to the Software without notice.Power Integrations does not assume any liability arising out of the use of the Software.\par
Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\par}
THIS SOFTWARE IS PROVIDED BY POWER INTEGRATIONS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, NON-INFRINGEMENT, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,INTELLECTUAL PROPERTY RIGHTS; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. \par
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
C:/Users/csales/Documents/Arduino/libraries/InnoPro_Arduino/Main.dox File Reference\par \pard\plain 
{\tc\tcl2 \v C:/Users/csales/Documents/Arduino/libraries/InnoPro_Arduino/Main.dox}
{\xe \v C:/Users/csales/Documents/Arduino/libraries/InnoPro_Arduino/Main.dox}
{\bkmkstart AAAAAAAAID}
{\bkmkend AAAAAAAAID}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
C:/Users/csales/Documents/Arduino/libraries/InnoPro_Arduino/README.md File Reference\par \pard\plain 
{\tc\tcl2 \v C:/Users/csales/Documents/Arduino/libraries/InnoPro_Arduino/README.md}
{\xe \v C:/Users/csales/Documents/Arduino/libraries/InnoPro_Arduino/README.md}
{\bkmkstart AAAAAAAAIE}
{\bkmkend AAAAAAAAIE}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Example Documentation{\tc \v Example Documentation}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Inno3Pro_Basic.ino\par \pard\plain 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This the Basic example of how to use the library.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid /**\par
    InnoSwitch3-Pro Example Application\par
\par
    Company:    Power Integrations\par
\par
    Summary:    This is to demonstrate the Basic usage of Inno3-Pro Arduino Library          \par
              \par
    Author  :   CS - PIPH Applications   \par
    \par
    Date    :   August 3, 2018\par
   \par
    Copyright (C) 2018 Power Integrations. All rights reserved.\par
\par
    DISCLAIMER: YOU AGREE AND ACKNOWLEDGE THE SOFTWARE CODE LIBRARIES ARE\par
    PROVIDED ON AN "AS IS" BASIS AND THAT YOUR USE OR RELIANCE UPON THE SOFTWARE \par
    IS AT YOUR OWN RISK AND DISCRETION. POWER INTEGRATIONS HEREBY DISCLAIM ANY \par
    AND ALL REPRESENTATIONS, WARRANTIES AND GUARANTIES REGARDING THE SOFTWARE. \par
    POWER INTEGRATIONS MAKES NO WARRANTY HEREIN AND SPECIFICALLY DISCLAIMS ALL \par
    WARRANTIES INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF \par
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT \par
    TO THIRD PARTIES. FURTHERMORE, POWER INTEGRATIONS MAKES NO WARRANTY THAT \par
 \par
    1) THE SOFTWARE CODE LIBRARIES WILL MEET YOUR REQUIREMENTS \par
    2) THE SOFTWARE CODE LIBRARIES WILL BE ACCURATE, RELIBALE, OR ERROR-FREE. \par
\par
    DAMAGES DISCLAIMER: POWER INTEGRATIONS, WILL NOT UNDER ANY CIRCUMSTANCES, \par
    BE LIABLE TO ANY USER FOR ANY DIRECT, INDIRECT, CONSEQUENTIAL, SPECIAL, \par
    PUNITIVE, INCIDENTAL DAMAGES, LOST PROFITS OR LOSS OF BUSINESS, WHETHER \par
    FORESEEABLE OR UNFORESEEABLE EVEN IF POWER INTEGRATIONS HAS BEEN ADVISED \par
    OF THE POSSIBILITY OF SUCH DAMAGES ARISING OUT OF OR RELATED TO USE OF \par
    THIS SOFTWARE CODE LIBRARY.   \par
    \par
 */\par
\par
//Step  1  :  Add the Header Files\par
#include <Drv_Rtc.h>\par
#include <Drv_i2c.h>\par
#include <Inno3Pro.h>\par
#include <Config.h>\par
\par
//Step  2  :  Create the class instance\par
Inno3Pro_Application Inno3ProApp;\par
\par
//Step 3 :  Write Initial Commands to Inno Pro\par
void setup() \par
\{\par
    Inno3ProApp.Inno3Pro_Initialization(); \par
\}\par
\par
//Step 4 :  Call the Functions on the Main Loop \par
void loop()\par
\{\par
      //Control Functions Set-Up\par
      \par
      // 5V, 5.1A , Voltage and Constant Current\par
      Inno3ProApp.Inno3Pro_Write_VI(5 , 5.1);   \par
\par
      // 300mV    , Cable Drop Compesation  \par
      Inno3ProApp.Inno3Pro_Write_Cable_Drop_Comp(300); \par
\par
      // 7V       , Constant Output Power Knee Voltage\par
      Inno3ProApp.Inno3Pro_Write_Volt_Peak(7);  \par
\par
      // ON       , Vbus Enable\par
      Inno3ProApp.Inno3Pro_Vbus_Switch_Control(1);                    \par
\}\par
\par}
 \par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Inno3Pro_Basic_Volts_Amps_OV_UV.ino\par \pard\plain 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This the Basic example of how to use the library.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid /**\par
    InnoSwitch3-Pro Example Application\par
\par
    Company:    Power Integrations\par
\par
    Summary:    This is to demonstrate the Basic usage of Inno3-Pro Arduino Library               \par
              \par
    Author  :   CS - PIPH Applications   \par
    \par
    Date    :   August 3, 2018\par
   \par
    Copyright (C) 2018 Power Integrations. All rights reserved.\par
\par
    DISCLAIMER: YOU AGREE AND ACKNOWLEDGE THE SOFTWARE CODE LIBRARIES ARE\par
    PROVIDED ON AN "AS IS" BASIS AND THAT YOUR USE OR RELIANCE UPON THE SOFTWARE \par
    IS AT YOUR OWN RISK AND DISCRETION. POWER INTEGRATIONS HEREBY DISCLAIM ANY \par
    AND ALL REPRESENTATIONS, WARRANTIES AND GUARANTIES REGARDING THE SOFTWARE. \par
    POWER INTEGRATIONS MAKES NO WARRANTY HEREIN AND SPECIFICALLY DISCLAIMS ALL \par
    WARRANTIES INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF \par
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT \par
    TO THIRD PARTIES. FURTHERMORE, POWER INTEGRATIONS MAKES NO WARRANTY THAT \par
 \par
    1) THE SOFTWARE CODE LIBRARIES WILL MEET YOUR REQUIREMENTS \par
    2) THE SOFTWARE CODE LIBRARIES WILL BE ACCURATE, RELIBALE, OR ERROR-FREE. \par
\par
    DAMAGES DISCLAIMER: POWER INTEGRATIONS, WILL NOT UNDER ANY CIRCUMSTANCES, \par
    BE LIABLE TO ANY USER FOR ANY DIRECT, INDIRECT, CONSEQUENTIAL, SPECIAL, \par
    PUNITIVE, INCIDENTAL DAMAGES, LOST PROFITS OR LOSS OF BUSINESS, WHETHER \par
    FORESEEABLE OR UNFORESEEABLE EVEN IF POWER INTEGRATIONS HAS BEEN ADVISED \par
    OF THE POSSIBILITY OF SUCH DAMAGES ARISING OUT OF OR RELATED TO USE OF \par
    THIS SOFTWARE CODE LIBRARY.   \par
    \par
 */ \par
\par
\par
//Step  1  :  Add the Header Files\par
#include <Drv_Rtc.h>\par
#include <Drv_i2c.h>\par
#include <Inno3Pro.h>\par
#include <Config.h>\par
\par
//Step  2  :  Create the class instance\par
Inno3Pro_Application Inno3ProApp;\par
\par
//Step 3 :  Write Initial Commands to Inno Pro\par
void setup() \par
\{\par
  //Write Initialization\par
    Inno3ProApp.Inno3Pro_Initialization(); \par
\par
  //Set Over Voltage Protection \par
  Inno3ProApp.Inno3Pro_Write_Over_Volts(6.2);\par
\par
  //Set Uncer Voltage Protection \par
  Inno3ProApp.Inno3Pro_Write_Under_Volts(3.6);  \par
\}\par
\par
//Step 4 :  Call the Functions on the Main Loop \par
void loop()\par
\{\par
     //Control Functions Set-Up\par
      \par
    // Main Loop Variable Initialization \par
    float fVolts = 5;                             //Initialize Voltage at 5V\par
    float fAmps = 5.1;                            //Initialize Constant Current at 5.1A \par
    float fCableDropComp = 300;                   //Initialize Cable Drop Compensation to 300mv\par
    float fVoltPeak = 7;                          //Initialize Knee Voltage at 7V \par
    float fVbusEn = 1;                            //Initialize Vbus Enable to at ON       \par
\par
    // Library Call in the Mainloop\par
    Inno3ProApp.Inno3Pro_Write_Amps(fAmps);                     //Set Constant Current\par
    Inno3ProApp.Inno3Pro_Write_Volts(fVolts);                   //Set Voltage\par
    Inno3ProApp.Inno3Pro_Write_Cable_Drop_Comp(fCableDropComp); //Set Cable Drop Compesation         \par
    Inno3ProApp.Inno3Pro_Write_Volt_Peak(fVoltPeak);            //Set Constant Output Power Knee Voltage\par
    Inno3ProApp.Inno3Pro_Vbus_Switch_Control(fVbusEn);          //Set Vbus Enable                    \par
\}\par
\par}
 \par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Inno3Pro_PD_5V_8V_15V_20V.ino\par \pard\plain 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This is an example of how to use the library.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Waveform: } \par}
\par
 {\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Code: } \par}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid /**\par
    InnoSwitch3-Pro Example Application\par
\par
    Company:    Power Integrations\par
\par
    Summary:    This is to demonstrate the Inno3-Pro Arduino Library\par
                Upon Upload initial voltage is set to 5V, then every 5 Seconds\par
                the voltage state will change (5V , 8V, 15V, 20V) And then Process Repeats.\par
              \par
    Author  :   CS - PIPH Applications   \par
    \par
    Date    :   August 3, 2018\par
   \par
    Copyright (C) 2018 Power Integrations. All rights reserved.\par
\par
    DISCLAIMER: YOU AGREE AND ACKNOWLEDGE THE SOFTWARE CODE LIBRARIES ARE\par
    PROVIDED ON AN "AS IS" BASIS AND THAT YOUR USE OR RELIANCE UPON THE SOFTWARE \par
    IS AT YOUR OWN RISK AND DISCRETION. POWER INTEGRATIONS HEREBY DISCLAIM ANY \par
    AND ALL REPRESENTATIONS, WARRANTIES AND GUARANTIES REGARDING THE SOFTWARE. \par
    POWER INTEGRATIONS MAKES NO WARRANTY HEREIN AND SPECIFICALLY DISCLAIMS ALL \par
    WARRANTIES INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF \par
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT \par
    TO THIRD PARTIES. FURTHERMORE, POWER INTEGRATIONS MAKES NO WARRANTY THAT \par
 \par
    1) THE SOFTWARE CODE LIBRARIES WILL MEET YOUR REQUIREMENTS \par
    2) THE SOFTWARE CODE LIBRARIES WILL BE ACCURATE, RELIBALE, OR ERROR-FREE. \par
\par
    DAMAGES DISCLAIMER: POWER INTEGRATIONS, WILL NOT UNDER ANY CIRCUMSTANCES, \par
    BE LIABLE TO ANY USER FOR ANY DIRECT, INDIRECT, CONSEQUENTIAL, SPECIAL, \par
    PUNITIVE, INCIDENTAL DAMAGES, LOST PROFITS OR LOSS OF BUSINESS, WHETHER \par
    FORESEEABLE OR UNFORESEEABLE EVEN IF POWER INTEGRATIONS HAS BEEN ADVISED \par
    OF THE POSSIBILITY OF SUCH DAMAGES ARISING OUT OF OR RELATED TO USE OF \par
    THIS SOFTWARE CODE LIBRARY.   \par
    \par
 */\par
\par
\par
\par
//Step  1  :  Add the Header Files\par
#include <Drv_Rtc.h>\par
#include <Drv_i2c.h>\par
#include <Inno3Pro.h>\par
#include <Config.h>\par
\par
\par
\par
//Step  2  :  Create the class instance\par
Inno3Pro_Rtc Inno3ProClk;\par
Inno3Pro_Application Inno3ProApp;\par
\par
\par
\par
//Step 3 :  Write Initial Commands to Inno Pro\par
void setup() \par
\{\par
    Inno3ProApp.Inno3Pro_Initialization(); \par
\}\par
\par
\par
\par
\par
//Step 4 :  Call the Functions on the Main Loop \par
void loop()\par
\{\par
\par
        // Main Loop Variables\par
        static uint16_t u16_Main_State = 0;                     //Initialize Main State\par
        static uint16_t u16_Request_Timer = 0;                  //Initialize Request Timer  \par
\par
\par
\par
        //Timer Routine For Automatic Activation of  Requests\par
        if(Inno3ProClk.clock_HasTimeElapsedMs(u16_Request_Timer,5000))      //Delay Time\par
        \{\par
    \par
          u16_Main_State++;                                                 //Change State  \par
      \par
          u16_Request_Timer = Inno3ProClk.clock_GetTimeStampMs();           //Reset Timer\par
        \}\par
\par
\par
\par
        // Main Loop States\par
        switch(u16_Main_State)\par
        \{\par
            \par
            case 0:   \par
                      u16_Main_State = 1;  \par
                                                                                                    \par
                      break;\par
              \par
            \par
            case 1:   //Activate 5V Configuration                 \par
                      Inno3ProApp.Inno3Pro_Write_VI(5,5.1);                 // CV = 5V and CC = 5.1A\par
                      Inno3ProApp.Inno3Pro_Write_Cable_Drop_Comp(300);      // CDC  = 300mV    \par
                      Inno3ProApp.Inno3Pro_Write_Volt_Peak(7);              // VKP  = 7V\par
                      Inno3ProApp.Inno3Pro_Vbus_Switch_Control(1);          // VBEN = ON          \par
                      break;\par
\par
          case 2:     //Activate 8V Configuration\par
                      Inno3ProApp.Inno3Pro_Write_VI(8,5.1);                  \par
                      Inno3ProApp.Inno3Pro_Write_Cable_Drop_Comp(300);    \par
                      Inno3ProApp.Inno3Pro_Write_Volt_Peak(7);                   \par
                      break;\par
          \par
          case 3:     //Activate 15V Configuration\par
                      Inno3ProApp.Inno3Pro_Write_VI(15,2,76);                  \par
                      Inno3ProApp.Inno3Pro_Write_Cable_Drop_Comp(300);     \par
                      Inno3ProApp.Inno3Pro_Write_Volt_Peak(7);                       \par
                      break;                   \par
\par
          case 4:     //Activate 20V Configuration\par
                      Inno3ProApp.Inno3Pro_Write_VI(20,2.1);                  \par
                      Inno3ProApp.Inno3Pro_Write_Cable_Drop_Comp(300);     \par
                      Inno3ProApp.Inno3Pro_Write_Volt_Peak(7);                       \par
                      break;    \par
                                  \par
          default:   \par
                      u16_Main_State = 1;                       \par
                      break;  \par
        \}\par
              \par
 \par
\}\par
\par}
 \par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Inno3Pro_Plotter.ino\par \pard\plain 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This is an example of how to use the library.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Plotter Application: } \par}
\par
 {\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Code: } \par}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid /**\par
    InnoSwitch3-Pro Example Application\par
\par
    Company:    Power Integrations\par
\par
    Summary:    This demonstration Uses the Read Volts and Read Amps library\par
                functions of Inno3-Pro and combine it with the Serial Plotter\par
                to show voltage and current active graphs.\par
        \par
                Upon Upload initial voltage is set to 5V, then every 100ms\par
                the voltage will ramp Up by 200mV until it Reaches 20V.\par
                Once 20V was reached, the voltage will ramp down by 200mV every\par
                after 100ms until in goes to 5V. And then Process Repeats\par
\par
    Author  :   CS - PIPH Applications   \par
    \par
    Date    :   August 3, 2018\par
   \par
    Copyright (C) 2018 Power Integrations. All rights reserved.\par
\par
    DISCLAIMER: YOU AGREE AND ACKNOWLEDGE THE SOFTWARE CODE LIBRARIES ARE\par
    PROVIDED ON AN "AS IS" BASIS AND THAT YOUR USE OR RELIANCE UPON THE SOFTWARE \par
    IS AT YOUR OWN RISK AND DISCRETION. POWER INTEGRATIONS HEREBY DISCLAIM ANY \par
    AND ALL REPRESENTATIONS, WARRANTIES AND GUARANTIES REGARDING THE SOFTWARE. \par
    POWER INTEGRATIONS MAKES NO WARRANTY HEREIN AND SPECIFICALLY DISCLAIMS ALL \par
    WARRANTIES INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF \par
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT \par
    TO THIRD PARTIES. FURTHERMORE, POWER INTEGRATIONS MAKES NO WARRANTY THAT \par
 \par
    1) THE SOFTWARE CODE LIBRARIES WILL MEET YOUR REQUIREMENTS \par
    2) THE SOFTWARE CODE LIBRARIES WILL BE ACCURATE, RELIBALE, OR ERROR-FREE. \par
\par
    DAMAGES DISCLAIMER: POWER INTEGRATIONS, WILL NOT UNDER ANY CIRCUMSTANCES, \par
    BE LIABLE TO ANY USER FOR ANY DIRECT, INDIRECT, CONSEQUENTIAL, SPECIAL, \par
    PUNITIVE, INCIDENTAL DAMAGES, LOST PROFITS OR LOSS OF BUSINESS, WHETHER \par
    FORESEEABLE OR UNFORESEEABLE EVEN IF POWER INTEGRATIONS HAS BEEN ADVISED \par
    OF THE POSSIBILITY OF SUCH DAMAGES ARISING OUT OF OR RELATED TO USE OF \par
    THIS SOFTWARE CODE LIBRARY.   \par
    \par
 */ \par
\par
\par
//Step  1  :  Add the Header Files\par
#include <Drv_Rtc.h>\par
#include <Drv_i2c.h>\par
#include <Inno3Pro.h>\par
#include <Config.h>\par
\par
\par
\par
//Step  2  :  Create the class instance\par
Inno3Pro_Rtc Inno3ProClk;\par
Inno3Pro_Application Inno3ProApp;\par
\par
\par
\par
//Step 3 :  Write Initial Commands to Inno Pro\par
void setup() \par
\{\par
  // initialize the serial communication:\par
  Serial.begin(9600);\par
    \par
  Inno3ProApp.Inno3Pro_Initialization(); \par
\}\par
\par
\par
\par
//Step 4 :  Call the Functions on the Main Loop     \par
void loop()\par
\{\par
  \par
        // Main Loop Variables    \par
        static double fVoltInc = 5;                 //Initialize Voltage at 5V\par
        static bool bVoltIncrease = true;           //Initialize Voltage to Increment        \par
        static uint16_t u16_Request_Timer = 0;      //Initialize Request Timer     \par
        \par
        //Read Variables\par
        static float fReadVolt = 0;                 // Temporary Variable for Voltage Reading\par
        static float fReadAmps = 0;                 // Temporary Variable for Current Reading\par
\par
        \par
        //Timer Routine For Automatic Activation of  Requests\par
        if(Inno3ProClk.clock_HasTimeElapsedMs(u16_Request_Timer,100))     //Delay Time 100ms\par
        \{             \par
          \par
            Inno3ProApp.b_Request_Enable = true;                                  //Activate Voltage Change\par
\par
            \par
            fReadVolt = Inno3ProApp.Inno3Pro_Read_Volts();                //Read Volts\par
            Serial.print(fReadVolt);                                      //Print Voltage Reading\par
            \par
            Serial.print("\\t");                                           //For Multiple Graph \par
            \par
            fReadAmps = Inno3ProApp.Inno3Pro_Read_Amps();                 //Read Amps\par
            Serial.println(fReadAmps);                                    //Print Current Reading\par
            \par
            u16_Request_Timer = Inno3ProClk.clock_GetTimeStampMs();        //Reset Timer  \par
        \}        \par
\par
\par
        \par
        //Increment/Decrement Process\par
        if(Inno3ProApp.b_Request_Enable)\par
        \{\par
            if(bVoltIncrease)//Increase Voltage\par
            \{\par
                fVoltInc = fVoltInc + 0.200;        //Increment by 200mV\par
                sig_max(fVoltInc,20);               //20V Max Saturation\par
                if(fVoltInc == 20)                  //if 20V reached,\par
                \{\par
                    bVoltIncrease = false;          //Activate Decrement Process \par
                \}\par
            \}\par
            else  //Decrease Voltage\par
            \{\par
                fVoltInc = fVoltInc -0.200;         //Decrement by 200mV\par
                sig_min(fVoltInc,5);                //5V Min Saturation\par
                if(fVoltInc == 5)                   //if 5V reached,\par
                \{\par
                    bVoltIncrease = true;           //Activate Increment Process \par
                \}                                \par
            \}                             \par
\par
            Inno3ProApp.b_Request_Enable = false;\par
        \}     \par
\par
\par
        //Library Call in the Mainloop\par
        Inno3ProApp.Inno3Pro_Write_VI(fVoltInc,5.1);          //Set Voltage as variable and Set 5.1A current\par
        Inno3ProApp.Inno3Pro_Write_Cable_Drop_Comp(300);           \par
        Inno3ProApp.Inno3Pro_Write_Volt_Peak(7);             \par
        Inno3ProApp.Inno3Pro_Vbus_Switch_Control(1);   \par
                       \par
\}\par
\par}
 \par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Inno3Pro_Ramp.ino\par \pard\plain 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This is an example of how to use the library.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Waveform: } \par}
\par
 {\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Code: } \par}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid /**\par
    InnoSwitch3-Pro Example Application\par
\par
    Company:    Power Integrations\par
\par
    Summary:    This is to demonstrate the Inno3-Pro Arduino Library\par
                Upon Upload initial voltage is set to 5V, then every 1sec\par
                voltage will ramp Up by 10mV until it Reaches 20V.\par
                Once 20V was reached, the voltage will ramp down by 10mV every\par
                after 1sec until in goes to 5V. And then Process Repeats        \par
\par
    Author  :   CS - PIPH Applications   \par
    \par
    Date    :   August 3, 2018\par
   \par
    Copyright (C) 2018 Power Integrations. All rights reserved.\par
\par
    DISCLAIMER: YOU AGREE AND ACKNOWLEDGE THE SOFTWARE CODE LIBRARIES ARE\par
    PROVIDED ON AN "AS IS" BASIS AND THAT YOUR USE OR RELIANCE UPON THE SOFTWARE \par
    IS AT YOUR OWN RISK AND DISCRETION. POWER INTEGRATIONS HEREBY DISCLAIM ANY \par
    AND ALL REPRESENTATIONS, WARRANTIES AND GUARANTIES REGARDING THE SOFTWARE. \par
    POWER INTEGRATIONS MAKES NO WARRANTY HEREIN AND SPECIFICALLY DISCLAIMS ALL \par
    WARRANTIES INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF \par
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT \par
    TO THIRD PARTIES. FURTHERMORE, POWER INTEGRATIONS MAKES NO WARRANTY THAT \par
 \par
    1) THE SOFTWARE CODE LIBRARIES WILL MEET YOUR REQUIREMENTS \par
    2) THE SOFTWARE CODE LIBRARIES WILL BE ACCURATE, RELIBALE, OR ERROR-FREE. \par
\par
    DAMAGES DISCLAIMER: POWER INTEGRATIONS, WILL NOT UNDER ANY CIRCUMSTANCES, \par
    BE LIABLE TO ANY USER FOR ANY DIRECT, INDIRECT, CONSEQUENTIAL, SPECIAL, \par
    PUNITIVE, INCIDENTAL DAMAGES, LOST PROFITS OR LOSS OF BUSINESS, WHETHER \par
    FORESEEABLE OR UNFORESEEABLE EVEN IF POWER INTEGRATIONS HAS BEEN ADVISED \par
    OF THE POSSIBILITY OF SUCH DAMAGES ARISING OUT OF OR RELATED TO USE OF \par
    THIS SOFTWARE CODE LIBRARY.   \par
    \par
 */\par
\par
\par
//Step  1  :  Add the Header Files\par
#include <Drv_Rtc.h>\par
#include <Drv_i2c.h>\par
#include <Inno3Pro.h>\par
#include <Config.h>\par
\par
\par
\par
//Step  2  :  Create the class instance\par
Inno3Pro_Rtc Inno3ProClk;\par
Inno3Pro_Application Inno3ProApp;\par
\par
\par
\par
//Step 3 :  Write Initial Commands to Inno Pro\par
void setup() \par
\{\par
  Inno3ProApp.Inno3Pro_Initialization(); \par
\}\par
\par
\par
\par
//Step 4 :  Call the Functions on the Main Loop     \par
void loop()\par
\{\par
  \par
        // Main Loop Variables    \par
        static double fVoltInc = 5;                 //Initialize Voltage at 5V\par
        static bool bVoltIncrease = true;           //Initialize Voltage to Increment        \par
        static uint16_t u16_Request_Timer = 0;      //Initialize Request Timer     \par
\par
\par
        //Timer Routine For Automatic Activation of  Requests\par
        if(Inno3ProClk.clock_HasTimeElapsedMs(u16_Request_Timer,1000))     //Delay Time 1sec\par
        \{             \par
          \par
            Inno3ProApp.b_Request_Enable = true;                    //Activate Voltage Change\par
            \par
            u16_Request_Timer = Inno3ProClk.clock_GetTimeStampMs();     //Reset Timer  \par
        \}        \par
\par
\par
        \par
        //Increment/Decrement Process\par
        if(Inno3ProApp.b_Request_Enable)\par
        \{\par
            if(bVoltIncrease)//Increase Voltage\par
            \{\par
                fVoltInc = fVoltInc + 0.010;        //Increment by 10mV\par
                sig_max(fVoltInc,20);               //20V Max Saturation\par
                if(fVoltInc == 20)                  //if 20V reached,\par
                \{\par
                    bVoltIncrease = false;          //Activate Decrement Process \par
                \}\par
            \}\par
            else  //Decrease Voltage\par
            \{\par
                fVoltInc = fVoltInc -0.010;         //Decrement by 10mV\par
                sig_min(fVoltInc,5);                //5V Min Saturation\par
                if(fVoltInc == 5)                   //if 5V reached,\par
                \{\par
                    bVoltIncrease = true;           //Activate Increment Process \par
                \}                                \par
            \}                             \par
\par
            Inno3ProApp.b_Request_Enable = false;\par
        \}     \par
\par
\par
        //Library Call in the Mainloop\par
        Inno3ProApp.Inno3Pro_Write_VI(fVoltInc,5.1);          //Set Voltage as variable and Set 5.1A current\par
        Inno3ProApp.Inno3Pro_Write_Cable_Drop_Comp(300);           \par
        Inno3ProApp.Inno3Pro_Write_Volt_Peak(7);             \par
        Inno3ProApp.Inno3Pro_Vbus_Switch_Control(1);   \par
                \par
\}\par
\par}
 \par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Inno3Pro_Serial.ino\par \pard\plain 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This is an example of how to use the library.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Serial Application: } \par}
\par
 {\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Code: } \par}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid /**\par
    InnoSwitch3-Pro Serial Application Source File\par
\par
    Company :   Power Integrations\par
\par
    Summary :   This demonstration file uses SerialEvent Arduino Example and\par
                Inno Pro Library. This Checks for the incoming Serial Data\par
                (Command Codes) and Processes the user inputs to Control \par
                the InnoSwitch3-Pro via I2C\par
\par
    Author  :   CS - PIPH Applications   \par
    \par
    Date    :   August 3, 2018\par
   \par
    Copyright (C) 2018 Power Integrations. All rights reserved.\par
\par
    DISCLAIMER: YOU AGREE AND ACKNOWLEDGE THE SOFTWARE CODE LIBRARIES ARE\par
    PROVIDED ON AN "AS IS" BASIS AND THAT YOUR USE OR RELIANCE UPON THE SOFTWARE \par
    IS AT YOUR OWN RISK AND DISCRETION. POWER INTEGRATIONS HEREBY DISCLAIM ANY \par
    AND ALL REPRESENTATIONS, WARRANTIES AND GUARANTIES REGARDING THE SOFTWARE. \par
    POWER INTEGRATIONS MAKES NO WARRANTY HEREIN AND SPECIFICALLY DISCLAIMS ALL \par
    WARRANTIES INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF \par
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT \par
    TO THIRD PARTIES. FURTHERMORE, POWER INTEGRATIONS MAKES NO WARRANTY THAT \par
 \par
    1) THE SOFTWARE CODE LIBRARIES WILL MEET YOUR REQUIREMENTS \par
    2) THE SOFTWARE CODE LIBRARIES WILL BE ACCURATE, RELIBALE, OR ERROR-FREE. \par
\par
    DAMAGES DISCLAIMER: POWER INTEGRATIONS, WILL NOT UNDER ANY CIRCUMSTANCES, \par
    BE LIABLE TO ANY USER FOR ANY DIRECT, INDIRECT, CONSEQUENTIAL, SPECIAL, \par
    PUNITIVE, INCIDENTAL DAMAGES, LOST PROFITS OR LOSS OF BUSINESS, WHETHER \par
    FORESEEABLE OR UNFORESEEABLE EVEN IF POWER INTEGRATIONS HAS BEEN ADVISED \par
    OF THE POSSIBILITY OF SUCH DAMAGES ARISING OUT OF OR RELATED TO USE OF \par
    THIS SOFTWARE CODE LIBRARY.   \par
    \par
 */  \par
\par
\par
// Header Files\par
#include <Config.h>\par
#include <Drv_i2c.h>\par
#include <Drv_Rtc.h>\par
#include <Inno3Pro.h>\par
\par
\par
\par
// Variables for grabbing the serial input\par
String Inno3ProString = "";\par
float inputFloat;\par
\par
boolean stringComplete = false;\par
bool bVoltAndAmp = true;\par
\par
// Main Loop Variable Initialization \par
static float fVolts = 5.01;              //aInitialize Voltage at 5V\par
static float fAmps = 6.01;               //Initialize Constant Current at 6A \par
static float fCableDropComp = 300;       //Initialize Cable Drop Compensation to 300mv\par
static float fVoltPeak = 7.01;           //Initialize Voltage Peak at 7V \par
static float fVbusEn = 1;                //Initialize Vbus Enable to at ON        \par
static float fOverVolts = 6.2;           //Initialize Over Voltage at 6.2V\par
static float fUnderVolts = 3.6;          //Initialize Over Voltage at 3.6V\par
\par
\par
// Library Instance - Needed to call Classes\par
Inno3Pro_Application Inno3ProApp;\par
Inno3Pro_I2C Inno3ProTx;\par
\par
//I2C Write Buffer - LSB, MSB\par
uint8_t u8_Buffer_Tx_Data[2]  =\{0\};\par
uint8_t u8_Inno3Pro_Reg_Address = 0;\par
\par
\par
void setup() \{\par
\par
  // initialize digital pin LED_BUILTIN as an output.\par
  pinMode(LED_BUILTIN, OUTPUT);  \par
  digitalWrite(LED_BUILTIN, HIGH);   // turn the LED on \par
    \par
  // Initialize serial\par
  Serial.begin(9600);  \par
\par
  // reserve 10 bytes for the inputString:\par
  Inno3ProString.reserve(10);\par
  \par
  // Initial Message\par
  Serial.println(F("Inno3Pro Serial Application"));   //F( ) -Stores Strings on the Flash Memory to Optimize SRAM\par
  Serial.print("\\n");    \par
  Serial.println(F("Command Codes: INIT, VI, CV, CC, OV, UV, CDC, VKP, VBEN, RDVOLTS, RDAMPS, RD , WR")); \par
  Serial.print("\\n");    \par
  Serial.println(F("BLEEDER, VDIS, PSUOFF, CVO, OVL, UVL, ISSC, UVLTIMER, WATCHDOG, CVOL, CVOLTIMER, INT , OTP"));\par
  /*\par
   * User Instructions:\par
   \par
    PROCEDURE:\par
    Input the Command Code, then Input the Value(s)\par
    Command Codes are Case Sensitive\par
\par
  \par
    EXAMPLE: (Voltage and Current)\par
    "Input VI and Send"\par
    "Input 5 and Send (This Means 5V)"\par
    "Input 3 and Send (This Means 3A)"\par
    \par
   */\par
  \par
  Serial.print("\\n");  \par
  Serial.println(F("********************************************************************************"));\par
  Serial.print("\\n");  \par
\par
  //Run Initialization at Start Up\par
  Inno3ProApp.Inno3Pro_Initialization();   \par
 \par
  Inno3ProApp.Inno3Pro_Vbus_Switch_Control(fVbusEn);              //Set Vbus Enable\par
\par
\}\par
\par
void loop()\par
\{\par
\par
      //Check for Serial Events\par
      serialEvent();\par
\par
      //Commands Received\par
      if(stringComplete)\par
      \{\par
        Inno3ProSerial_State();                    // Command States , Processes the Serial Inputs\par
   \par
        stringComplete = false;                   // Clear the input boolean               \par
        Inno3ProString = "";                       // Clear the input string              \par
      \}    \par
      //Library Call in the Mainloop\par
      if(bVoltAndAmp)\par
      \{\par
          Inno3ProApp.Inno3Pro_Write_VI(fVolts,fAmps);               //Set Voltage and current\par
      \}\par
\par
\}\par
\par
\par
\par
// Catch All Serial Commands\par
void serialEvent() \par
\{\par
  if (Serial.available()) \{\par
\par
     \par
     \par
    // get the new byte:\par
    char inChar = (char)Serial.read();\par
    // add it to the inputString:vi\par
    Inno3ProString += inChar;\par
    // if the incoming character is a newline, set a flag\par
    // so the main loop can do something about it:\par
    if (inChar == '\\n') \{\par
      stringComplete = true;\par
    \} \par
  \}\par
\}\par
\par
\par
\par
//Process All Serial Commands and Configures Inno Pro based on the Inputs\par
void Inno3ProSerial_State (void)\par
\{\par
         //Temporary  Variables\par
         uint16_t u16TempReadValue = 0;\par
         uint16_t u16TempReadLsb = 0;\par
         uint16_t u16TempReadMsb = 0;         \par
         static float fTempVolts = 5;   \par
         float fConvertedValue = 0;              \par
         uint16_t u16ReadCnt = 0; \par
         uint16_t u16GenericReadValue = 0;          \par
         bool bflag = false;             \par
         static uint16_t u16Response = 0;\par
         static uint16_t u16Freq = 0;\par
         uint16_t u16Temp = 0;\par
         \par
         String ReadBit15 = "";\par
         String ReadBit14 = "";\par
         String ReadBit13 = "";\par
         String ReadBit12 = "";\par
         String ReadBit11 = "";\par
         String ReadBit10 = "";\par
         String ReadBit9 = "";\par
         String ReadBit8 = "";\par
         String ReadBit7 = "";\par
         String ReadBit6 = "";      \par
         String ReadBit5 = "";\par
         String ReadBit4 = "";\par
         String ReadBit3 = "";\par
         String ReadBit2 = "";                                            \par
         String ReadBit1 = "";\par
         String ReadBit0 = "";              \par
         \par
          //Inno Pro Command States\par
          static enum \{ STATE_CMD_CODE,\par
                        STATE_INIT,\par
                        STATE_READ,\par
                        STATE_WRITE,                                                \par
                        STATE_VBEN,\par
                        STATE_BLEEDER,\par
                        STATE_VDIS,\par
                        STATE_PSUOFF,\par
                        STATE_FASTVI,  \par
                        STATE_CVO, \par
                        STATE_VOLTS,\par
                        STATE_OVA,  \par
                        STATE_UVA,  \par
                        STATE_CDC,  \par
                        STATE_AMPS, \par
                        STATE_VKP,\par
                        STATE_OVL,                        \par
                        STATE_UVL,  \par
                        STATE_ISSC, \par
                        STATE_ISSCFREQ,                       \par
                        STATE_UVLTIMER,\par
                        STATE_WATCHDOG,\par
                        STATE_CVOL,  \par
                        STATE_CVOLTIMER,  \par
                        STATE_INTERRUPT, \par
                        STATE_OTP                                                                                             \par
                      \}SerialState_e;\par
                        \par
          switch(SerialState_e)\par
          \{\par
      \par
            case STATE_CMD_CODE:\par
                              \par
                  Serial.print(F("Inno Pro Command Code: "));                  // Print the data to serial    \par
      \par
                  if (Inno3ProString == "VI\\n")\par
                  \{  \par
                     Serial.print(Inno3ProString);            \par
                     SerialState_e = STATE_VOLTS;   \par
                     bVoltAndAmp = true;                                          \par
                  \} \par
                  else if (Inno3ProString == "VBEN\\n")\par
                  \{  \par
                     Serial.print(Inno3ProString);            \par
                     SerialState_e = STATE_VBEN;    \par
                     bVoltAndAmp = false;                                          \par
                  \}  \par
                  else if (Inno3ProString == "BLEEDER\\n")\par
                  \{  \par
                     Serial.print(Inno3ProString);            \par
                     SerialState_e = STATE_BLEEDER;    \par
                     bVoltAndAmp = false;                                          \par
                  \} \par
                  else if (Inno3ProString == "VDIS\\n")\par
                  \{  \par
                     Serial.print(Inno3ProString);            \par
                     SerialState_e = STATE_VDIS;    \par
                     bVoltAndAmp = false;                                          \par
                  \} \par
                  else if (Inno3ProString == "PSUOFF\\n")\par
                  \{  \par
                     Serial.print(Inno3ProString);            \par
                     SerialState_e = STATE_PSUOFF;    \par
                     bVoltAndAmp = false;                                          \par
                  \} \par
                  else if (Inno3ProString == "FASTVI\\n")\par
                  \{  \par
                     Serial.print(Inno3ProString);            \par
                     SerialState_e = STATE_FASTVI;    \par
                     bVoltAndAmp = false;                                          \par
                  \}   \par
                  else if (Inno3ProString == "CVO\\n")\par
                  \{  \par
                     Serial.print(Inno3ProString);            \par
                     SerialState_e = STATE_CVO;    \par
                     bVoltAndAmp = false;                                          \par
                  \}            \par
                  else if (Inno3ProString == "CV\\n")\par
                  \{  \par
                     Serial.print(Inno3ProString);            \par
                     SerialState_e = STATE_VOLTS;   \par
                     bVoltAndAmp = false;                                          \par
                  \} \par
                  else if (Inno3ProString == "OV\\n")\par
                  \{  \par
                     Serial.print(Inno3ProString);            \par
                     SerialState_e = STATE_OVA;    \par
                     bVoltAndAmp = false;                                          \par
                  \}   \par
                  else if (Inno3ProString == "UV\\n")\par
                  \{  \par
                     Serial.print(Inno3ProString);            \par
                     SerialState_e = STATE_UVA;    \par
                     bVoltAndAmp = false;                                          \par
                  \}   \par
                  else if (Inno3ProString == "CDC\\n")\par
                  \{  \par
                     Serial.print(Inno3ProString);             \par
                     SerialState_e = STATE_CDC;  \par
                     bVoltAndAmp = false;                                            \par
                  \}           \par
                  else if (Inno3ProString == "CC\\n")\par
                  \{  \par
                     Serial.print(Inno3ProString);                                    \par
                     SerialState_e = STATE_AMPS; \par
                     bVoltAndAmp = false;                                          \par
                  \}  \par
                  else if (Inno3ProString == "VKP\\n")\par
                  \{  \par
                     Serial.print(Inno3ProString);              \par
                     SerialState_e = STATE_VKP;  \par
                     bVoltAndAmp = false;                                            \par
                  \}         \par
                  else if (Inno3ProString == "OVL\\n")\par
                  \{  \par
                     Serial.print(Inno3ProString);            \par
                     SerialState_e = STATE_OVL;  \par
                     bVoltAndAmp = false;                                             \par
                  \} \par
                  else if (Inno3ProString == "UVL\\n")\par
                  \{  \par
                     Serial.print(Inno3ProString);            \par
                     SerialState_e = STATE_UVL;   \par
                     bVoltAndAmp = false;                                         \par
                  \}    \par
                  else if (Inno3ProString == "ISSC\\n")\par
                  \{  \par
                     Serial.print(Inno3ProString);            \par
                     SerialState_e = STATE_ISSC;   \par
                     bVoltAndAmp = false;                                         \par
                  \}   \par
                  else if (Inno3ProString == "ISSCFREQ\\n")\par
                  \{  \par
                     Serial.print(Inno3ProString);            \par
                     SerialState_e = STATE_ISSCFREQ;   \par
                     bVoltAndAmp = false;                                         \par
                  \}           \par
                  else if (Inno3ProString == "UVLTIMER\\n")\par
                  \{  \par
                     Serial.print(Inno3ProString);            \par
                     SerialState_e = STATE_UVLTIMER;   \par
                     bVoltAndAmp = false;                                         \par
                  \}   \par
                  else if (Inno3ProString == "WATCHDOG\\n")\par
                  \{  \par
                     Serial.print(Inno3ProString);            \par
                     SerialState_e = STATE_WATCHDOG;   \par
                     bVoltAndAmp = false;                                         \par
                  \} \par
                  else if (Inno3ProString == "CVOL\\n")\par
                  \{  \par
                     Serial.print(Inno3ProString);            \par
                     SerialState_e = STATE_CVOL;   \par
                     bVoltAndAmp = false;                                         \par
                  \}           \par
                  else if (Inno3ProString == "CVOLTIMER\\n")\par
                  \{  \par
                     Serial.print(Inno3ProString);            \par
                     SerialState_e = STATE_CVOLTIMER;   \par
                     bVoltAndAmp = false;                                         \par
                  \}      \par
                  else if (Inno3ProString == "INT\\n")\par
                  \{  \par
                     Serial.print(Inno3ProString);            \par
                     SerialState_e = STATE_INTERRUPT;   \par
                     bVoltAndAmp = false;                                         \par
                  \} \par
                  else if (Inno3ProString == "OTP\\n")\par
                  \{  \par
                     Serial.print(Inno3ProString);            \par
                     SerialState_e = STATE_OTP;   \par
                     bVoltAndAmp = false;                                         \par
                  \}           \par
                  else if (Inno3ProString == "INIT\\n")\par
                  \{  \par
                     Serial.print(Inno3ProString);    \par
                     Inno3ProApp.Inno3Pro_Vbus_Switch_Control(0);               //Turn OFF Vbus Switch   \par
                     delay(50);      \par
                     Inno3ProApp.Inno3Pro_Initialization();                     //Disable Watch Dog\par
\par
                     //Set Values\par
                     fVolts = 5;\par
                     fAmps = 6;\par
                     fCableDropComp = 300;\par
                     fVoltPeak = 7;\par
                     fVbusEn = 3;\par
   \par
                     delay(50); \par
                     Inno3ProApp.Inno3Pro_Vbus_Switch_Control(fVbusEn);         //Turn on Vbus\par
                     \par
                     //Send Value to Serial Monitor  \par
                     Serial.print(F("Voltage Setting: "));                       Serial.print(fVolts);             Serial.print(F(" V"));     Serial.print("\\n");    \par
                     Serial.print(F("Constant Current Setting:: "));             Serial.print(fAmps);              Serial.print(F(" A"));     Serial.print("\\n");   \par
                     Serial.print(F("Cable Drop Compensation: "));               Serial.print(fCableDropComp);     Serial.print(F(" mV"));    Serial.print("\\n");    \par
                     Serial.print(F("Constant Output Power Knee Voltage: "));    Serial.print(fVoltPeak);          Serial.print(F(" V"));     Serial.print("\\n");         \par
                     Serial.print(F("Series Bus Switch Control: "));             Serial.print(fVbusEn);            Serial.print(F(" ON"));    Serial.print("\\n");   \par
                     Serial.print("\\n");  \par
\par
                     bVoltAndAmp = false;                                                  \par
                  \}                      \par
                  else if (Inno3ProString == "RDVOLTS\\n")\par
                  \{  \par
                     Serial.print(Inno3ProString);\par
                     u16TempReadValue = Inno3ProApp.Inno3Pro_Telemetry(INNO3PRO_READ9);                    // Read9, Reg_CV\par
                         \par
                     Serial.print(F("Measured Output Voltage: "));                     \par
                     Serial.print("\\n");        \par
                     Serial.print(F("HEX       : "));             Serial.print(u16TempReadValue,HEX);         Serial.print(F("(MSB,LSB)"));  // Print Hex Equivalent \par
\par
                     Serial.print("\\n");  \par
                     //Bit Manipulation:  Clear the Bit[15:12] , use Bit [11:0] \par
                     u16TempReadValue = (u16TempReadValue & 0x0FFF);                   \par
                     Serial.print(F("Processed Hex : "));                                                          \par
                     Serial.print(u16TempReadValue,HEX);                      \par
\par
                     Serial.print("\\n");                \par
                     Serial.print(F("DECIMAL   : "));             Serial.print(u16TempReadValue,DEC);         // Print Decimal Equivalent                                                                                                              \par
\par
                     fConvertedValue = (float) (u16TempReadValue / INNO3PRO_CV_SET_PT_MULT );                  // Implement CV multiplier\par
                       \par
                     Serial.print("\\n");        \par
                     Serial.print(F("CONVERTED : "));            Serial.print(fConvertedValue,2);   Serial.print(F(" V"));// Print Converted Equivalent\par
\par
                     \par
                     //Next Line\par
                     Serial.print("\\n");                             \par
                     Serial.print("\\n"); \par
\par
                     bVoltAndAmp = false;\par
                  \}                  \par
                  else if (Inno3ProString == "RDAMPS\\n")\par
                  \{  \par
                     Serial.print(Inno3ProString);\par
                     u16TempReadValue = Inno3ProApp.Inno3Pro_Telemetry(INNO3PRO_READ7);                       // Read7, Reg_MEASURED_I\par
                     \par
                     \par
                     Serial.print(F("Measured Output Current: "));                                            // Print the data to serial                      \par
                     Serial.print("\\n");        \par
                     Serial.print(F("HEX       : "));             Serial.print(u16TempReadValue,HEX);          Serial.print(F("(MSB,LSB)"));  // Print Hex Equivalent                                                                \par
\par
\par
                     Serial.print("\\n");  \par
                     //Bit Manipulation:  MSB- Clear the Bit [15:9]            LSB - Clear bit 7 (Parity)\par
                     u16TempReadValue = ((u16TempReadValue & 0x0100) >> 1) + (u16TempReadValue & 0x7F);               \par
                     Serial.print(F("Processed Hex : "));                                                           \par
                     Serial.print(u16TempReadValue,HEX);      \par
\par
                     Serial.print("\\n");                \par
                     Serial.print(F("DECIMAL   : "));             Serial.print(u16TempReadValue,DEC);         // Print Decimal Equivalent                     \par
                     \par
                    //Sensed Current Value = N (Decimal) x 32 / (Rsense * 128)\par
                    //Calculate Reading:  \par
                    //Sensed Current Value = (58 x 32) / (5 * 128 ) =  2.9 Amps                              \par
                     fConvertedValue = (float) ( (u16TempReadValue * INNO3PRO_FULL_RANGE_RSENSE_VOLTAGE)/(INNO3PRO_RSENSE * INNO3PRO_ADC_FULL_RANGE) );                  // Implement  multiplier  \par
                       \par
                     Serial.print("\\n");        \par
                     Serial.print(F("CONVERTED : "));            Serial.print(fConvertedValue,2);   Serial.print(F(" A"));// Print Converted Equivalent\par
\par
                     \par
                     //Next Line\par
                     Serial.print("\\n");                             \par
                     Serial.print("\\n");  \par
\par
                     bVoltAndAmp = false;                                                                                        \par
                  \}   \par
                  else if (Inno3ProString == "RD\\n")\par
                  \{  \par
                     Serial.print(Inno3ProString);            \par
                     SerialState_e = STATE_READ;  \par
                     bVoltAndAmp = false;                                            \par
                  \}     \par
                  else if (Inno3ProString == "WR\\n")\par
                  \{  \par
                     Serial.print(Inno3ProString);            \par
                     SerialState_e = STATE_WRITE;   \par
                     bVoltAndAmp = false;                                           \par
                  \}                                                                            \par
                  else\par
                  \{\par
                     Serial.print(F("Invalid"));    \par
                     Serial.print("\\n");                                                                \par
                  \}\par
                  break;\par
      \par
            case STATE_VOLTS: //Volts\par
                  Serial.print(F("Output Voltage Setting: "));                  // Print the data to serial         \par
\par
                  if (isDigit(Inno3ProString[0]))                        //Check If First Serial Command is a Number\par
                  \{\par
                      inputFloat = Inno3ProString.toFloat();               //Convert the inputted number to a float     \par
                      inputFloat = constrain(inputFloat,3,21);             //Set Limits - 20V for Now , Hardware Limitation\par
                      \par
                      fTempVolts = inputFloat + 0.001;                     //Store Output Voltage Setting , 1mv Offset Needed for ASCII conversion\par
                      Serial.print(inputFloat);                            //Send Value to Serial Monitor                         \par
                      Serial.print(F(" V"));                               //Print Unit \par
\par
\par
                      //Next Line\par
                      Serial.print("\\n");                             \par
                                                          \par
                      //Proceed to Amps if Write VI only\par
                      if(bVoltAndAmp)\par
                      \{                      \par
                        SerialState_e = STATE_AMPS;                          //Proceed to Constant Current Setting\par
                      \}\par
                      else\par
                      \{\par
                        Serial.print("\\n");     \par
                        fVolts = fTempVolts;                                 //Set Output Voltage In Volts\par
                        Inno3ProApp.Inno3Pro_Write_Volts(fVolts);            //Set Voltage   \par
                        SerialState_e = STATE_CMD_CODE;                      //Return to Inno Pro Command Code\par
                      \}   \par
\par
                  \}\par
                  else\par
                  \{\par
                     Serial.print(F("Invalid"));    \par
                     Serial.print("\\n");                                                                \par
                  \}                  \par
                  break;      \par
\par
\par
            case STATE_VBEN: //VBEN\par
\par
                  Serial.print(F("Series Bus Switch Control: "));                \par
                   \par
                  if (isDigit(Inno3ProString[0]))                         //Check If First Serial Command is a Number\par
                  \{\par
\par
                    Inno3ProApp.Inno3Pro_Initialization();                //Re- Initialize to Disable Watchdog  \par
\par
                    \par
                    inputFloat = Inno3ProString.toFloat();    \par
                    inputFloat = constrain(inputFloat,0,3);              //Set Limits - 0 to 3 Only             \par
\par
                    if( inputFloat >= 1 )\par
                    \{\par
                         fVbusEn =   1;                                  //Turn ON VBEN\par
                    \} \par
                    else\par
                    \{\par
                         fVbusEn =   0;                                  //Turn OFF VBEN                \par
                    \}\par
   \par
                    \par
                    Serial.print(inputFloat);                            //Send Value to Serial Monitor\par
\par
                    //Analyze and Print VBEN Setting\par
                    if(inputFloat == 0)\par
                    \{\par
                       Serial.print(F(" OFF"));                          //Print Setting                          \par
                    \}\par
                    else if( inputFloat >= 1)\par
                    \{\par
                       Serial.print(F(" ON"));                           //Print Setting                 \par
                    \}\par
                    else\par
                    \{\par
                       Serial.print(F(" OFF"));                          //Print Setting    \par
                    \}\par
\par
                    //Next Line\par
                    Serial.print("\\n");                             \par
                    Serial.print("\\n");    \par
                    Inno3ProApp.Inno3Pro_Vbus_Switch_Control(fVbusEn);              //Set Vbus Enable\par
                    SerialState_e = STATE_CMD_CODE;                      //Return to Inno Pro Command Code\par
                  \}\par
                  else\par
                  \{\par
                     Serial.print(F("Invalid"));    \par
                     Serial.print("\\n");                                                               \par
                  \}                                                             \par
                  break;   \par
                  \par
            case STATE_BLEEDER: //Bleeder\par
                  Serial.print(F("Active Bleeder Setting: "));           // Print the data to serial         \par
\par
                  if (isDigit(Inno3ProString[0]))                        //Check If First Serial Command is a Number\par
                  \{ \par
                    \par
                    inputFloat = Inno3ProString.toFloat();              \par
\par
                    if( inputFloat >= 1 )\par
                    \{\par
                         bflag =   true;                                 //enable\par
                    \} \par
                    else\par
                    \{\par
                         bflag =   false;                                //disable                \par
                    \}\par
   \par
                    \par
                    Serial.print(inputFloat);                            //Send Value to Serial Monitor\par
\par
                    //Analyze and Print Setting\par
                    if( inputFloat >= 1)\par
                    \{\par
                       Serial.print(F(" ENABLED"));                     //Print Setting                 \par
                    \}\par
                    else\par
                    \{\par
                       Serial.print(F(" DISABLED"));                    //Print Setting    \par
                    \}\par
\par
                    //Next Line\par
                    Serial.print("\\n");                             \par
                    Serial.print("\\n");    \par
                    Inno3ProApp.Inno3Pro_Bleeder_Enable(bflag);   //Implement Setting\par
                    SerialState_e = STATE_CMD_CODE;                      //Return to Inno Pro Command Code\par
                  \}  \par
                  else\par
                  \{\par
                     Serial.print(F("Invalid"));    \par
                     Serial.print("\\n");                                                                \par
                  \}                                     \par
                  break; \par
\par
            case STATE_VDIS: //Load Discharge\par
                  Serial.print(F("Load (VBUS) Discharge Setting: "));     // Print the data to serial         \par
\par
                  if (isDigit(Inno3ProString[0]))                         //Check If First Serial Command is a Number\par
                  \{ \par
                    \par
                    inputFloat = Inno3ProString.toFloat();              \par
\par
                    if( inputFloat >= 1 )\par
                    \{\par
                         bflag =   true;                                 //enable\par
                    \} \par
                    else\par
                    \{\par
                         bflag =   false;                                //disable                \par
                    \}\par
   \par
                    \par
                    Serial.print(inputFloat);                            //Send Value to Serial Monitor\par
\par
                    //Analyze and Print Setting\par
                    if( inputFloat >= 1)\par
                    \{\par
                       Serial.print(F(" ENABLED"));                     //Print Setting                 \par
                    \}\par
                    else\par
                    \{\par
                       Serial.print(F(" DISABLED"));                    //Print Setting    \par
                    \}\par
\par
                    //Next Line\par
                    Serial.print("\\n");                             \par
                    Serial.print("\\n");    \par
                    Inno3ProApp.Inno3Pro_Load_Discharge(bflag);          //Implement Setting\par
                    SerialState_e = STATE_CMD_CODE;                      //Return to Inno Pro Command Code\par
                  \}    \par
                  else\par
                  \{\par
                     Serial.print(F("Invalid"));    \par
                     Serial.print("\\n");                                                                \par
                  \}                                   \par
                  break; \par
\par
            case STATE_PSUOFF: //PSU off\par
                  Serial.print(F("Turn Off PSU Setting: "));            // Print the data to serial         \par
\par
                  if (isDigit(Inno3ProString[0]))                        //Check If First Serial Command is a Number\par
                  \{ \par
                    \par
                    inputFloat = Inno3ProString.toFloat();              \par
\par
                    if( inputFloat >= 1 )\par
                    \{\par
                         bflag =   true;                                 //enable\par
                    \} \par
                    else\par
                    \{\par
                         bflag =   false;                                //disable                \par
                    \}\par
   \par
                    \par
                    Serial.print(inputFloat);                            //Send Value to Serial Monitor\par
\par
                    //Analyze and Print Setting\par
                    if( inputFloat >= 1)\par
                    \{\par
                       Serial.print(F(" ENABLED"));                     //Print Setting                 \par
                    \}\par
                    else\par
                    \{\par
                       Serial.print(F(" DISABLED"));                    //Print Setting    \par
                    \}\par
\par
                    //Next Line\par
                    Serial.print("\\n");                             \par
                    Serial.print("\\n");    \par
                    Inno3ProApp.Inno3Pro_TurnOff_PSU(bflag);             //Implement Setting\par
                    SerialState_e = STATE_CMD_CODE;                      //Return to Inno Pro Command Code\par
                  \}  \par
                  else\par
                  \{\par
                     Serial.print(F("Invalid"));    \par
                     Serial.print("\\n");                                                                \par
                  \}                                     \par
                  break;    \par
\par
            case STATE_FASTVI: //Speed of CV/CC Update\par
                  Serial.print(F("Fast VI Command Setting: "));          // Print the data to serial         \par
\par
                  if (isDigit(Inno3ProString[0]))                        //Check If First Serial Command is a Number\par
                  \{ \par
                    \par
                    inputFloat = Inno3ProString.toFloat();              \par
\par
                    if( inputFloat >= 1 )\par
                    \{\par
                         bflag =   true;                                 //enable\par
                    \} \par
                    else\par
                    \{\par
                         bflag =   false;                                //disable                \par
                    \}\par
   \par
                    \par
                    Serial.print(inputFloat);                            //Send Value to Serial Monitor\par
                    \par
                    //Analyze and Print Setting\par
                    if( inputFloat >= 1)\par
                    \{\par
                       Serial.print(F("  No Speed Limit"));              //Print Setting                 \par
                    \}\par
                    else\par
                    \{\par
                       Serial.print(F("  10ms Update Limit Enabled"));   //Print Setting    \par
                    \}\par
\par
                    //Next Line\par
                    Serial.print("\\n");                             \par
                    Serial.print("\\n");    \par
                    Inno3ProApp.Inno3Pro_FastVI_Disable(bflag);          //Implement Setting\par
                    SerialState_e = STATE_CMD_CODE;                      //Return to Inno Pro Command Code\par
                  \} \par
                  else\par
                  \{\par
                     Serial.print(F("Invalid"));    \par
                     Serial.print("\\n");                                                                \par
                  \}                                      \par
                  break;    \par
\par
            case STATE_CVO: //Constant Voltage Only Mode\par
                  Serial.print(F("Constant Voltage Only Mode: "));       // Print the data to serial         \par
\par
                  if (isDigit(Inno3ProString[0]))                        //Check If First Serial Command is a Number\par
                  \{ \par
                    \par
                    inputFloat = Inno3ProString.toFloat();              \par
\par
                    if( inputFloat >= 1 )\par
                    \{\par
                         bflag =   true;                                 //enable\par
                    \} \par
                    else\par
                    \{\par
                         bflag =   false;                                //disable                \par
                    \}\par
   \par
                    \par
                    Serial.print(inputFloat);                            //Send Value to Serial Monitor\par
                  \par
                    //Analyze and Print Setting\par
                    if( inputFloat >= 1)\par
                    \{\par
                       Serial.print(F(" No CC"));                       //Print Setting                 \par
                    \}\par
                    else\par
                    \{\par
                       Serial.print(F(" CV/CC Enabled"));                //Print Setting    \par
                    \}\par
\par
                    //Next Line\par
                    Serial.print("\\n");                             \par
                    Serial.print("\\n");    \par
                    Inno3ProApp.Inno3Pro_CVOnlyMode_Enable(bflag);       //Implement Setting\par
                    SerialState_e = STATE_CMD_CODE;                      //Return to Inno Pro Command Code\par
                  \}      \par
                  else\par
                  \{\par
                     Serial.print(F("Invalid"));    \par
                     Serial.print("\\n");                                                                \par
                  \}                                 \par
                  break;                                                 \par
                                    \par
            case STATE_AMPS: //Constant Current (Amps)\par
\par
                  Serial.print(F("Constant Current Setting: "));         // Print the data to serial \par
                   \par
                  if (isDigit(Inno3ProString[0]))                         //Check If First Serial Command is a Number\par
                  \{\par
                    inputFloat = Inno3ProString.toFloat();                // Convert the inputted number to a float    \par
                    inputFloat = constrain(inputFloat,0,6.4);             //Set Limits: 0 to 6.4A, depends on Rsense\par
                    \par
                    fAmps =   inputFloat;                                //Set Constant Current in Amps\par
                    Serial.print(inputFloat);                            //Send Value to Serial Monitor\par
                    Serial.print(F(" A"));                               //Print Unit                     \par
\par
                    if(bVoltAndAmp)\par
                    \{\par
                      fVolts = fTempVolts;                               //Set Output Voltage In Volts                                                                \par
                    \}\par
                    else\par
                    \{\par
                      Inno3ProApp.Inno3Pro_Write_Amps(fAmps);  \par
                    \}\par
                    \par
                    Serial.print("\\n");     \par
                    Serial.print("\\n");        \par
                      \par
                    SerialState_e = STATE_CMD_CODE;                      //Return to Inno Pro Command Code\par
                  \}\par
                  else\par
                  \{\par
                     Serial.print(F("Invalid"));    \par
                     Serial.print("\\n");                                                               \par
                  \}                                                             \par
                  break;     \par
\par
            \par
            case STATE_OVA: //Over Voltage Setting\par
                  Serial.print(F("Over Voltage Setting: "));                  // Print the data to serial         \par
\par
                  if (isDigit(Inno3ProString[0]))                        //Check If First Serial Command is a Number\par
                  \{\par
                    inputFloat = Inno3ProString.toFloat();               //Convert the inputted number to a float     \par
                    inputFloat = constrain(inputFloat,6.2,25);          //Set Limits - 6.2V to 25V\par
                    \par
                    fTempVolts = inputFloat + 0.001;                     //Store Output Voltage Setting , 1mv Offset Needed for ASCII conversion\par
                    Serial.print(inputFloat);                            //Send Value to Serial Monitor                         \par
                    Serial.print(F(" V"));                               //Print Unit \par
                                  \par
                    //Next Line\par
                    Serial.print("\\n");                             \par
                    Serial.print("\\n");   \par
\par
                    fOverVolts = fTempVolts;                             //Set Over Voltage In Volts\par
                    Inno3ProApp.Inno3Pro_Write_Over_Volts(fOverVolts);   //Set Over Voltage                                        \par
                    SerialState_e = STATE_CMD_CODE;                      //Return to Inno Pro Command Code\par
                 \par
                  \}\par
                  else\par
                  \{\par
                     Serial.print(F("Invalid"));    \par
                     Serial.print("\\n");                                                                \par
                  \}                  \par
                  break; \par
\par
            \par
            case STATE_UVA: //Under Voltage Setting\par
                  Serial.print(F("Under Voltage Setting: "));                  // Print the data to serial         \par
\par
                  if (isDigit(Inno3ProString[0]))                        //Check If First Serial Command is a Number\par
                  \{\par
                    inputFloat = Inno3ProString.toFloat();               //Convert the inputted number to a float     \par
                    inputFloat = constrain(inputFloat,3,20);             //Set Limits - 3V to 24V\par
                    \par
                    fTempVolts = inputFloat + 0.001;                     //Store Output Voltage Setting , 1mv Offset Needed for ASCII conversion\par
                    Serial.print(inputFloat);                            //Send Value to Serial Monitor                         \par
                    Serial.print(F(" V"));                               //Print Unit \par
                                  \par
                    //Next Line\par
                    Serial.print("\\n");                             \par
                    Serial.print("\\n");   \par
\par
                    fUnderVolts = fTempVolts;                             //Set Over Voltage In Volts\par
                    Inno3ProApp.Inno3Pro_Write_Under_Volts(fUnderVolts);  //Set Under Voltage                   \par
                    SerialState_e = STATE_CMD_CODE;                       //Return to Inno Pro Command Code\par
                 \par
                  \}\par
                  else\par
                  \{\par
                     Serial.print(F("Invalid"));    \par
                     Serial.print("\\n");                                                                \par
                  \}                  \par
                  break;                   \par
\par
                     \par
            case STATE_CDC: //CDC\par
\par
                  Serial.print(F("Cable Drop Compensation: "));                \par
                   \par
                  if (isDigit(Inno3ProString[0]))                         //Check If First Serial Command is a Number\par
                  \{\par
                    inputFloat = Inno3ProString.toFloat();        \par
                    inputFloat = constrain(inputFloat,0,600);            //Set Limits: 0 to 600mv    \par
                    \par
                    fCableDropComp =   inputFloat;                       //Set Cable Drop Compensation\par
                    Serial.print(inputFloat);                            //Send Value to Serial Monitor  \par
                    Serial.print(F(" mV"));                              //Print Unit                               \par
                                          \par
                    //Next Line\par
                    Serial.print("\\n");                             \par
                    Serial.print("\\n");                        \par
                    Inno3ProApp.Inno3Pro_Write_Cable_Drop_Comp(fCableDropComp);     //Set Cable Drop Compesation    \par
                    SerialState_e = STATE_CMD_CODE;                      //Return to Inno Pro Command Code\par
                  \}\par
                  else\par
                  \{\par
                     Serial.print(F("Invalid"));    \par
                     Serial.print("\\n");                                                                \par
                  \}                                                             \par
                  break;     \par
\par
      \par
            case STATE_VKP: //VKP\par
\par
                  Serial.print(F("Constant Output Power Knee Voltage: "));                \par
                   \par
                  if (isDigit(Inno3ProString[0]))                         //Check If First Serial Command is a Number\par
                  \{\par
                    inputFloat = Inno3ProString.toFloat(); \par
                    inputFloat = constrain(inputFloat,5.3,24);           //Set Limits: 5.3 to 24V               \par
                    \par
                    fVoltPeak =   inputFloat;                            //Set Constant Power Knee Voltage\par
                    Serial.print(inputFloat);                            //Send Value to Serial Monitor\par
                    Serial.print(F(" V"));                               //Print Unit                         \par
                                        \par
                    //Next Line\par
                    Serial.print("\\n");                             \par
                    Serial.print("\\n");      \par
                      \par
                    Inno3ProApp.Inno3Pro_Write_Volt_Peak(fVoltPeak);                //Set Constant Output Power Knee Voltage\par
                    SerialState_e = STATE_CMD_CODE;                     //Return to Inno Pro Command Code\par
                  \}\par
                  else\par
                  \{\par
                     Serial.print(F("Invalid"));    \par
                     Serial.print("\\n");                                                                \par
                  \}                                                             \par
                  break;    \par
 \par
\par
            case STATE_OVL: //Over Voltage Fault Response\par
                  Serial.print(F("Over Voltage Fault Response: "));      // Print the data to serial         \par
\par
                  if (isDigit(Inno3ProString[0]))                        //Check If First Serial Command is a Number\par
                  \{ \par
                    \par
                    inputFloat = Inno3ProString.toFloat();              \par
                    Serial.print(inputFloat);                            //Send Value to Serial Monitor\par
                  \par
                    //Analyze and Print Setting\par
                    if( inputFloat == 0)\par
                    \{\par
                       Inno3ProApp.Inno3Pro_Write_OVL_Fault_Response(INNO3PRO_OVL_FAULT_RESPONSE_NORESPONSE);\par
                       Serial.print(F(" No Response"));                  //Print Setting                                      \par
                    \}\par
                    else if(inputFloat == 1)\par
                    \{\par
                       Inno3ProApp.Inno3Pro_Write_OVL_Fault_Response(INNO3PRO_OVL_FAULT_RESPONSE_LATCHOFF);\par
                       Serial.print(F(" Latch-Off"));                    //Print Setting    \par
                    \}\par
                    else if(inputFloat == 2)\par
                    \{\par
                       Inno3ProApp.Inno3Pro_Write_OVL_Fault_Response(INNO3PRO_OVL_FAULT_RESPONSE_AUTORESTART); \par
                       Serial.print(F(" Auto Restart"));                 //Print Setting      \par
                    \}\par
                    else\par
                    \{\par
                       Serial.print("\\n"); \par
                       Serial.print(F("Invalid Input! (0-NR , 1-LO, 2-AR )"));                                                                                      \par
                    \}    \par
                    \par
                    //Next Line\par
                    Serial.print("\\n");                             \par
                    Serial.print("\\n");    \par
                    SerialState_e = STATE_CMD_CODE;                       //Return to Inno Pro Command Code\par
                  \}    \par
                  else\par
                  \{\par
                     Serial.print(F("Invalid"));    \par
                     Serial.print("\\n");                                                                \par
                  \}                                   \par
                  break;  \par
\par
\par
            case STATE_UVL: //Under Voltage Fault Response\par
                  Serial.print(F("Over Voltage Fault Response: "));      // Print the data to serial         \par
\par
                  if (isDigit(Inno3ProString[0]))                        //Check If First Serial Command is a Number\par
                  \{ \par
                    \par
                    inputFloat = Inno3ProString.toFloat();              \par
                    Serial.print(inputFloat);                            //Send Value to Serial Monitor\par
                  \par
                    //Analyze and Print Setting\par
                    if( inputFloat == 2)\par
                    \{\par
                       Inno3ProApp.Inno3Pro_Write_UVL_Fault_Response(INNO3PRO_UVL_FAULT_RESPONSE_NORESPONSE);\par
                       Serial.print(F(" No Response"));                  //Print Setting                                      \par
                    \}\par
                    else if(inputFloat == 1)\par
                    \{\par
                       Inno3ProApp.Inno3Pro_Write_UVL_Fault_Response(INNO3PRO_UVL_FAULT_RESPONSE_LATCHOFF);\par
                       Serial.print(F(" Latch-Off"));                    //Print Setting    \par
                    \}\par
                    else if(inputFloat == 0)\par
                    \{\par
                       Inno3ProApp.Inno3Pro_Write_UVL_Fault_Response(INNO3PRO_UVL_FAULT_RESPONSE_AUTORESTART); \par
                       Serial.print(F(" Auto Restart"));                 //Print Setting   \par
                    \}   \par
                    else\par
                    \{\par
                       Serial.print("\\n"); \par
                       Serial.print(F("Invalid Input! (0-AR , 1-LO, 2-NR )"));                                                                                      \par
                    \}   \par
                    \par
                    //Next Line\par
                    Serial.print("\\n");                             \par
                    Serial.print("\\n");    \par
                    SerialState_e = STATE_CMD_CODE;                       //Return to Inno Pro Command Code\par
                  \}    \par
                  else\par
                  \{\par
                     Serial.print(F("Invalid"));    \par
                     Serial.print("\\n");                                                                \par
                  \}                                   \par
                  break;  \par
\par
\par
            case STATE_ISSC: //IS-pin Short Fault Response\par
                  Serial.print(F("IS-pin Short Fault Response: "));      // Print the data to serial         \par
\par
                  if (isDigit(Inno3ProString[0]))                        //Check If First Serial Command is a Number\par
                  \{ \par
                    \par
                    inputFloat = Inno3ProString.toFloat();              \par
                    Serial.print(inputFloat);                            //Send Value to Serial Monitor\par
                  \par
                    //Analyze and Print Setting\par
                    if( inputFloat == 0)\par
                    \{\par
                        u16Response = INNO3PRO_ISSC_FAULT_RESPONSE_NORESPONSE;   \par
                        Serial.print(F(" No Response"));                  //Print Setting                                                   \par
                    \}\par
                    else if(inputFloat == 1)\par
                    \{\par
                        u16Response = INNO3PRO_ISSC_FAULT_RESPONSE_LATCHOFF;\par
                        Serial.print(F(" Latch-Off"));                    //Print Setting                            \par
                    \}\par
                    else if(inputFloat == 2)\par
                    \{\par
                        u16Response = INNO3PRO_ISSC_FAULT_RESPONSE_AUTORESTART;\par
                        Serial.print(F(" Auto Restart"));                 //Print Setting                           \par
                    \}\par
                    else\par
                    \{\par
                       Serial.print("\\n"); \par
                       Serial.print(F("Invalid Input! (0-NR , 1-LO, 2-AR )"));                                                                                      \par
                    \}                        \par
\par
                    //Next Line\par
                    Serial.print("\\n");                               \par
                    SerialState_e = STATE_ISSCFREQ;                       //Got to ISSC Frequency Setting\par
                  \}    \par
                  else\par
                  \{\par
                     Serial.print(F("Invalid"));    \par
                     Serial.print("\\n");                                                                \par
                  \}                                   \par
                  break;  \par
\par
            case STATE_ISSCFREQ: //IS-pin Short Frequency\par
                  Serial.print(F("IS-pin Short Frequency: "));          // Print the data to serial         \par
\par
                  if (isDigit(Inno3ProString[0]))                        //Check If First Serial Command is a Number\par
                  \{ \par
\par
                    inputFloat = Inno3ProString.toFloat();              \par
                    Serial.print(inputFloat);                            //Send Value to Serial Monitor\par
                    Serial.print(F(" Khz"));\par
                     \par
                    //Analyze and Print Setting\par
                    if( inputFloat == 30) //Khz\par
                    \{\par
                        u16Freq = INNO3PRO_ISSC_FREQ_THRESHOLD_30KHZ;    \par
                        Inno3ProApp.Inno3Pro_Write_ISSC_Fault_Response(u16Response,u16Freq);                                              \par
                    \}\par
                    else if(inputFloat == 40) //Khz\par
                    \{\par
                        u16Freq = INNO3PRO_ISSC_FREQ_THRESHOLD_40KHZ;  \par
                        Inno3ProApp.Inno3Pro_Write_ISSC_Fault_Response(u16Response,u16Freq);                     \par
                    \}\par
                    else if(inputFloat == 60) //Khz\par
                    \{\par
                        u16Freq = INNO3PRO_ISSC_FREQ_THRESHOLD_60KHZ; \par
                        Inno3ProApp.Inno3Pro_Write_ISSC_Fault_Response(u16Response,u16Freq);                     \par
                    \}                    \par
                    else if(inputFloat == 50) //Khz\par
                    \{\par
                        u16Response = INNO3PRO_ISSC_FREQ_THRESHOLD_50KHZ;\par
                        Inno3ProApp.Inno3Pro_Write_ISSC_Fault_Response(u16Response,u16Freq);                   \par
                    \}\par
                    else\par
                    \{\par
                       Serial.print("\\n"); \par
                       Serial.print(F("Invalid Input! (30, 40, 50, 60)"));                                                                                       \par
                    \} \par
                                        \par
                   \par
                    \par
                    //Next Line\par
                    Serial.print("\\n");                             \par
                    Serial.print("\\n");    \par
                    SerialState_e = STATE_CMD_CODE;                      //Return to Inno Pro Command Code\par
                  \}    \par
                  else\par
                  \{\par
                     Serial.print(F("Invalid"));    \par
                     Serial.print("\\n");                                                                \par
                  \}                                   \par
                  break;                    \par
\par
\par
            case STATE_UVLTIMER: //Under Voltage Fault Timer\par
                  Serial.print(F("Under Voltage Fault Timer: "));       // Print the data to serial         \par
\par
                  if (isDigit(Inno3ProString[0]))                        //Check If First Serial Command is a Number\par
                  \{ \par
                    \par
                    inputFloat = Inno3ProString.toFloat();              \par
                    Serial.print(inputFloat);                            //Send Value to Serial Monitor\par
                    Serial.print(F(" ms"));\par
                  \par
                    //Analyze and Print Setting\par
                    if( inputFloat == 8)\par
                    \{\par
                       Inno3ProApp.Inno3Pro_Write_UVL_Fault_Timer(INNO3PRO_UVL_FAULT_TIMER_8MS);                                 \par
                    \}\par
                    else if(inputFloat == 16)\par
                    \{\par
                       Inno3ProApp.Inno3Pro_Write_UVL_Fault_Timer(INNO3PRO_UVL_FAULT_TIMER_16MS);\par
                    \}\par
                    else if(inputFloat == 32)\par
                    \{\par
                       Inno3ProApp.Inno3Pro_Write_UVL_Fault_Timer(INNO3PRO_UVL_FAULT_TIMER_32MS);\par
                    \}                    \par
                    else if(inputFloat == 64)\par
                    \{\par
                       Inno3ProApp.Inno3Pro_Write_UVL_Fault_Timer(INNO3PRO_UVL_FAULT_TIMER_64MS);\par
                    \}   \par
                    else\par
                    \{\par
                       Serial.print("\\n"); \par
                       Serial.print(F("Invalid Input! (8, 16, 32, 64)"));                                                                                      \par
                    \} \par
                    \par
                    //Next Line\par
                    Serial.print("\\n");                             \par
                    Serial.print("\\n");    \par
                    SerialState_e = STATE_CMD_CODE;                       //Return to Inno Pro Command Code\par
                  \}    \par
                  else\par
                  \{\par
                     Serial.print(F("Invalid"));    \par
                     Serial.print("\\n");                                                                \par
                  \}                                   \par
                  break;  \par
\par
            case STATE_WATCHDOG: //Watchdog Timer\par
                  Serial.print(F("Watchdog Timer: "));                  // Print the data to serial         \par
\par
                  if (isDigit(Inno3ProString[0]))                        //Check If First Serial Command is a Number\par
                  \{ \par
                    \par
                    inputFloat = Inno3ProString.toFloat();              \par
                    Serial.print(inputFloat);                            //Send Value to Serial Monitor\par
                    Serial.print(F(" ms"));\par
                  \par
                    //Analyze and Print Setting\par
                    if( inputFloat == 500)\par
                    \{\par
                       Inno3ProApp.Inno3Pro_Write_Watchdog_Timer(INNO3PRO_WATCHDOG_TIMER_500MS);                                 \par
                    \}\par
                    else if(inputFloat == 1000)\par
                    \{\par
                       Inno3ProApp.Inno3Pro_Write_Watchdog_Timer(INNO3PRO_WATCHDOG_TIMER_1000MS);\par
                    \}\par
                    else if(inputFloat == 2000)\par
                    \{\par
                       Inno3ProApp.Inno3Pro_Write_Watchdog_Timer(INNO3PRO_WATCHDOG_TIMER_2000MS);\par
                    \}                    \par
                    else if(inputFloat == 0)\par
                    \{\par
                       Inno3ProApp.Inno3Pro_Write_Watchdog_Timer(INNO3PRO_WATCHDOG_TIMER_NOWATCHDOG);  \par
                    \}\par
                    else\par
                    \{\par
                       Serial.print("\\n"); \par
                       Serial.print(F("Invalid Input! (0, 500, 1000, 2000)"));                                                                                      \par
                    \}                     \par
\par
                    //Next Line\par
                    Serial.print("\\n");                             \par
                    Serial.print("\\n");    \par
                    SerialState_e = STATE_CMD_CODE;                       //Return to Inno Pro Command Code\par
                  \}    \par
                  else\par
                  \{\par
                     Serial.print(F("Invalid"));    \par
                     Serial.print("\\n");                                                                \par
                  \}                                   \par
                  break;  \par
\par
\par
            case STATE_CVOL: //Constant Voltage Mode Fault Response\par
                  Serial.print(F("Constant Voltage Mode Fault Response: "));  // Print the data to serial         \par
\par
                  if (isDigit(Inno3ProString[0]))                        //Check If First Serial Command is a Number\par
                  \{ \par
                    \par
                    inputFloat = Inno3ProString.toFloat();              \par
                    Serial.print(inputFloat);                            //Send Value to Serial Monitor\par
                  \par
                    //Analyze and Print Setting\par
                    if( inputFloat == 0)\par
                    \{\par
                        Inno3ProApp.Inno3Pro_Write_CVOL_Fault_Response(INNO3PRO_CVOL_FAULT_RESPONSE_NORESPONSE);  \par
                        Serial.print(F(" No Response"));                  //Print Setting                                                   \par
                    \}\par
                    else if(inputFloat == 1)\par
                    \{\par
                        Inno3ProApp.Inno3Pro_Write_CVOL_Fault_Response(INNO3PRO_CVOL_FAULT_RESPONSE_AUTORESTART); \par
                        Serial.print(F(" Auto Restart"));                 //Print Setting                           \par
                    \}\par
                    else if(inputFloat == 2)\par
                    \{\par
                        Inno3ProApp.Inno3Pro_Write_CVOL_Fault_Response(INNO3PRO_CVOL_FAULT_RESPONSE_LATCHOFF);                         \par
                        Serial.print(F(" Latch-Off"));                    //Print Setting                            \par
                    \}                    \par
                    else\par
                    \{\par
                       Serial.print("\\n"); \par
                       Serial.print(F("Invalid Input! (0-NR , 1-AR, 2-LO )"));                                                                                      \par
                    \}                        \par
\par
                    //Next Line\par
                    Serial.print("\\n");                               \par
                    SerialState_e = STATE_CMD_CODE;                       //Got to ISSC Frequency Setting\par
                  \}    \par
                  else\par
                  \{\par
                     Serial.print(F("Invalid"));    \par
                     Serial.print("\\n");                                                                \par
                  \}                                   \par
                  break;                    \par
\par
            case STATE_CVOLTIMER: //Constant Voltage Fault Timer\par
\par
                  Serial.print(F("Constant Voltage Fault Timerr: "));       // Print the data to serial         \par
\par
                  if (isDigit(Inno3ProString[0]))                        //Check If First Serial Command is a Number\par
                  \{ \par
                    \par
                    inputFloat = Inno3ProString.toFloat();              \par
                    Serial.print(inputFloat);                            //Send Value to Serial Monitor\par
                    Serial.print(F(" ms"));\par
                  \par
                    //Analyze and Print Setting\par
                    if( inputFloat == 8)\par
                    \{\par
                       Inno3ProApp.Inno3Pro_Write_CVOL_Fault_Timer(INNO3PRO_CVOL_FAULT_TIMER_8MS);                                 \par
                    \}\par
                    else if(inputFloat == 16)\par
                    \{\par
                       Inno3ProApp.Inno3Pro_Write_CVOL_Fault_Timer(INNO3PRO_CVOL_FAULT_TIMER_16MS);\par
                    \}\par
                    else if(inputFloat == 32)\par
                    \{\par
                       Inno3ProApp.Inno3Pro_Write_CVOL_Fault_Timer(INNO3PRO_CVOL_FAULT_TIMER_32MS);\par
                    \}                    \par
                    else if(inputFloat == 64)\par
                    \{\par
                       Inno3ProApp.Inno3Pro_Write_CVOL_Fault_Timer(INNO3PRO_CVOL_FAULT_TIMER_64MS);\par
                    \}   \par
                    else\par
                    \{\par
                       Serial.print("\\n"); \par
                       Serial.print(F("Invalid Input! (8, 16, 32, 64)"));                                                                                      \par
                    \} \par
                    \par
                    //Next Line\par
                    Serial.print("\\n");                             \par
                    Serial.print("\\n");    \par
                    SerialState_e = STATE_CMD_CODE;                       //Return to Inno Pro Command Code\par
                  \}    \par
                  else\par
                  \{\par
                     Serial.print(F("Invalid"));    \par
                     Serial.print("\\n");                                                                \par
                  \}                                   \par
                  break; \par
\par
\par
\par
            case STATE_INTERRUPT: //Interrupt\par
                  Serial.print(F("Interrupt Mask: "));   // Print the data to serial         \par
\par
                  if (isDigit(Inno3ProString[0]))                        //Check If First Serial Command is a Number\par
                  \{ \par
                    \par
                    u16Temp = Inno3ProString.toInt();              \par
                    Serial.print(u16Temp);                            //Send Value to Serial Monitor\par
                    Serial.print(F(" Decimal"));\par
                  \par
\par
                     Inno3ProApp.Inno3Pro_Write_Interupt_Mask(u16Temp);\par
\par
                    //Next Line\par
                    Serial.print("\\n");                             \par
                    Serial.print("\\n");    \par
                    SerialState_e = STATE_CMD_CODE;                       //Return to Inno Pro Command Code\par
                  \}    \par
                  else\par
                  \{\par
                     Serial.print(F("Invalid"));    \par
                     Serial.print("\\n");                                                                \par
                  \}                                   \par
                  break;  \par
                  \par
            case STATE_OTP: //OTP\par
                  Serial.print(F("Secondary Over Temperature Hysteresis: "));   // Print the data to serial         \par
\par
                  if (isDigit(Inno3ProString[0]))                        //Check If First Serial Command is a Number\par
                  \{ \par
                    \par
                    inputFloat = Inno3ProString.toFloat();              \par
                    Serial.print(inputFloat);                            //Send Value to Serial Monitor\par
                    Serial.print(F(" Deg"));\par
                  \par
                    //Analyze and Print Setting\par
                    if( inputFloat == 40)\par
                    \{\par
                       Inno3ProApp.Inno3Pro_Write_OTP_Hysteresis(INNO3PRO_OTP_FAULT_HYST_40DEG);                                 \par
                    \}\par
                    else if(inputFloat == 60)\par
                    \{\par
                       Inno3ProApp.Inno3Pro_Write_OTP_Hysteresis(INNO3PRO_OTP_FAULT_HYST_60DEG);\par
                    \}\par
                    else\par
                    \{\par
                       Serial.print("\\n"); \par
                       Serial.print(F("Invalid Input! (40 Deg, 60 Deg)"));                                                                                      \par
                    \} \par
                    \par
                    //Next Line\par
                    Serial.print("\\n");                             \par
                    Serial.print("\\n");    \par
                    SerialState_e = STATE_CMD_CODE;                       //Return to Inno Pro Command Code\par
                  \}    \par
                  else\par
                  \{\par
                     Serial.print(F("Invalid"));    \par
                     Serial.print("\\n");                                                                \par
                  \}                                   \par
                  break;  \par
                                                                                                                          \par
            case STATE_READ: //Generic Read Command\par
\par
\par
                  if (isDigit(Inno3ProString[0]))                         //Check If First Serial Command is a Number\par
                  \{\par
  \par
                     u16ReadCnt = Inno3ProString.toInt();   \par
\par
                      Serial.print(F("READ: ")); Serial.print(u16ReadCnt);         // Print Read Value Equivalent\par
                      Serial.print("\\n"); \par
                 \par
\par
                    //CV Set Point                                                                \par
                    if( u16ReadCnt == 1)\par
                    \{                              \par
                          u16TempReadValue = Inno3ProApp.Inno3Pro_Telemetry(INNO3PRO_READ1);  \par
                          Serial.print(F("HEX : "));       \par
                          Serial.print(u16TempReadValue,HEX);                 \par
                          Serial.print(F("(MSB,LSB)"));            \par
                                               \par
                          Serial.print("\\n");   \par
                          Serial.print(F("CV Set Point : "));                       \par
                          Serial.print((float)Inno3ProApp.Inno3Pro_Read_CV_SetPoint(),2); \par
                          Serial.print(F(" V"));                                             \par
                    \}\par
                    //UV Set Point \par
                    else if( u16ReadCnt == 2  )\par
                    \{                            \par
                          u16TempReadValue = Inno3ProApp.Inno3Pro_Telemetry(INNO3PRO_READ2);  \par
                          Serial.print(F("HEX : "));       \par
                          Serial.print(u16TempReadValue,HEX);                 \par
                          Serial.print(F("(MSB,LSB)"));          \par
                          \par
                          Serial.print("\\n");\par
                          Serial.print(F("UV Threshold : "));                                                      \par
                          Serial.print((float)Inno3ProApp.Inno3Pro_Read_UV_Threshold(),2);           \par
                          Serial.print(F(" V"));                                              \par
                    \} \par
                    //OV Set Point \par
                    else if(u16ReadCnt == 3 )\par
                    \{                            \par
                          u16TempReadValue = Inno3ProApp.Inno3Pro_Telemetry(INNO3PRO_READ3);  \par
                          Serial.print(F("HEX : "));       \par
                          Serial.print(u16TempReadValue,HEX);                 \par
                          Serial.print(F("(MSB,LSB)"));     \par
                          \par
                          Serial.print("\\n");\par
                          Serial.print(F("OV Threshold : "));           \par
                          Serial.print((float)Inno3ProApp.Inno3Pro_Read_OV_Threshold(),2);           \par
                          Serial.print(F(" V"));                                           \par
                    \}             \par
                    else if(u16ReadCnt == 4 )\par
                    \{                            \par
                          u16TempReadValue = Inno3ProApp.Inno3Pro_Telemetry(INNO3PRO_READ4);  \par
                          Serial.print(F("HEX : "));       Serial.print(u16TempReadValue,HEX);              Serial.print(F("(MSB,LSB)"));  // Print Hex Equivalent      \par
                          Serial.print("\\n");\par
                          Serial.print("\\n");\par
                          \par
                          Serial.print(F("Bit 14 : "));        Inno3ProApp.Inno3Pro_Read_VbusSwitch()    ? ( Serial.print(F("1")) ) : ( Serial.print(F("0")) );     Serial.print("     Reg_VBEN");     Serial.print("\\n");\par
                          Serial.print(F("Bit 13 : "));        Inno3ProApp.Inno3Pro_Read_Bleeder()       ? ( Serial.print(F("1")) ) : ( Serial.print(F("0")) );     Serial.print("     Reg_BLEEDER");  Serial.print("\\n");\par
                          Serial.print(F("Bit 12 : "));        Inno3ProApp.Inno3Pro_Read_PsuOff()        ? ( Serial.print(F("1")) ) : ( Serial.print(F("0")) );     Serial.print("     Reg_PSUOFF");   Serial.print("\\n"); \par
                          Serial.print(F("Bit 11 : "));        Inno3ProApp.Inno3Pro_Read_FastVI()        ? ( Serial.print(F("1")) ) : ( Serial.print(F("0")) );     Serial.print("     Reg_FSTVIC");   Serial.print("\\n");\par
                          Serial.print(F("Bit 10 : "));        Inno3ProApp.Inno3Pro_Read_CvoMode()       ? ( Serial.print(F("1")) ) : ( Serial.print(F("0")) );     Serial.print("     Reg_CVO");      Serial.print("\\n");          \par
                          Serial.print(F("Bit  9 : "));        Inno3ProApp.Inno3Pro_Read_OtpFaultHyst()  ? ( Serial.print(F("1")) ) : ( Serial.print(F("0")) );     Serial.print("     Reg_OTP");      Serial.print("\\n");      \par
\par
                          Serial.print(F("Bit 0-3: "));          \par
                          Serial.print((float)Inno3ProApp.Inno3Pro_Read_Cable_Drop_Comp(),2);        \par
                          Serial.print("  Reg_CDC (mv)");          \par
                          Serial.print("\\n");                           \par
                                                                               \par
                    \}                      \par
                    //CC and CP Set Point                                   \par
                    else if( u16ReadCnt == 5)\par
                    \{       \par
                          u16TempReadValue = Inno3ProApp.Inno3Pro_Telemetry(INNO3PRO_READ5);  \par
                          Serial.print(F("HEX : "));       \par
                          Serial.print(u16TempReadValue,HEX);             \par
                          Serial.print(F("(MSB,LSB)"));    \par
                          Serial.print("\\n");                                                                                   \par
                           \par
                          //MSB\par
                          Serial.print(F("CC Set Point: "));\par
                          Serial.print((float)Inno3ProApp.Inno3Pro_Read_CC_SetPoint(),2);   \par
                          Serial.print(F(" A"));           \par
                          Serial.print("\\n"); \par
                                \par
                          //LSB\par
                          Serial.print(F("CP Set Point: "));            \par
                          Serial.print((float)Inno3ProApp.Inno3Pro_Read_CP_Threshold(),2);  \par
                          Serial.print(F(" V"));           \par
                          Serial.print("\\n");                                       \par
                    \}   \par
\par
                                                   \par
                    else if( u16ReadCnt == 6)\par
                    \{       \par
                          u16TempReadValue = Inno3ProApp.Inno3Pro_Telemetry(INNO3PRO_READ6);  \par
                          Serial.print(F("HEX : "));       \par
                          Serial.print(u16TempReadValue,HEX);             \par
                          Serial.print(F("(MSB,LSB)"));    \par
                          Serial.print("\\n");                                                                                   \par
                           \par
                   \par
                          Serial.print(F("Overvoltage Fault Response    :   "));\par
                          Serial.print((float)Inno3ProApp.Inno3Pro_Read_OV_Fault_Response(),2);         \par
                          Serial.print("\\n");                                 \par
                   \par
                          Serial.print(F("Undervoltage Fault Response   :   "));            \par
                          Serial.print((float)Inno3ProApp.Inno3Pro_Read_UV_Fault_Response(),2);            \par
                          Serial.print("\\n");       \par
\par
                          Serial.print(F("IS-pin Short Fault Response   :   "));            \par
                          Serial.print((float)Inno3ProApp.Inno3Pro_Read_IsPinShort_Fault_Response(),2);            \par
                          Serial.print("\\n");      \par
\par
                          Serial.print(F("Undervoltage Fault Timer      :   "));            \par
                          Serial.print((float)Inno3ProApp.Inno3Pro_Read_UV_Fault_Timer(),2);            \par
                          Serial.print("\\n");        \par
\par
                          Serial.print(F("Watchdog Timer Timeout        :   "));            \par
                          Serial.print((float)Inno3ProApp.Inno3Pro_Read_Watchdog_Timer(),2);            \par
                          Serial.print("\\n");   \par
\par
                          Serial.print(F("CV Mode Fault Response        :   "));            \par
                          Serial.print((float)Inno3ProApp.Inno3Pro_Read_CvMode_Fault_Response(),2);            \par
                          Serial.print("\\n"); \par
\par
                          Serial.print(F("CV Mode Fault Timer           :   "));            \par
                          Serial.print((float)Inno3ProApp.Inno3Pro_Read_CvMode_Timer(),2);            \par
                          Serial.print("\\n");                                                                                                                                                                    \par
                    \}   \par
                    \par
\par
                    //Measured CC                                  \par
                    else if( u16ReadCnt == 7)\par
                    \{\par
                          u16TempReadValue = Inno3ProApp.Inno3Pro_Telemetry(INNO3PRO_READ7);  \par
                          Serial.print(F("HEX : "));       \par
                                            \par
                          Serial.print(u16TempReadValue,HEX);             \par
                          Serial.print(F("(MSB,LSB)"));    \par
                          Serial.print("\\n");\par
\par
                          //Bit Manipulation:  MSB- Clear the Bit [15:9]            LSB - Clear bit 7 (Parity)\par
                          u16TempReadValue = ((u16TempReadValue & 0x0100) >> 1) + (u16TempReadValue & 0x7F);                        \par
                          Serial.print(F("Processed Hex : "));                                                           \par
                          Serial.print(u16TempReadValue,HEX);                                                                                     \par
                          Serial.print("\\n");                           \par
                                                                                                 \par
                          Serial.print(F("Measured Output Current: "));            \par
                          Serial.print((float)Inno3ProApp.Inno3Pro_Read_Amps(),2);   \par
                          Serial.print(F(" A"));                                   \par
                    \}                    \par
                    //Measured CV                                   \par
                    else if( u16ReadCnt == 9)\par
                    \{  \par
                          u16TempReadValue = Inno3ProApp.Inno3Pro_Telemetry(INNO3PRO_READ9);  \par
                          Serial.print(F("HEX : "));                                                          \par
                          Serial.print(u16TempReadValue,HEX);             \par
                          Serial.print(F("(MSB,LSB)"));                                                                     \par
                          Serial.print("\\n");   \par
\par
                         //Bit Manipulation:  Clear the Bit[15:12] , use Bit [11:0] \par
                          u16TempReadValue = (u16TempReadValue & 0x0FFF);                          \par
                          Serial.print(F("Processed Hex : "));                                                          \par
                          Serial.print(u16TempReadValue,HEX);                                                                                     \par
                          Serial.print("\\n"); \par
                                                         \par
                          Serial.print(F("Measured Output Voltage: "));            \par
                          Serial.print((float)Inno3ProApp.Inno3Pro_Read_Volts(),2);   \par
                          Serial.print(F(" V")); \par
                    \}\par
\par
                    else if(u16ReadCnt == 10 )\par
                    \{                            \par
                          u16TempReadValue = Inno3ProApp.Inno3Pro_Telemetry(INNO3PRO_READ10);  \par
                          Serial.print(F("HEX : "));       Serial.print(u16TempReadValue,HEX);              Serial.print(F("(MSB,LSB)"));  // Print Hex Equivalent      \par
                          Serial.print("\\n");\par
                          Serial.print("\\n");\par
\par
                          Serial.print(F("Bit 15 : "));        Inno3ProApp.Inno3Pro_Read_Status_InterruptEnable ()    ? ( Serial.print(F("1")) ) : ( Serial.print(F("0")) );     Serial.print("  Reg_INTERRUPT_EN");     Serial.print("\\n");\par
                          Serial.print(F("Bit 14 : "));        Inno3ProApp.Inno3Pro_Read_Status_SystemReady     ()    ? ( Serial.print(F("1")) ) : ( Serial.print(F("0")) );     Serial.print("  Reg_CONTROL_S");        Serial.print("\\n");\par
                          Serial.print(F("Bit 13 : "));        Inno3ProApp.Inno3Pro_Read_Status_OutputDischarge ()    ? ( Serial.print(F("1")) ) : ( Serial.print(F("0")) );     Serial.print("  Reg_VDIS");             Serial.print("\\n");\par
                          Serial.print(F("Bit 12 : "));        Inno3ProApp.Inno3Pro_Read_Status_HighSwitchFreq  ()    ? ( Serial.print(F("1")) ) : ( Serial.print(F("0")) );     Serial.print("  Reg_HIGH_FSW");         Serial.print("\\n"); \par
                          Serial.print(F("Bit  9 : "));        Inno3ProApp.Inno3Pro_Read_Status_OtpFault        ()    ? ( Serial.print(F("1")) ) : ( Serial.print(F("0")) );     Serial.print("  Reg_OTP");              Serial.print("\\n");\par
                          Serial.print(F("Bit  5 : "));        Inno3ProApp.Inno3Pro_Read_Status_Vout2pct        ()    ? ( Serial.print(F("1")) ) : ( Serial.print(F("0")) );     Serial.print("  Reg_VOUT2PCT");         Serial.print("\\n");          \par
                          Serial.print(F("Bit  4 : "));        Inno3ProApp.Inno3Pro_Read_Status_Vout10pct       ()    ? ( Serial.print(F("1")) ) : ( Serial.print(F("0")) );     Serial.print("  Reg_VOUT10PCT");        Serial.print("\\n");      \par
\par
                         \par
                          Serial.print(F("Bit  3 : "));        Inno3ProApp.Inno3Pro_Read_Status_IsPinShort      ()    ? ( Serial.print(F("1")) ) : ( Serial.print(F("0")) );     Serial.print("  Reg_ISSC");             Serial.print("\\n"); \par
                          Serial.print(F("Bit  1 : "));        Inno3ProApp.Inno3Pro_Read_Status_UV_Fault        ()    ? ( Serial.print(F("1")) ) : ( Serial.print(F("0")) );     Serial.print("  Reg_VOUT_UV");          Serial.print("\\n");\par
                          Serial.print(F("Bit  0 : "));        Inno3ProApp.Inno3Pro_Read_Status_OV_Fault        ()    ? ( Serial.print(F("1")) ) : ( Serial.print(F("0")) );     Serial.print("  Reg_VOUT_OV");          Serial.print("\\n");          \par
                                                  \par
                    \}         \par
                    else if(u16ReadCnt == 11 )\par
                    \{                            \par
                          u16TempReadValue = Inno3ProApp.Inno3Pro_Telemetry(INNO3PRO_READ11);  \par
                          Serial.print(F("HEX : "));       Serial.print(u16TempReadValue,HEX);              Serial.print(F("(MSB,LSB)"));  // Print Hex Equivalent      \par
                          Serial.print("\\n");\par
                          Serial.print("\\n");\par
                          \par
                          Serial.print(F("Bit 15 : "));        Inno3ProApp.Inno3Pro_Read_Status_CvoMode_AR      ()    ? ( Serial.print(F("1")) ) : ( Serial.print(F("0")) );     Serial.print("  Reg_ar_CV");         Serial.print("\\n");\par
                          Serial.print(F("Bit 12 : "));        Inno3ProApp.Inno3Pro_Read_Status_IsPinShort_AR   ()    ? ( Serial.print(F("1")) ) : ( Serial.print(F("0")) );     Serial.print("  Reg_ar_ISSC");       Serial.print("\\n");\par
                          Serial.print(F("Bit 10 : "));        Inno3ProApp.Inno3Pro_Read_Status_OV_AR           ()    ? ( Serial.print(F("1")) ) : ( Serial.print(F("0")) );     Serial.print("  Reg_ar_VOUT_OV");    Serial.print("\\n");\par
                          Serial.print(F("Bit  9 : "));        Inno3ProApp.Inno3Pro_Read_Status_UV_AR           ()    ? ( Serial.print(F("1")) ) : ( Serial.print(F("0")) );     Serial.print("  Reg_ar_VOUT_UV");    Serial.print("\\n"); \par
                          Serial.print(F("Bit  7 : "));        Inno3ProApp.Inno3Pro_Read_Status_LatchOff        ()    ? ( Serial.print(F("1")) ) : ( Serial.print(F("0")) );     Serial.print("  Reg_LO");            Serial.print("\\n");\par
                          Serial.print(F("Bit  6 : "));        Inno3ProApp.Inno3Pro_Read_Status_CvoMode_LO      ()    ? ( Serial.print(F("1")) ) : ( Serial.print(F("0")) );     Serial.print("  Reg_Lo_CVO");        Serial.print("\\n");          \par
                          Serial.print(F("Bit  5 : "));        Inno3ProApp.Inno3Pro_Read_Status_PsuOffCmd       ()    ? ( Serial.print(F("1")) ) : ( Serial.print(F("0")) );     Serial.print("  Reg_PSUOFF");        Serial.print("\\n");      \par
\par
                         \par
                          Serial.print(F("Bit  4 : "));        Inno3ProApp.Inno3Pro_Read_Status_IsPinShort_LO   ()    ? ( Serial.print(F("1")) ) : ( Serial.print(F("0")) );     Serial.print("  Reg_Lo_ISSC");       Serial.print("\\n"); \par
                          Serial.print(F("Bit  2 : "));        Inno3ProApp.Inno3Pro_Read_Status_OV_LO           ()    ? ( Serial.print(F("1")) ) : ( Serial.print(F("0")) );     Serial.print("  Reg_Lo_VOUT_OV");    Serial.print("\\n");\par
                          Serial.print(F("Bit  1 : "));        Inno3ProApp.Inno3Pro_Read_Status_UV_LO           ()    ? ( Serial.print(F("1")) ) : ( Serial.print(F("0")) );     Serial.print("  Reg_Lo_VOUT_UV");    Serial.print("\\n");          \par
                          Serial.print(F("Bit  0 : "));        Inno3ProApp.Inno3Pro_Read_Status_BPS_LO          ()    ? ( Serial.print(F("1")) ) : ( Serial.print(F("0")) );     Serial.print("  Reg_BPS_OV");        Serial.print("\\n");          \par
                                                  \par
                    \}                  \par
\par
                    else if(u16ReadCnt == 12 )\par
                    \{                            \par
                          u16TempReadValue = Inno3ProApp.Inno3Pro_Telemetry(INNO3PRO_READ12);  \par
                          Serial.print(F("HEX : "));       Serial.print(u16TempReadValue,HEX);              Serial.print(F("(MSB,LSB)"));  // Print Hex Equivalent      \par
                          Serial.print("\\n");\par
                          Serial.print("\\n");\par
                          \par
                          Serial.print(F("Bit 14 : "));        Inno3ProApp.Inno3Pro_Read_Interrupt_Mask_CntrlSecondary        ()    ? ( Serial.print(F("1")) ) : ( Serial.print(F("0")) );     Serial.print("    Mask  Reg_CONTROL_S");     Serial.print("\\n");\par
                          Serial.print(F("Bit 13 : "));        Inno3ProApp.Inno3Pro_Read_Interrupt_Mask_BpsCurrentLo          ()    ? ( Serial.print(F("1")) ) : ( Serial.print(F("0")) );     Serial.print("    Mask  Reg_LO_Fault");      Serial.print("\\n");\par
                          Serial.print(F("Bit 12 : "));        Inno3ProApp.Inno3Pro_Read_Interrupt_Mask_CvoPkLoadTimer        ()    ? ( Serial.print(F("1")) ) : ( Serial.print(F("0")) );     Serial.print("    Mask  Reg_CCAR");          Serial.print("\\n");\par
                          Serial.print(F("Bit 11 : "));        Inno3ProApp.Inno3Pro_Read_Interrupt_Mask_IsPinShort            ()    ? ( Serial.print(F("1")) ) : ( Serial.print(F("0")) );     Serial.print("    Mask  Reg_ISSC");          Serial.print("\\n");\par
                          Serial.print(F("Bit  9 : "));        Inno3ProApp.Inno3Pro_Read_Interrupt_Mask_UV                    ()    ? ( Serial.print(F("1")) ) : ( Serial.print(F("0")) );     Serial.print("    Mask  Reg_VOUT_UV");       Serial.print("\\n"); \par
                          Serial.print(F("Bit  8 : "));        Inno3ProApp.Inno3Pro_Read_Interrupt_Mask_OV                    ()    ? ( Serial.print(F("1")) ) : ( Serial.print(F("0")) );     Serial.print("    Mask  Reg_VOUT_OV");       Serial.print("\\n");\par
                         \par
                          Serial.print(F("Bit  6 : "));        Inno3ProApp.Inno3Pro_Read_Interrupt_Stat_CntrlSecondary        ()    ? ( Serial.print(F("1")) ) : ( Serial.print(F("0")) );     Serial.print("  Status  Reg_CONTROL_S");     Serial.print("\\n");          \par
                          Serial.print(F("Bit  5 : "));        Inno3ProApp.Inno3Pro_Read_Interrupt_Stat_BpsCurrentLo          ()    ? ( Serial.print(F("1")) ) : ( Serial.print(F("0")) );     Serial.print("  Status  Reg_LO_Fault");      Serial.print("\\n");                               \par
                          Serial.print(F("Bit  4 : "));        Inno3ProApp.Inno3Pro_Read_Interrupt_Stat_CvoPkLoadTimer        ()    ? ( Serial.print(F("1")) ) : ( Serial.print(F("0")) );     Serial.print("  Status  Reg_CCAR");          Serial.print("\\n"); \par
                          Serial.print(F("Bit  3 : "));        Inno3ProApp.Inno3Pro_Read_Interrupt_Stat_IsPinShort            ()    ? ( Serial.print(F("1")) ) : ( Serial.print(F("0")) );     Serial.print("  Status  Reg_ISSC");          Serial.print("\\n");\par
                          Serial.print(F("Bit  1 : "));        Inno3ProApp.Inno3Pro_Read_Interrupt_Stat_UV                    ()    ? ( Serial.print(F("1")) ) : ( Serial.print(F("0")) );     Serial.print("  Status  Reg_VOUT_UV");       Serial.print("\\n");          \par
                          Serial.print(F("Bit  0 : "));        Inno3ProApp. Inno3Pro_Read_Interrupt_Stat_OV                   ()    ? ( Serial.print(F("1")) ) : ( Serial.print(F("0")) );     Serial.print("  Status  Reg_VOUT_OV");       Serial.print("\\n");          \par
                                                  \par
                    \}                                           \par
                    //Average Measured CC                                  \par
                    else if( u16ReadCnt == 13)\par
                    \{\par
                          u16TempReadValue = Inno3ProApp.Inno3Pro_Telemetry(INNO3PRO_READ13);  \par
                          Serial.print(F("HEX : "));       \par
                          Serial.print(u16TempReadValue,HEX);             \par
                          Serial.print(F("(MSB,LSB)"));    \par
                          Serial.print("\\n");    \par
                                                                                                                 \par
                          Serial.print(F("Average Output Current: "));            \par
                          Serial.print((float)Inno3ProApp.Inno3Pro_Read_AmpsAverage(),2);   \par
                          Serial.print(F(" A"));                                    \par
                    \}                    \par
                    //Average Measured CV                                   \par
                    else if( u16ReadCnt == 14)\par
                    \{  \par
                          u16TempReadValue = Inno3ProApp.Inno3Pro_Telemetry(INNO3PRO_READ14);  \par
                          Serial.print(F("HEX : "));       \par
                          Serial.print(u16TempReadValue,HEX);             \par
                          Serial.print(F("(MSB,LSB)"));    \par
                          Serial.print("\\n");    \par
                                                                                                                 \par
                          Serial.print(F("Average Output Voltage: "));            \par
                          Serial.print((float)Inno3ProApp.Inno3Pro_Read_VoltsAverage(),2);   \par
                          Serial.print(F(" V")); \par
                    \}    \par
                   else if( u16ReadCnt == 15)\par
                    \{  \par
\par
                       u16TempReadValue = Inno3ProApp.Inno3Pro_Telemetry(INNO3PRO_READ15);            \par
                        Serial.print(F("HEX : "));       \par
                        Serial.print(u16TempReadValue,HEX);             \par
                        Serial.print(F("(MSB,LSB)"));    \par
                        Serial.print("\\n");  \par
                                                 \par
                        Serial.print(F("Voltage DAC: "));            \par
                        Serial.print((float)Inno3ProApp.Inno3Pro_Read_Voltage_DAC(),2);   \par
                        Serial.print(F(" V")); \par
                    \} \par
                   else if( u16ReadCnt == 16)\par
                    \{  \par
\par
                       u16TempReadValue = Inno3ProApp.Inno3Pro_Telemetry(INNO3PRO_READ_LOOP_SPEED_1);            \par
                       \par
                       Serial.print(F("Loop Speed 1: "));                     \par
                       Serial.print("\\n");        \par
                       Serial.print(F("HEX       : "));             Serial.print(u16TempReadValue,HEX);         Serial.print(F("(MSB,LSB)"));  // Print Hex Equivalent            \par
                    \}   \par
                   else if( u16ReadCnt == 17)\par
                    \{  \par
\par
                       u16TempReadValue = Inno3ProApp.Inno3Pro_Telemetry(INNO3PRO_READ_LOOP_SPEED_2);            \par
                       \par
                       Serial.print(F("Loop Speed 2: "));                      \par
                       Serial.print("\\n");        \par
                       Serial.print(F("HEX       : "));             Serial.print(u16TempReadValue,HEX);         Serial.print(F("(MSB,LSB)"));  // Print Hex Equivalent            \par
                    \}                                                           \par
                    else\par
                    \{\par
                          u16TempReadValue = Inno3ProApp.Inno3Pro_Telemetry(u16GenericReadValue);  \par
                          Serial.print(F("HEX : "));       Serial.print(u16TempReadValue,HEX);                 Serial.print(F("(MSB,LSB)"));  // Print Hex Equivalent   \par
                          Serial.print("\\n"); \par
                          Serial.print("\\n"); \par
                          \par
                         //MSB \par
                         Serial.print(F("MSB    : 0x"));     Serial.print((u16TempReadValue & 0xFF00)>>8,HEX);                                                                                                                                       \par
                         Serial.print("\\n"); \par
                         \par
                         Serial.print(F("Bit 15 : "));        bitRead(u16TempReadValue,15) ? ( Serial.print(F("1")) ) : ( Serial.print(F("0")) );     Serial.print(ReadBit15);  Serial.print("\\n");                          \par
                         Serial.print(F("Bit 14 : "));        bitRead(u16TempReadValue,14) ? ( Serial.print(F("1")) ) : ( Serial.print(F("0")) );     Serial.print(ReadBit14);  Serial.print("\\n");\par
                         Serial.print(F("Bit 13 : "));        bitRead(u16TempReadValue,13) ? ( Serial.print(F("1")) ) : ( Serial.print(F("0")) );     Serial.print(ReadBit13);  Serial.print("\\n");\par
                         Serial.print(F("Bit 12 : "));        bitRead(u16TempReadValue,12) ? ( Serial.print(F("1")) ) : ( Serial.print(F("0")) );     Serial.print(ReadBit12);  Serial.print("\\n"); \par
                         Serial.print(F("Bit 11 : "));        bitRead(u16TempReadValue,11) ? ( Serial.print(F("1")) ) : ( Serial.print(F("0")) );     Serial.print(ReadBit11);  Serial.print("\\n");\par
                         Serial.print(F("Bit 10 : "));        bitRead(u16TempReadValue,10) ? ( Serial.print(F("1")) ) : ( Serial.print(F("0")) );     Serial.print(ReadBit10);  Serial.print("\\n");          \par
                         Serial.print(F("Bit  9 : "));        bitRead(u16TempReadValue,9) ? ( Serial.print(F("1")) ) : ( Serial.print(F("0")) );      Serial.print(ReadBit9);  Serial.print("\\n"); \par
                         Serial.print(F("Bit  8 : "));        bitRead(u16TempReadValue,8) ? ( Serial.print(F("1")) ) : ( Serial.print(F("0")) );      Serial.print(ReadBit8);  Serial.print("\\n");                                                                                                      \par
                         Serial.print("\\n");   \par
    \par
    \par
                         //LSB  \par
                         Serial.print(F("LSB    : 0x"));       Serial.print(u16TempReadValue & 0x00FF,HEX);                                                                                                                                         \par
                         Serial.print("\\n");                  \par
                                         \par
                         Serial.print(F("Bit  7 : "));        bitRead(u16TempReadValue,7) ? ( Serial.print(F("1")) ) : ( Serial.print(F("0")) );     Serial.print(ReadBit7);  Serial.print("\\n");                          \par
                         Serial.print(F("Bit  6 : "));        bitRead(u16TempReadValue,6) ? ( Serial.print(F("1")) ) : ( Serial.print(F("0")) );     Serial.print(ReadBit6);  Serial.print("\\n"); \par
                         Serial.print(F("Bit  5 : "));        bitRead(u16TempReadValue,5) ? ( Serial.print(F("1")) ) : ( Serial.print(F("0")) );     Serial.print(ReadBit5);  Serial.print("\\n"); \par
                         Serial.print(F("Bit  4 : "));        bitRead(u16TempReadValue,4) ? ( Serial.print(F("1")) ) : ( Serial.print(F("0")) );     Serial.print(ReadBit4);  Serial.print("\\n");\par
                         Serial.print(F("Bit  3 : "));        bitRead(u16TempReadValue,3) ? ( Serial.print(F("1")) ) : ( Serial.print(F("0")) );     Serial.print(ReadBit3);  Serial.print("\\n"); \par
                         Serial.print(F("Bit  2 : "));        bitRead(u16TempReadValue,2) ? ( Serial.print(F("1")) ) : ( Serial.print(F("0")) );     Serial.print(ReadBit2);  Serial.print("\\n");           \par
                         Serial.print(F("Bit  1 : "));        bitRead(u16TempReadValue,1) ? ( Serial.print(F("1")) ) : ( Serial.print(F("0")) );     Serial.print(ReadBit1);  Serial.print("\\n"); \par
                         Serial.print(F("Bit  0 : "));        bitRead(u16TempReadValue,0) ? ( Serial.print(F("1")) ) : ( Serial.print(F("0")) );     Serial.print(ReadBit0);  Serial.print("\\n"); \par
        \par
                    \}                                                  \par
\par
                    Serial.print("\\n"); \par
                    Serial.print("\\n"); \par
                                       \par
                    SerialState_e = STATE_CMD_CODE;                     //Return to Inno Pro Command Code\par
                  \}\par
                  else\par
                  \{\par
                     Serial.print(F("Invalid"));    \par
                     Serial.print("\\n");                                                                \par
                  \}                                                             \par
                  break;  \par
\par
            \par
            case STATE_WRITE: //Register Write\par
\par
                    Serial.print(F("Register Address: "));                            \par
                    u8_Inno3Pro_Reg_Address = (Ascii_to_Hex(Inno3ProString[0])<<4) + Ascii_to_Hex(Inno3ProString[1]);  \par
                    Serial.print(u8_Inno3Pro_Reg_Address,HEX);                  \par
                    Serial.print("\\n");                        \par
                     \par
                    //LSB\par
                    Serial.print(F("LSB: "));   \par
                    u8_Buffer_Tx_Data[0] = (Ascii_to_Hex(Inno3ProString[3])<<4) + Ascii_to_Hex(Inno3ProString[4]);\par
                    Serial.print(u8_Buffer_Tx_Data[0],HEX); \par
                    Serial.print("\\n");                        \par
                    \par
\par
                    //MSB\par
                    Serial.print(F("MSB: "));    \par
                    u8_Buffer_Tx_Data[1] = (Ascii_to_Hex(Inno3ProString[6])<<4) + Ascii_to_Hex(Inno3ProString[7]);\par
                    Serial.print(u8_Buffer_Tx_Data[1],HEX); \par
                    Serial.print("\\n");                        \par
  \par
\par
\par
                    //Next Line                         \par
                    Serial.print("\\n");   \par
                   \par
                    //Execute I2C Command Write                     \par
                    Inno3ProTx.I2C_Write16(INNO3PRO_ADDRESS,u8_Inno3Pro_Reg_Address,u8_Buffer_Tx_Data,2);                                                        \par
                    SerialState_e = STATE_CMD_CODE;                       //Return to Inno Pro Command Code\par
                 \par
                       \par
                  break;                                                                                                         \par
\par
          \}\par
\}\par
\par
 unsigned char Ascii_to_Hex (unsigned char data)\par
 \{ \par
    if (data > '9') \par
    \{ \par
      data += 9;\par
    \}\par
    return (data &= 0x0F);\par
 \}\par
\par}
 \par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Inno3Pro_SineWave.ino\par \pard\plain 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This is an example of how to use the library.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Sinewave Generation: } \par}
\par
 {\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Code: } \par}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid /**\par
    InnoSwitch3-Pro Example Application\par
\par
    Company:    Power Integrations\par
\par
    Summary:    This demonstration sine wave patterns on Output Voltage \par
        \par
    Author  :   CS - PIPH Applications   \par
    \par
    Date    :   August 3, 2018\par
   \par
    Copyright (C) 2018 Power Integrations. All rights reserved.\par
\par
    DISCLAIMER: YOU AGREE AND ACKNOWLEDGE THE SOFTWARE CODE LIBRARIES ARE\par
    PROVIDED ON AN "AS IS" BASIS AND THAT YOUR USE OR RELIANCE UPON THE SOFTWARE \par
    IS AT YOUR OWN RISK AND DISCRETION. POWER INTEGRATIONS HEREBY DISCLAIM ANY \par
    AND ALL REPRESENTATIONS, WARRANTIES AND GUARANTIES REGARDING THE SOFTWARE. \par
    POWER INTEGRATIONS MAKES NO WARRANTY HEREIN AND SPECIFICALLY DISCLAIMS ALL \par
    WARRANTIES INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF \par
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT \par
    TO THIRD PARTIES. FURTHERMORE, POWER INTEGRATIONS MAKES NO WARRANTY THAT \par
 \par
    1) THE SOFTWARE CODE LIBRARIES WILL MEET YOUR REQUIREMENTS \par
    2) THE SOFTWARE CODE LIBRARIES WILL BE ACCURATE, RELIBALE, OR ERROR-FREE. \par
\par
    DAMAGES DISCLAIMER: POWER INTEGRATIONS, WILL NOT UNDER ANY CIRCUMSTANCES, \par
    BE LIABLE TO ANY USER FOR ANY DIRECT, INDIRECT, CONSEQUENTIAL, SPECIAL, \par
    PUNITIVE, INCIDENTAL DAMAGES, LOST PROFITS OR LOSS OF BUSINESS, WHETHER \par
    FORESEEABLE OR UNFORESEEABLE EVEN IF POWER INTEGRATIONS HAS BEEN ADVISED \par
    OF THE POSSIBILITY OF SUCH DAMAGES ARISING OUT OF OR RELATED TO USE OF \par
    THIS SOFTWARE CODE LIBRARY.   \par
    \par
 */\par
\par
\par
//Step  1  :  Add the Header Files\par
#include <Drv_Rtc.h>\par
#include <Drv_i2c.h>\par
#include <Inno3Pro.h>\par
#include <Config.h>\par
#include <Wire.h>\par
\par
\par
//Step  2  :  Create the class instance\par
Inno3Pro_Rtc Inno3ProClk;\par
Inno3Pro_Application Inno3ProApp;\par
\par
\par
//Step 3 :  Write Initial Commands to Inno Pro\par
void setup() \par
\{\par
    Inno3ProApp.Inno3Pro_Initialization();        \par
    Inno3ProApp.Inno3Pro_Write_Cable_Drop_Comp(300);           \par
    Inno3ProApp.Inno3Pro_Write_Volt_Peak(7);             \par
    Inno3ProApp.Inno3Pro_Vbus_Switch_Control(1);         \par
\}\par
\par
\par
\par
//Step 4 :  Call the Functions on the Main Loop     \par
void loop()\par
\{  \par
\par
        static double fVoltInc = 5;                 //Initialize Voltage at 5V\par
        static uint16_t u16_Request_Timer = 0;      //Initialize Request Timer     \par
        static float VoltOutput = 0;\par
         \par
        static  float WaveTimerCount = 0;\par
       \par
        static float Resolution = 256;  //256,128,64,32,16\par
        static float PI_Timer = (PI*1000)/Resolution;        \par
        \par
        static float SineWaveOffset = 11.5;\par
\par
        static float Phase = 0;\par
          \par
        static float Amplitude = 5;                \par
        static float AngularFreq = 6;              \par
      \par
                \par
        //Library Call in the Mainloop\par
                \par
        //Timer Routine For Automatic Activation of  Requests\par
        if(Inno3ProClk.clock_HasTimeElapsedMs(u16_Request_Timer,50))    \par
        \{                       \par
          \par
           VoltOutput = SineWaveOffset + (Amplitude*sin((AngularFreq * WaveTimerCount) + Phase)); \par
           \par
           WaveTimerCount = WaveTimerCount + (PI/Resolution);\par
\par
            //2 PI\par
            if(WaveTimerCount > 6.28135)\par
            \{\par
              WaveTimerCount = 0;\par
\par
               //changes the phase and Amplitude of the wave slightly each loop.\par
               //Phase = Phase + 5;     \par
               //Amplitude = Amplitude + 0.2;         \par
            \}            \par
\par
            fVoltInc =constrain(VoltOutput,3,20);\par
            Inno3ProApp.Inno3Pro_Write_VI(fVoltInc,6);          //Set Voltage as variable and Set 6A current\par
\par
            u16_Request_Timer = Inno3ProClk.clock_GetTimeStampMs();     //Reset Timer  \par
        \}                   \par
\}\par
\par
\par
\par}
 \par
}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Index\par 
\pard\plain 
{\tc \v Index}
{\field\fldedit {\*\fldinst INDEX \\c2 \\*MERGEFORMAT}{\fldrslt INDEX}}
}